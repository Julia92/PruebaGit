<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.5">
  <compounddef id="todo" kind="page">
    <compoundname>todo</compoundname>
    <title>Todo List</title>
    <detaileddescription>
<para><variablelist>
<varlistentry><term><anchor id="todo_1_todo000001"/>Member <ref refid="classexamples_1_1audit_1_1_coins_example_1ac0a78806e49f802c46d856b1b666d815" kindref="member">examples.audit.CoinsExample.makeChangeForAmount</ref>  (int a_targetChangeAmount)</term></varlistentry>
<listitem><para>class Evaluator: input:<itemizedlist>
<listitem><para>PermutingConfiguration</para></listitem><listitem><para>Number of evaluation runs pers config (to turn off randomness as much as possible)</para></listitem><listitem><para>output facility (data container)</para></listitem><listitem><para>optional: event subscribers output:</para></listitem><listitem><para>averaged curve of fitness value thru all generations</para></listitem><listitem><para>best fitness value accomplished</para></listitem><listitem><para>average number of performance improvements for all generations  </para></listitem></itemizedlist>
</para></listitem>
<varlistentry><term><anchor id="todo_1_todo000002"/>Member <ref refid="classexamples_1_1energy_1_1_coins_energy_1_1_energy_gene_constraint_checker_1ae31617c18c0e2fb2c936e5994473bf3c" kindref="member">examples.energy.CoinsEnergy.EnergyGeneConstraintChecker.verify</ref>  (Gene a_gene, final Object a_alleleValue, final IChromosome a_chrom, final int a_geneIndex)</term></varlistentry>
<listitem><para>compute  </para></listitem>
<varlistentry><term><anchor id="todo_1_todo000003"/>Member <ref refid="classexamples_1_1gp_1_1anttrail_1_1_ant_map_1a659ac2b9f81a55d17fb2e236574c8c70" kindref="member">examples.gp.anttrail.AntMap.AntMap</ref>  (final int[][] a_map, int a_maxMoves)</term></varlistentry>
<listitem><para>speedup possible by using string?  </para></listitem>
<varlistentry><term><anchor id="todo_1_todo000004"/>Member <ref refid="classexamples_1_1gp_1_1_fibonacci_1a09f676281515cca71bae669293152c09" kindref="member">examples.gp.Fibonacci.create</ref>  ()</term></varlistentry>
<listitem><para>allow to optionally preset a static program in each chromosome  </para></listitem>
<varlistentry><term><anchor id="todo_1_todo000005"/>Member <ref refid="classexamples_1_1gp_1_1_fibonacci_1_1_formula_fitness_function_1a223e3cdf4059c9783a54841061460a8c" kindref="member">examples.gp.Fibonacci.FormulaFitnessFunction.computeRawFitness</ref>  (final IGPProgram a_program)</term></varlistentry>
<listitem><para>check if program valid, i.e. worth evaluating </para><para>add penalty for longer solutions  </para></listitem>
<varlistentry><term><anchor id="todo_1_todo000007"/>Member <ref refid="classexamples_1_1gp_1_1island_1_1_island_g_p_example_1a830119e3f370d14fb0be6187f1d9aa28" kindref="member">examples.gp.island.IslandGPExample.IslandGPExample</ref>  ()</term></varlistentry>
<listitem><para>Island config. einbauen, so dass Island model automatisch ausgeführt wird </para><para>impl. MergeEvent, e.g.: merge islands when one island stucks </para><para>jeweils beste lösung geht öfters verloren! Beeinflusst ein Island das andere oder ist die Lösung in einem Island nicht beständig?  </para></listitem>
<varlistentry><term><anchor id="todo_1_todo000010"/>Member <ref refid="classexamples_1_1gp_1_1tictactoe_1_1_evaluate_board_1abece9125d9ee8fb48cf6aa5a96af7c0a" kindref="member">examples.gp.tictactoe.EvaluateBoard.execute_void</ref>  (ProgramChromosome c, int n, Object[] args)</term></varlistentry>
<listitem><para>support other types than integer  </para></listitem>
<varlistentry><term><anchor id="todo_1_todo000011"/>Member <ref refid="classexamples_1_1gp_1_1tictactoe_1_1_single_node_validator_1a32e7b83ad42a193123dbe4dbf9aefc25" kindref="member">examples.gp.tictactoe.SingleNodeValidator.isAllowed</ref>  (int a_chromIndex, ProgramChromosome a_pc, CommandGene[] a_functionSet, CommandGene a_function, Class a_returnType, int a_subReturnTyp, int m_index)</term></varlistentry>
<listitem><para>provide convenient method setNonConsecutive(boolean) in CommandGene  </para></listitem>
<varlistentry><term><anchor id="todo_1_todo000017"/>Member <ref refid="classexamples_1_1gp_1_1tictactoe_1_1_tic_tac_toe_main_1a477f163a17746606ab745ce91e9bde7f" kindref="member">examples.gp.tictactoe.TicTacToeMain.create</ref>  (GPConfiguration a_conf, int a_color, GPGenotype a_other, int a_otherColor)</term></varlistentry>
<listitem><para>evaluate board to matrix  </para></listitem>
<varlistentry><term><anchor id="todo_1_todo000018"/>Member <ref refid="classexamples_1_1gp_1_1tictactoe_1_1_tic_tac_toe_main_1_1_game_fitness_function_1abbccfc65cec2ab000327b001f2089822" kindref="member">examples.gp.tictactoe.TicTacToeMain.GameFitnessFunction.computeRawFitness</ref>  (final IGPProgram a_program)</term></varlistentry>
<listitem><para>reduce fitness for NOP </para><para>value memory reads and writes  </para></listitem>
<varlistentry><term><anchor id="todo_1_todo000020"/>Member <ref refid="classexamples_1_1island_1_1_island_example_1aad36c7af08e927224e83d83a04b104e1" kindref="member">examples.island.IslandExample.start</ref>  ()</term></varlistentry>
<listitem><para></para></listitem>
<varlistentry><term><anchor id="todo_1_todo000021"/>Member <ref refid="classexamples_1_1monalisa_1_1core_1_1_alpha_mutation_operator_1ae1fcb87d1d1a9d22a86b7f4bb5593c60" kindref="member">examples.monalisa.core.AlphaMutationOperator.operate</ref>  (final Population a_population, final List a_candidateChromosomes)</term></varlistentry>
<listitem><para>move to base class, refactor  </para></listitem>
<varlistentry><term><anchor id="todo_1_todo000022"/>Member <ref refid="classexamples_1_1monalisa_1_1core_1_1_alpha_off_mutation_operator_1a68240b26bc561f24ab1251cc97ae9252" kindref="member">examples.monalisa.core.AlphaOffMutationOperator.operate</ref>  (final Population a_population, final List a_candidateChromosomes)</term></varlistentry>
<listitem><para>move to base class, refactor  </para></listitem>
<varlistentry><term><anchor id="todo_1_todo000023"/>Member <ref refid="classexamples_1_1monalisa_1_1core_1_1_color_mutation_operator_1a1143ed54d24aa0d922111a8bede53f0d" kindref="member">examples.monalisa.core.ColorMutationOperator.operate</ref>  (final Population a_population, final List a_candidateChromosomes)</term></varlistentry>
<listitem><para>move to base class, refactor  </para></listitem>
<varlistentry><term><anchor id="todo_1_todo000024"/>Member <ref refid="classexamples_1_1monalisa_1_1core_1_1_point_mutation_operator_1a77dc2c33c39c88ed99f6300dd8022125" kindref="member">examples.monalisa.core.PointMutationOperator.operate</ref>  (final Population a_population, final List a_candidateChromosomes)</term></varlistentry>
<listitem><para>move to base class, refactor  </para></listitem>
<varlistentry><term><anchor id="todo_1_todo000025"/>Member <ref refid="classexamples_1_1monalisa_1_1core_1_1_polygon_mutation_operator_1a007895c5c90286148d47ef8d1cd1ce93" kindref="member">examples.monalisa.core.PolygonMutationOperator.operate</ref>  (final Population a_population, final List a_candidateChromosomes)</term></varlistentry>
<listitem><para>move to base class, refactor  </para></listitem>
<varlistentry><term><anchor id="todo_1_todo000026"/>Member <ref refid="classexamples_1_1monalisa_1_1core_1_1_single_mutation_operator_1a07db0eb33cb05fa3407e1b560e0a7a9a" kindref="member">examples.monalisa.core.SingleMutationOperator.operate</ref>  (final Population a_population, final List a_candidateChromosomes)</term></varlistentry>
<listitem><para>move to base class, refactor  </para></listitem>
<varlistentry><term><anchor id="todo_1_todo000027"/>Member <ref refid="classexamples_1_1simple_boolean_threaded_1_1_simple_example_1ab55245566b467d39fbc8098617ba5cbe" kindref="member">examples.simpleBooleanThreaded.SimpleExample.main</ref>  (String[] args)</term></varlistentry>
<listitem><para>evaluate monitor data  </para></listitem>
<varlistentry><term><anchor id="todo_1_todo000029"/>Member <ref refid="classorg_1_1jgap_1_1audit_1_1_evaluator_1a68331d6b5db79708b87b72d5077a0e5e" kindref="member">org.jgap.audit.Evaluator.calcAvgFitnessImpr</ref>  (int a_permutation)</term></varlistentry>
<listitem><para>implement </para><para>implement </para><para>is this method used resp. contained in calcPerformance?  </para></listitem>
<varlistentry><term><anchor id="todo_1_todo000028"/>Member <ref refid="classorg_1_1jgap_1_1audit_1_1_evaluator_1a7a2bf7a73556818006b153c300212453" kindref="member">org.jgap.audit.Evaluator.CVS_REVISION</ref>  </term></varlistentry>
<listitem><para>implement: overall score calculation (out of best/avg. fitness value etc.)  </para></listitem>
<varlistentry><term><anchor id="todo_1_todo000032"/>Member <ref refid="classorg_1_1jgap_1_1audit_1_1_evaluator_1a48f84bb9929cec12795c98bf1185ac68" kindref="member">org.jgap.audit.Evaluator.storePopulation</ref>  (int a_permutation, int a_run, Population a_pop)</term></varlistentry>
<listitem><para>implement  </para></listitem>
<varlistentry><term><anchor id="todo_1_todo000033"/>Member <ref refid="classorg_1_1jgap_1_1audit_1_1_evolution_evaluator_1a411341e5eb1abbec8e0995d8fb49727a" kindref="member">org.jgap.audit.EvolutionEvaluator.evaluate</ref>  ()</term></varlistentry>
<listitem><para>use chromIDs and chromTrack </para><para></para></listitem>
<varlistentry><term><anchor id="todo_1_todo000035"/>Member <ref refid="classorg_1_1jgap_1_1audit_1_1_permuting_configuration_1a541cb4586f480c4991369f04753a2be8" kindref="member">org.jgap.audit.PermutingConfiguration.next</ref>  ()</term></varlistentry>
<listitem><para>make permutation below computed dynamic and not static </para><para>introduce new parameters: populationSize, setPreservFittestIndividual, MAX_ALLOWED_EVOLUTIONS </para><para>allow for &quot;false&quot; </para><para>BulkFitnessOffsetRemover vs. FitnessFunction  </para></listitem>
<varlistentry><term><anchor id="todo_1_todo000039"/>Member <ref refid="classorg_1_1jgap_1_1_base_chromosome_1a30276dc8afb0bd632c288bf7d2e18b55" kindref="member">org.jgap.BaseChromosome.setValueFromPersistentRepresentation</ref>  (String a_representation)</term></varlistentry>
<listitem><para>we can do this faster! </para><para>we can do this faster!  </para></listitem>
<varlistentry><term><anchor id="todo_1_todo000041"/>Member <ref refid="classorg_1_1jgap_1_1_base_gene_1a40f8f3d249145ad028892cd706ba9dae" kindref="member">org.jgap.BaseGene.newGene</ref>  ()</term></varlistentry>
<listitem><para>clone app.data  </para></listitem>
<varlistentry><term><anchor id="todo_1_todo000184"/>Member <ref refid="classorg_1_1jgap_1_1_base_gene_test_1a8e859f6d03d8eb3ce5dfe926d11eed92" kindref="member">org.jgap.BaseGeneTest.testEquals_3</ref>  ()</term></varlistentry>
<listitem><para>use other than JGAPFactory to be able to receive a null CompareToHandler for the application data object  </para></listitem>
<varlistentry><term><anchor id="todo_1_todo000185"/>Member <ref refid="classorg_1_1jgap_1_1_base_gene_test_1a00bdb1c53bcf6d47c9ad16fec5a52de3" kindref="member">org.jgap.BaseGeneTest.testSetApplicationData_1</ref>  ()</term></varlistentry>
<listitem><para>find the one chromosome  </para></listitem>
<varlistentry><term><anchor id="todo_1_todo000186"/>Member <ref refid="classorg_1_1jgap_1_1_base_gene_test_1ab2cd872d724507f006962aecc05830f6" kindref="member">org.jgap.BaseGeneTest.testSetApplicationData_2</ref>  ()</term></varlistentry>
<listitem><para>find the one chromosome  </para></listitem>
<varlistentry><term><anchor id="todo_1_todo000043"/>Member <ref refid="classorg_1_1jgap_1_1_base_genetic_operator_1a4db6fa1a99177114c0f19f02cd4a87ec" kindref="member">org.jgap.BaseGeneticOperator.equals</ref>  (final Object a_other)</term></varlistentry>
<listitem><para>also compare Configuration?  </para></listitem>
<varlistentry><term><anchor id="todo_1_todo000042"/>Member <ref refid="classorg_1_1jgap_1_1_base_genetic_operator_1addbc6b98f572331d47397227b7a49f6a" kindref="member">org.jgap.BaseGeneticOperator.getConfiguration</ref>  ()</term></varlistentry>
<listitem><para>make returned object immutable  </para></listitem>
<varlistentry><term><anchor id="todo_1_todo000046"/>Member <ref refid="classorg_1_1jgap_1_1_breeder_base_1ac2baa98b33eb5a909ffddc874598c1d2" kindref="member">org.jgap.BreederBase.applyGeneticOperators</ref>  (Configuration a_config, Population a_pop)</term></varlistentry>
<listitem><para>utilize jobs: integrate job into GeneticOperator  </para></listitem>
<varlistentry><term><anchor id="todo_1_todo000044"/>Member <ref refid="classorg_1_1jgap_1_1_breeder_base_1a3d2ad9ec1c90d78a5598a4dec1400960" kindref="member">org.jgap.BreederBase.applyNaturalSelectors</ref>  (Configuration a_config, Population a_pop, boolean a_processBeforeGeneticOperators)</term></varlistentry>
<listitem><para>optionally use working pool </para><para>utilize jobs: integrate job into NaturalSelector!  </para></listitem>
<varlistentry><term><anchor id="todo_1_todo000047"/>Member <ref refid="classorg_1_1jgap_1_1_cached_fitness_function_1ab281e35d33336f473dcc8a252ebcc932" kindref="member">org.jgap.CachedFitnessFunction.CVS_REVISION</ref>  </term></varlistentry>
<listitem><para>allow to restrict size of cache / age of entries  </para></listitem>
<varlistentry><term><anchor id="todo_1_todo000049"/>Member <ref refid="classorg_1_1jgap_1_1_chromosome_1a9f590d55a34d8b99c2a9a1b4aedd568b" kindref="member">org.jgap.Chromosome.clone</ref>  ()</term></varlistentry>
<listitem><para>once output a warning: allele should be cloneable!  </para></listitem>
<varlistentry><term><anchor id="todo_1_todo000052"/>Member <ref refid="classorg_1_1jgap_1_1_chromosome_1a2be0507944e2ca98bef8372402b33e13" kindref="member">org.jgap.Chromosome.compareTo</ref>  (Object other)</term></varlistentry>
<listitem><para>improve  </para></listitem>
<varlistentry><term><anchor id="todo_1_todo000048"/>Member <ref refid="classorg_1_1jgap_1_1_chromosome_1a6d73c5e40fce0219e80021211d4a2d57" kindref="member">org.jgap.Chromosome.m_multiObjective</ref>  </term></varlistentry>
<listitem><para>move to new subclass of Chromosome (and introduce new interface IMultiObjective with that)  </para></listitem>
<varlistentry><term><anchor id="todo_1_todo000050"/>Member <ref refid="classorg_1_1jgap_1_1_chromosome_1a6b6fb5c7c5b532813a4661de5dbd9ab3" kindref="member">org.jgap.Chromosome.randomInitialChromosome</ref>  (Configuration a_configuration)</term></varlistentry>
<listitem><para>what about Gene&apos;s energy? </para><para>what about Gene&apos;s energy?  </para></listitem>
<varlistentry><term><anchor id="todo_1_todo000053"/>Member <ref refid="classorg_1_1jgap_1_1_configuration_1a453c6b764b4f017c058632bc22e5a915" kindref="member">org.jgap.Configuration.doClone</ref>  (Object a_objToClone)</term></varlistentry>
<listitem><para>try cloning in a standard way  </para></listitem>
<varlistentry><term><anchor id="todo_1_todo000054"/>Member <ref refid="classorg_1_1jgap_1_1data_1_1_data_tree_builder_1a6a849e086eb4968ee222f54c88fde434" kindref="member">org.jgap.data.DataTreeBuilder.CVS_REVISION</ref>  </term></varlistentry>
<listitem><para>implement representGPGenotype..  </para></listitem>
<varlistentry><term><anchor id="todo_1_todo000055"/>Member <ref refid="classorg_1_1jgap_1_1data_1_1_document_builder_base_1a4a15b7fd875043a3c021b54766f9a8ca" kindref="member">org.jgap.data.DocumentBuilderBase.CVS_REVISION</ref>  </term></varlistentry>
<listitem><para>add new class DocumentCreatorBase that reads in data written by DocumentBuilderBase  </para></listitem>
<varlistentry><term><anchor id="todo_1_todo000060"/>Member <ref refid="classorg_1_1jgap_1_1distr_1_1_breeder_1ab3ff454f082f23bb5885ea8e0aa2ed89" kindref="member">org.jgap.distr.Breeder.informParent</ref>  ()</term></varlistentry>
<listitem><para>implement  </para></listitem>
<varlistentry><term><anchor id="todo_1_todo000057"/>Member <ref refid="classorg_1_1jgap_1_1distr_1_1_breeder_1a86129a6e573ed2ca9961931713250483" kindref="member">org.jgap.distr.Breeder.m_genotype</ref>  </term></varlistentry>
<listitem><para>use  </para></listitem>
<varlistentry><term><anchor id="todo_1_todo000058"/>Member <ref refid="classorg_1_1jgap_1_1distr_1_1_breeder_1a7ed056f076614c9e220460f107259c5a" kindref="member">org.jgap.distr.Breeder.m_populationMerger</ref>  </term></varlistentry>
<listitem><para>construct somewhere  </para></listitem>
<varlistentry><term><anchor id="todo_1_todo000059"/>Member <ref refid="classorg_1_1jgap_1_1distr_1_1_breeder_1a91831c9376bf49003f0f162f1a75f8f2" kindref="member">org.jgap.distr.Breeder.m_running</ref>  </term></varlistentry>
<listitem><para>use  </para></listitem>
<varlistentry><term><anchor id="todo_1_todo000056"/>Member <ref refid="classorg_1_1jgap_1_1distr_1_1_breeder_1a336a3b9df78c37790c4742f7c4eeb456" kindref="member">org.jgap.distr.Breeder.m_workers</ref>  </term></varlistentry>
<listitem><para>use  </para></listitem>
<varlistentry><term><anchor id="todo_1_todo000061"/>Member <ref refid="classorg_1_1jgap_1_1distr_1_1_breeder_1ad371c6cce93099457783ac1fe6da74ca" kindref="member">org.jgap.distr.Breeder.stop</ref>  ()</term></varlistentry>
<listitem><para>implement  </para></listitem>
<varlistentry><term><anchor id="todo_1_todo000064"/>Member <ref refid="classorg_1_1jgap_1_1distr_1_1grid_1_1_dummy_grid_client_mediator_1a7212ea568d78375a552bc599e62e4648" kindref="member">org.jgap.distr.grid.DummyGridClientMediator.getGridMessage</ref>  (MessageContext a_context, String a_datetime, int a_timeoutSeconds, int a_waitTimeSeconds, boolean a_removeRequest)</term></varlistentry>
<listitem><para>fallback solution  </para></listitem>
<varlistentry><term><anchor id="todo_1_todo000063"/>Member <ref refid="classorg_1_1jgap_1_1distr_1_1grid_1_1_dummy_grid_client_mediator_1a080ac41bf4278214c07055ebcc9060f8" kindref="member">org.jgap.distr.grid.DummyGridClientMediator.startClient</ref>  ()</term></varlistentry>
<listitem><para>allow asynchronous wait for server (check for &quot;java.net.ConnectException: Connection refused: connect&quot;)  </para></listitem>
<varlistentry><term><anchor id="todo_1_todo000065"/>Member <ref refid="interfaceorg_1_1jgap_1_1distr_1_1grid_1_1gp_1_1_i_grid_configuration_g_p_1aa7705e8e26bdc18c2c0e5b69e8ac818a" kindref="member">org.jgap.distr.grid.gp.IGridConfigurationGP.setTypes</ref>  (Class[] a_types)</term></varlistentry>
<listitem><para>move the following to GPConfiguration, elegantly  </para></listitem>
<varlistentry><term><anchor id="todo_1_todo000066"/>Member <ref refid="classorg_1_1jgap_1_1distr_1_1grid_1_1gp_1_1_j_g_a_p_client_g_p_1aeaec2e84d46f7ddc2285335acb069a31" kindref="member">org.jgap.distr.grid.gp.JGAPClientGP.CVS_REVISION</ref>  </term></varlistentry>
<listitem><para>in dateiname requester/worker kodieren </para><para>auch schlechtere ergebnisse einmixen: die direkt empfangenen gleich wieder in einen request reinstecken <ndash/>&gt; aber mischen verschiedener results in einen request! </para><para>small, medium, large work requests </para><para>re-evaluate each result on behalf of another worker: keep separate lookup-table for all requests <ndash/>&gt; m_resultsVerified, m_resultsPersister </para><para>remove old requests from online store automatically </para><para>info when work request has been taken </para><para>info when worker logs on <ndash/>&gt; evaluate logon files </para><para>top results in eigener datei speichern, komprimierung durch weglassen überfl. infos, siehe xml <ndash/>&gt; injection after reload </para><para>copy good results to online folder  </para></listitem>
<varlistentry><term><anchor id="todo_1_todo000077"/>Member <ref refid="classorg_1_1jgap_1_1distr_1_1grid_1_1gp_1_1_j_g_a_p_client_g_p_1acfb2127d50b79830207941705b3f268a" kindref="member">org.jgap.distr.grid.gp.JGAPClientGP.JGAPClientGP</ref>  (IGridClientMediator a_gcmed, GridNodeClientConfig a_gridconfig, String a_clientClassName, boolean a_WANMode, boolean a_receiveOnly, boolean a_list, boolean a_no_comm, boolean a_no_evolution, boolean a_endless, int a_max_fetch_results)</term></varlistentry>
<listitem><para>ab 2. zyklus ist pop.grösse nur 1 !  </para></listitem>
<varlistentry><term><anchor id="todo_1_todo000075"/>Member <ref refid="classorg_1_1jgap_1_1distr_1_1grid_1_1gp_1_1_j_g_a_p_client_g_p_1a0535356c14866325a1f7df6faa19db92" kindref="member">org.jgap.distr.grid.gp.JGAPClientGP.MODULE_CS</ref>  </term></varlistentry>
<listitem><para>store version in external file  </para></listitem>
<varlistentry><term><anchor id="todo_1_todo000076"/>Member <ref refid="classorg_1_1jgap_1_1distr_1_1grid_1_1gp_1_1_j_g_a_p_client_g_p_1a6424bb7eb2e4963a50cba03b8e28d241" kindref="member">org.jgap.distr.grid.gp.JGAPClientGP.MODULE_SC</ref>  </term></varlistentry>
<listitem><para>das ist nicht module, sondern sender-receiver  </para></listitem>
<varlistentry><term><anchor id="todo_1_todo000093"/>Member <ref refid="classorg_1_1jgap_1_1distr_1_1grid_1_1gp_1_1_j_g_a_p_client_g_p_1adf5018d320d27b924e0f16a2ac48fea9" kindref="member">org.jgap.distr.grid.gp.JGAPClientGP.presetPopulation</ref>  (JGAPRequestGP a_workRequest)</term></varlistentry>
<listitem><para>remove results[index]  </para></listitem>
<varlistentry><term><anchor id="todo_1_todo000085"/>Member <ref refid="classorg_1_1jgap_1_1distr_1_1grid_1_1gp_1_1_j_g_a_p_client_g_p_1a67409d14f440abb96b91e1aeb99bd860" kindref="member">org.jgap.distr.grid.gp.JGAPClientGP.receiveWorkResult</ref>  (Object a_result, IClientFeedbackGP feedback, boolean a_remove)</term></varlistentry>
<listitem><para>later: SC  </para></listitem>
<varlistentry><term><anchor id="todo_1_todo000086"/>Member <ref refid="classorg_1_1jgap_1_1distr_1_1grid_1_1gp_1_1_j_g_a_p_client_g_p_1a497f3e3cad175f2d5991ad1b5da02663" kindref="member">org.jgap.distr.grid.gp.JGAPClientGP.receiveWorkResult</ref>  (JGAPRequestGP[] workList, IClientFeedbackGP feedback)</term></varlistentry>
<listitem><para>make this asynchronous with fall-back and reconnect! </para><para>later: SC  </para></listitem>
<varlistentry><term><anchor id="todo_1_todo000080"/>Member <ref refid="classorg_1_1jgap_1_1distr_1_1grid_1_1gp_1_1_j_g_a_p_client_g_p_1a7a6ca719b3c2154e9f85d3d09228e523" kindref="member">org.jgap.distr.grid.gp.JGAPClientGP.receiveWorkResults</ref>  (JGAPRequestGP[] workList)</term></varlistentry>
<listitem><para>later: SC </para><para>sort results according to post date, the oldest first </para><para>config.params wie popsite, evol.anz dazu </para><para>allow fitness 0.0 </para><para>do this here explicitely and not in receiveWorkResult  </para></listitem>
<varlistentry><term><anchor id="todo_1_todo000088"/>Member <ref refid="classorg_1_1jgap_1_1distr_1_1grid_1_1gp_1_1_j_g_a_p_client_g_p_1a4151e753398914b0d1d945464fa62e2d" kindref="member">org.jgap.distr.grid.gp.JGAPClientGP.resultReceived</ref>  (IGPProgram a_fittest)</term></varlistentry>
<listitem><para>jeden Worker einer von n (rein logischen) Gruppen zuteilen. Pro logischer Gruppe top n Ergebnisse halten </para><para>make configurable </para><para>compare with toStringNorm(0), use remove(int) instead of remove(Object) </para><para>ist nur test! </para><para>skip unnecessary data, inject it after reload  </para></listitem>
<varlistentry><term><anchor id="todo_1_todo000078"/>Member <ref refid="classorg_1_1jgap_1_1distr_1_1grid_1_1gp_1_1_j_g_a_p_client_g_p_1a256acdc898522793fa73e386b9cbf4e9" kindref="member">org.jgap.distr.grid.gp.JGAPClientGP.sendWorkRequests</ref>  (int a_evolutionIndex, IClientEvolveStrategyGP evolver, IRequestSplitStrategyGP splitter, IClientFeedbackGP feedback)</term></varlistentry>
<listitem><para>merge previous results in req.getPopulation()  </para></listitem>
<varlistentry><term><anchor id="todo_1_todo000079"/>Member <ref refid="classorg_1_1jgap_1_1distr_1_1grid_1_1gp_1_1_j_g_a_p_client_g_p_1ada87d248b0be00887061959c808b5ff7" kindref="member">org.jgap.distr.grid.gp.JGAPClientGP.sendWorkRequests</ref>  (JGAPRequestGP[] a_workList)</term></varlistentry>
<listitem><para>hier ist fehler aufgetreten!  </para></listitem>
<varlistentry><term><anchor id="todo_1_todo000094"/>Member <ref refid="classorg_1_1jgap_1_1distr_1_1grid_1_1gp_1_1_j_g_a_p_worker_g_p_1a793842b038b3f6e753208dcc0d9f8d9f" kindref="member">org.jgap.distr.grid.gp.JGAPWorkerGP.CVS_REVISION</ref>  </term></varlistentry>
<listitem><para>resume previous work in case worker was stopped  </para></listitem>
<varlistentry><term><anchor id="todo_1_todo000095"/>Member <ref refid="classorg_1_1jgap_1_1distr_1_1grid_1_1gp_1_1_j_g_a_p_worker_g_p_1aa04fd0437862a49fe5fce45084c0590f" kindref="member">org.jgap.distr.grid.gp.JGAPWorkerGP.doWork</ref>  (WorkRequest work, String workDir)</term></varlistentry>
<listitem><para>set gridworkerfeedback in class GridWorker  </para></listitem>
<varlistentry><term><anchor id="todo_1_todo000096"/>Member <ref refid="classorg_1_1jgap_1_1distr_1_1grid_1_1gp_1_1_j_g_a_p_workers_g_p_1a45d28e995ace9be9709cf592c69d5b39" kindref="member">org.jgap.distr.grid.gp.JGAPWorkersGP.getNeededFiles</ref>  (GridNodeWorkerConfig a_config)</term></varlistentry>
<listitem><para>implement  </para></listitem>
<varlistentry><term><anchor id="todo_1_todo000098"/>Member <ref refid="classorg_1_1jgap_1_1distr_1_1grid_1_1_j_g_a_p_client_handler_thread_1a5513a2e631ddea023820d49fc322a781" kindref="member">org.jgap.distr.grid.JGAPClientHandlerThread.handleMsg</ref>  (GridMessage msg)</term></varlistentry>
<listitem><para>consider 4GB limit  </para></listitem>
<varlistentry><term><anchor id="todo_1_todo000099"/>Member <ref refid="classorg_1_1jgap_1_1distr_1_1grid_1_1_j_g_a_p_worker_1ae03c268f54333b88162959811590558d" kindref="member">org.jgap.distr.grid.JGAPWorker.doWork</ref>  (WorkRequest work, String workDir)</term></varlistentry>
<listitem><para>set gridworkerfeedback in class GridWorker  </para></listitem>
<varlistentry><term><anchor id="todo_1_todo000100"/>Member <ref refid="classorg_1_1jgap_1_1distr_1_1grid_1_1_j_g_a_p_workers_1a644cc69c70eb0ed5553eaa60e3dadbe7" kindref="member">org.jgap.distr.grid.JGAPWorkers.getNeededFiles</ref>  (GridNodeWorkerConfig a_config)</term></varlistentry>
<listitem><para></para></listitem>
<varlistentry><term><anchor id="todo_1_todo000101"/>Member <ref refid="classorg_1_1jgap_1_1distr_1_1grid_1_1_request_split_strategy_1afa4582eef1f6ae141ff15d706cf7ec68" kindref="member">org.jgap.distr.grid.RequestSplitStrategy.split</ref>  (JGAPRequest a_request)</term></varlistentry>
<listitem><para>support cloning of m_config  </para></listitem>
<varlistentry><term><anchor id="todo_1_todo000102"/>Member <ref refid="classorg_1_1jgap_1_1distr_1_1grid_1_1util_1_1_grid_kit_1a7ed064739e97dbc91ad4cd11ac736864" kindref="member">org.jgap.distr.grid.util.GridKit.isUpdateAvailable</ref>  (String BASE_URL, String a_moduleName, String currentVersion)</term></varlistentry>
<listitem><para>download a versions.txt file and obtain version per project  </para></listitem>
<varlistentry><term><anchor id="todo_1_todo000103"/>Member <ref refid="classorg_1_1jgap_1_1distr_1_1grid_1_1util_1_1_grid_kit_1a61d160ee177cb0b07e5e5fda371ad48f" kindref="member">org.jgap.distr.grid.util.GridKit.updateModule</ref>  (String a_filename, String a_workDir, String a_libDir)</term></varlistentry>
<listitem><para>write log: delete manually  </para></listitem>
<varlistentry><term><anchor id="todo_1_todo000104"/>Member <ref refid="classorg_1_1jgap_1_1distr_1_1grid_1_1util_1_1_grid_kit_1afa78889ffda168512995505a1ded1b3b" kindref="member">org.jgap.distr.grid.util.GridKit.updateModuleLibrary</ref>  (String BASE_URL, String a_moduleName, String a_libDir, String a_workDir)</term></varlistentry>
<listitem><para>zuordnung irgendwo abspeichern </para><para>zuordnung irgendwo abspeichern </para><para>zuordnung irgendwo abspeichern  </para></listitem>
<varlistentry><term><anchor id="todo_1_todo000107"/>Member <ref refid="classorg_1_1jgap_1_1distr_1_1grid_1_1wan_1_1_request_information_1ab29bbb5cde83ff185ae2122f9f9a0147" kindref="member">org.jgap.distr.grid.wan.RequestInformation.m_id</ref>  </term></varlistentry>
<listitem><para>worker gibt durch Datei an, dass er Request bearbeitet  </para></listitem>
<varlistentry><term><anchor id="todo_1_todo000109"/>Member <ref refid="classorg_1_1jgap_1_1distr_1_1_master_1aef7c64089218808c9b7f0893e31fffbe" kindref="member">org.jgap.distr.Master.sendToWorker</ref>  (final IWorker a_worker, final WorkerCommand a_command)</term></varlistentry>
<listitem><para>implement  </para></listitem>
<varlistentry><term><anchor id="todo_1_todo000108"/>Member <ref refid="classorg_1_1jgap_1_1distr_1_1_master_1aec0e9db5db3316ec9ee903c3892f5796" kindref="member">org.jgap.distr.Master.stop</ref>  ()</term></varlistentry>
<listitem><para>notify all workers to stop working??? No, better would be: next time master is available it can receive old results from workers. So, the workers need to store them for some time, until the master is able to receive the worker results.  </para></listitem>
<varlistentry><term><anchor id="todo_1_todo000113"/>Member <ref refid="classorg_1_1jgap_1_1distr_1_1_worker_1a405f281453fcdd0046a370a001af92ef" kindref="member">org.jgap.distr.Worker.getStatus</ref>  ()</term></varlistentry>
<listitem><para>implement: idle starting receiving task working sending result stopping stopped  </para></listitem>
<varlistentry><term><anchor id="todo_1_todo000114"/>Member <ref refid="classorg_1_1jgap_1_1distr_1_1_worker_1aea81d8531d56e4035cd94c5278e5c604" kindref="member">org.jgap.distr.Worker.pause</ref>  ()</term></varlistentry>
<listitem><para>implement: able to pause resp. in work?  </para></listitem>
<varlistentry><term><anchor id="todo_1_todo000116"/>Member <ref refid="classorg_1_1jgap_1_1distr_1_1_worker_1afc27690dd01d55455271aba6dc32b434" kindref="member">org.jgap.distr.Worker.resume</ref>  ()</term></varlistentry>
<listitem><para>implement: able to resum resp. paused?  </para></listitem>
<varlistentry><term><anchor id="todo_1_todo000111"/>Member <ref refid="classorg_1_1jgap_1_1distr_1_1_worker_1aee8f7803e2655bdfb3aceff9a3f92eb7" kindref="member">org.jgap.distr.Worker.sendCommand</ref>  (final WorkerCommand a_command)</term></varlistentry>
<listitem><para>this should be moved to a thread </para><para>implement: currently working? if yes, add to queue (if queue not full) if no: start work  </para></listitem>
<varlistentry><term><anchor id="todo_1_todo000115"/>Member <ref refid="classorg_1_1jgap_1_1distr_1_1_worker_1a7ecb6526e7b056129e7f4f8a584865de" kindref="member">org.jgap.distr.Worker.stop</ref>  ()</term></varlistentry>
<listitem><para>implement: able to stop resp. in work?  </para></listitem>
<varlistentry><term><anchor id="todo_1_todo000117"/>Member <ref refid="classorg_1_1jgap_1_1distr_1_1_worker_command_1a9b2e86e89542048dc457e6d0a7bd85bd" kindref="member">org.jgap.distr.WorkerCommand.execute</ref>  (final Object a_parameters)</term></varlistentry>
<listitem><para>implement  </para></listitem>
<varlistentry><term><anchor id="todo_1_todo000118"/>Member <ref refid="classorg_1_1jgap_1_1_genotype_1a6c14c3a36aa8e4291840f0b9c0facb35" kindref="member">org.jgap.Genotype.applyNaturalSelectors</ref>  (boolean a_processBeforeGeneticOperators)</term></varlistentry>
<listitem><para>optionally use working pool  </para></listitem>
<varlistentry><term><anchor id="todo_1_todo000119"/>Member <ref refid="classorg_1_1jgap_1_1_genotype_1af5e224c5b7c05dbe02b3324d5ec16f2a" kindref="member">org.jgap.Genotype.keepPopSizeConstant</ref>  (Population a_pop, int a_maxSize)</term></varlistentry>
<listitem><para>use StandardPostSelector instead?  </para></listitem>
<varlistentry><term><anchor id="todo_1_todo000120"/>Member <ref refid="classorg_1_1jgap_1_1_genotype_1aa2b0341edc420ad61e797508b8bf4dd5" kindref="member">org.jgap.Genotype.mergeResults</ref>  (IPopulationMerger a_merger, EvolveResult[] a_results)</term></varlistentry>
<listitem><para>use/enhance IPopulationMerger  </para></listitem>
<varlistentry><term><anchor id="todo_1_todo000187"/>Member <ref refid="classorg_1_1jgap_1_1_genotype_test_1aa0d1c56bf7ef0e020f3d979f784dc5d3" kindref="member">org.jgap.GenotypeTest.testIsSerializable_0</ref>  ()</term></varlistentry>
<listitem><para>following will be obsolete  </para></listitem>
<varlistentry><term><anchor id="todo_1_todo000121"/>Member <ref refid="classorg_1_1jgap_1_1gp_1_1_command_gene_1a7d5b399cad245a0276bd0b62c9e5a4a8" kindref="member">org.jgap.gp.CommandGene.compareTo</ref>  (Object a_other)</term></varlistentry>
<listitem><para>do it more precisely  </para></listitem>
<varlistentry><term><anchor id="todo_1_todo000122"/>Member <ref refid="classorg_1_1jgap_1_1gp_1_1_command_gene_1a161c170b4493de85203147a84ac13a3b" kindref="member">org.jgap.gp.CommandGene.setValueFromPersistentRepresentation</ref>  (final String a_representation)</term></varlistentry>
<listitem><para>finish  </para></listitem>
<varlistentry><term><anchor id="todo_1_todo000188"/>Member <ref refid="classorg_1_1jgap_1_1gp_1_1_command_gene_test_1a670aa7b5c2021f31a719ea32218d6671" kindref="member">org.jgap.gp.CommandGeneTest.testEquals_3</ref>  ()</term></varlistentry>
<listitem><para>use other than JGAPFactory to be able to receive a null CompareToHandler for the application data object  </para></listitem>
<varlistentry><term><anchor id="todo_1_todo000123"/>Member <ref refid="classorg_1_1jgap_1_1gp_1_1function_1_1_a_d_f_1a5e377b15d81ca7ceec156614480980d7" kindref="member">org.jgap.gp.function.ADF.isValid</ref>  (ProgramChromosome a_chrom)</term></varlistentry>
<listitem><para>enhance  </para></listitem>
<varlistentry><term><anchor id="todo_1_todo000124"/>Member <ref refid="enumorg_1_1jgap_1_1gp_1_1function_1_1_count_matrix_1_1_count_type_1a7ab04ee65255adb71c8f6a47b727b775" kindref="member">org.jgap.gp.function.CountMatrix.CountType.COLUMN</ref>  </term></varlistentry>
<listitem><para>count over whole matrix  </para></listitem>
<varlistentry><term><anchor id="todo_1_todo000125"/>Member <ref refid="classorg_1_1jgap_1_1gp_1_1function_1_1_exchange_memory_1a3e44871ecef23f1319115126c507492b" kindref="member">org.jgap.gp.function.ExchangeMemory.isAffectGlobalState</ref>  ()</term></varlistentry>
<listitem><para>subclass from new abstract class MemoryCommand?  </para></listitem>
<varlistentry><term><anchor id="todo_1_todo000126"/>Member <ref refid="classorg_1_1jgap_1_1gp_1_1function_1_1_for_x_loop_1ae448f21b7912eec72d496b62669993e6" kindref="member">org.jgap.gp.function.ForXLoop.execute_void</ref>  (ProgramChromosome c, int n, Object[] args)</term></varlistentry>
<listitem><para>only consider variables appearing before FORX in the program tree  </para></listitem>
<varlistentry><term><anchor id="todo_1_todo000127"/>Member <ref refid="classorg_1_1jgap_1_1gp_1_1function_1_1_if_1a3b36ce8fb25456894c4bb2d136bfc5ef" kindref="member">org.jgap.gp.function.If.execute_void</ref>  (ProgramChromosome c, int n, Object[] args)</term></varlistentry>
<listitem><para>add option for type of first child to constructor  </para></listitem>
<varlistentry><term><anchor id="todo_1_todo000128"/>Member <ref refid="classorg_1_1jgap_1_1gp_1_1function_1_1_if_dyn_1ac7b9aee1521e3c567cfb36655376faf6" kindref="member">org.jgap.gp.function.IfDyn.execute_void</ref>  (ProgramChromosome c, int n, Object[] args)</term></varlistentry>
<listitem><para>add option for type of first child to constructor  </para></listitem>
<varlistentry><term><anchor id="todo_1_todo000129"/>Member <ref refid="classorg_1_1jgap_1_1gp_1_1function_1_1_push_1a44b325b83a314c139630027e8664eb98" kindref="member">org.jgap.gp.function.Push.isAffectGlobalState</ref>  ()</term></varlistentry>
<listitem><para>use this information  </para></listitem>
<varlistentry><term><anchor id="todo_1_todo000130"/>Member <ref refid="classorg_1_1jgap_1_1gp_1_1function_1_1_push_1a6fc7b172011e49476bbf72e88f0512a6" kindref="member">org.jgap.gp.function.Push.isValid</ref>  (ProgramChromosome a_program)</term></varlistentry>
<listitem><para>consider n (execute_int...)  </para></listitem>
<varlistentry><term><anchor id="todo_1_todo000133"/>Member <ref refid="classorg_1_1jgap_1_1gp_1_1function_1_1_sub_program_1a9ef69a70d4ce63696a5825e6f1bbaae8" kindref="member">org.jgap.gp.function.SubProgram.applyMutation</ref>  ()</term></varlistentry>
<listitem><para>use dynamizeArity instead!  </para></listitem>
<varlistentry><term><anchor id="todo_1_todo000131"/>Member <ref refid="classorg_1_1jgap_1_1gp_1_1function_1_1_sub_program_1a310c68bd816320dab6cf5c797ef398dc" kindref="member">org.jgap.gp.function.SubProgram.execute_int</ref>  (ProgramChromosome c, int n, Object[] args)</term></varlistentry>
<listitem><para>evaluate m_types  </para></listitem>
<varlistentry><term><anchor id="todo_1_todo000132"/>Member <ref refid="classorg_1_1jgap_1_1gp_1_1function_1_1_sub_program_1a6d8e0b323c21b311572bde0fcb8ea3e3" kindref="member">org.jgap.gp.function.SubProgram.execute_void</ref>  (ProgramChromosome c, int n, Object[] args)</term></varlistentry>
<listitem><para>evaluate m_types  </para></listitem>
<varlistentry><term><anchor id="todo_1_todo000134"/>Member <ref refid="classorg_1_1jgap_1_1gp_1_1function_1_1_transfer_memory_1a3eb497c878c705b6a8006d87b5d1db70" kindref="member">org.jgap.gp.function.TransferMemory.isAffectGlobalState</ref>  ()</term></varlistentry>
<listitem><para>subclass from new abstract class MemoryCommand?  </para></listitem>
<varlistentry><term><anchor id="todo_1_todo000136"/>Member <ref refid="classorg_1_1jgap_1_1gp_1_1impl_1_1_branch_typing_cross_1af4ff7487c5e532031d260dce1b66d74b" kindref="member">org.jgap.gp.impl.BranchTypingCross.doCross</ref>  (ProgramChromosome a_c0, ProgramChromosome a_c1)</term></varlistentry>
<listitem><para>solve in general  </para></listitem>
<varlistentry><term><anchor id="todo_1_todo000135"/>Member <ref refid="classorg_1_1jgap_1_1gp_1_1impl_1_1_branch_typing_cross_1ac9c1c1bf7edeadd26dccbcdd9d33ffc3" kindref="member">org.jgap.gp.impl.BranchTypingCross.operate</ref>  (final IGPProgram a_i1, final IGPProgram a_i2)</term></varlistentry>
<listitem><para>try to ensure uniqueness for unique commands: after selecting first node, check if there is a unique node in the sub tree. If so, check if it appears in the sub tree of the second node.  </para></listitem>
<varlistentry><term><anchor id="todo_1_todo000137"/>Member <ref refid="classorg_1_1jgap_1_1gp_1_1impl_1_1_default_population_creator_1af6c38314bce32cc040b6beaa0160521f" kindref="member">org.jgap.gp.impl.DefaultPopulationCreator.initialize</ref>  (GPPopulation a_pop, Class[] a_types, Class[][] a_argTypes, CommandGene[][] a_nodeSets, int[] a_minDepths, int[] a_maxDepths, int a_maxNodes, boolean[] a_fullModeAllowed)</term></varlistentry>
<listitem><para>pass params (e.g. advanced yes/no for Robocode)  </para></listitem>
<varlistentry><term><anchor id="todo_1_todo000138"/>Member <ref refid="classorg_1_1jgap_1_1gp_1_1impl_1_1_fitness_proportionate_selection_1a1bba66dc3595d954f39bd4121bc1fa7f" kindref="member">org.jgap.gp.impl.FitnessProportionateSelection.select</ref>  (GPGenotype a_genotype)</term></varlistentry>
<listitem><para>implement for deltaMode  </para></listitem>
<varlistentry><term><anchor id="todo_1_todo000141"/>Member <ref refid="classorg_1_1jgap_1_1gp_1_1impl_1_1_g_p_configuration_1a919b59fd6a2dd43716d28f661ccaf924" kindref="member">org.jgap.gp.impl.GPConfiguration.getCrossoverProb</ref>  ()</term></varlistentry>
<listitem><para>implement something like that  </para></listitem>
<varlistentry><term><anchor id="todo_1_todo000140"/>Member <ref refid="classorg_1_1jgap_1_1gp_1_1impl_1_1_g_p_configuration_1a97498de731029f37e23ac9ff7bab3de2" kindref="member">org.jgap.gp.impl.GPConfiguration.init</ref>  (boolean a_fullInit)</term></varlistentry>
<listitem><para>make reusable in class Configuration and reuse here from Configuration  </para></listitem>
<varlistentry><term><anchor id="todo_1_todo000139"/>Member <ref refid="classorg_1_1jgap_1_1gp_1_1impl_1_1_g_p_configuration_1a620f23497a17109be4d8394cc1c541e1" kindref="member">org.jgap.gp.impl.GPConfiguration.m_objectiveFunction</ref>  </term></varlistentry>
<listitem><para>introduce lock for configuration  </para></listitem>
<varlistentry><term><anchor id="todo_1_todo000144"/>Member <ref refid="classorg_1_1jgap_1_1gp_1_1impl_1_1_g_p_genotype_1aa465c7cbfb45d77644b3d195782a12c9" kindref="member">org.jgap.gp.impl.GPGenotype.calcFitness</ref>  ()</term></varlistentry>
<listitem><para>get information from fitness function how calculation happened. In case of Robocode: return the robot competed against, in case the -enemies option was used without -battleAll </para><para>do something similar here as with Genotype.preserveFittestChromosome </para><para>introduce global value object to be passed to the listener </para><para>should not happen but does with ensureUniqueness(..)  </para></listitem>
<varlistentry><term><anchor id="todo_1_todo000152"/>Member <ref refid="classorg_1_1jgap_1_1gp_1_1impl_1_1_g_p_genotype_1aa3bf0b50a73684ff3fe1177017cf9bb8" kindref="member">org.jgap.gp.impl.GPGenotype.checkErroneousProg</ref>  (IGPProgram a_prog, String s, boolean a_clearFitness, boolean a_active)</term></varlistentry>
<listitem><para>impl. cache  </para></listitem>
<varlistentry><term><anchor id="todo_1_todo000148"/>Member <ref refid="classorg_1_1jgap_1_1gp_1_1impl_1_1_g_p_genotype_1ad495c700786596290a63e3d88a902766" kindref="member">org.jgap.gp.impl.GPGenotype.evolve</ref>  ()</term></varlistentry>
<listitem><para>use program creator in case such is registered and returns a non-null program </para><para>instead of re-using prototype, create a program anyway (ignoring the validator) in case it is the last try. Or even better: Make the validator return a defect rate!  </para></listitem>
<varlistentry><term><anchor id="todo_1_todo000150"/>Member <ref refid="classorg_1_1jgap_1_1gp_1_1impl_1_1_g_p_genotype_1a4327e7a69fcbcfe051e00e46c933ea7a" kindref="member">org.jgap.gp.impl.GPGenotype.fillPopulation</ref>  (final int a_num)</term></varlistentry>
<listitem><para>care about </para><para>implement filling up population  </para></listitem>
<varlistentry><term><anchor id="todo_1_todo000142"/>Member <ref refid="classorg_1_1jgap_1_1gp_1_1impl_1_1_g_p_genotype_1af3246cb6a802ae1cde833013c130f6e9" kindref="member">org.jgap.gp.impl.GPGenotype.randomInitialGenotype</ref>  (final GPConfiguration a_conf, Class[] a_types, Class[][] a_argTypes, CommandGene[][] a_nodeSets, int[] a_minDepths, int[] a_maxDepths, int a_maxNodes, boolean[] a_fullModeAllowed, boolean a_verboseOutput, IPopulationCreator a_popCreator)</term></varlistentry>
<listitem><para>remove unused nodes from configuration </para><para>optimize access to map  </para></listitem>
<varlistentry><term><anchor id="todo_1_todo000153"/>Member <ref refid="classorg_1_1jgap_1_1gp_1_1impl_1_1_g_p_genotype_1ad264330c888b133296578decc78f265e" kindref="member">org.jgap.gp.impl.GPGenotype.verifyDepthsForNodes</ref>  (GPPopulation a_pop, GPConfiguration a_conf, Class[] a_types, int[] a_minDepths, int[] a_maxDepths, int a_maxNodes, CommandGene[][] a_nodeSets)</term></varlistentry>
<listitem><para>impl </para><para>impl  </para></listitem>
<varlistentry><term><anchor id="todo_1_todo000155"/>Member <ref refid="classorg_1_1jgap_1_1gp_1_1impl_1_1_g_p_population_1a21670302d6d9c5ad4bdc2903797eabff" kindref="member">org.jgap.gp.impl.GPPopulation.create</ref>  (Class[] a_types, Class[][] a_argTypes, CommandGene[][] a_nodeSets, int[] a_minDepths, int[] a_maxDepths, int a_maxNodes, boolean[] a_fullModeAllowed, IProgramCreator a_programCreator, int a_offset)</term></varlistentry>
<listitem><para>add element of randomness </para><para>5: make configurable  </para></listitem>
<varlistentry><term><anchor id="todo_1_todo000189"/>Member <ref refid="classorg_1_1jgap_1_1gp_1_1impl_1_1_g_p_population_test_1aeeefdb7d33e4e7555cecc9591989b3e1" kindref="member">org.jgap.gp.impl.GPPopulationTest.testCreate_1</ref>  ()</term></varlistentry>
<listitem><para>adapt  </para></listitem>
<varlistentry><term><anchor id="todo_1_todo000190"/>Member <ref refid="classorg_1_1jgap_1_1gp_1_1impl_1_1_g_p_population_test_1a0c2d02f51697a84b44ea7a047a2f838e" kindref="member">org.jgap.gp.impl.GPPopulationTest.testCreate_2</ref>  ()</term></varlistentry>
<listitem><para>adapt  </para></listitem>
<varlistentry><term><anchor id="todo_1_todo000191"/>Member <ref refid="classorg_1_1jgap_1_1gp_1_1impl_1_1_g_p_population_test_1aa41a4305aac81ed18627fda12889df58" kindref="member">org.jgap.gp.impl.GPPopulationTest.testSetPrototype_0</ref>  ()</term></varlistentry>
<listitem><para>assert that prototype is only set automatically if none is preset  </para></listitem>
<varlistentry><term><anchor id="todo_1_todo000158"/>Member <ref refid="classorg_1_1jgap_1_1gp_1_1impl_1_1_program_chromosome_1ac9896e142c28c71711133698041fb72f" kindref="member">org.jgap.gp.impl.ProgramChromosome.compareTo</ref>  (Object a_other)</term></varlistentry>
<listitem><para>compare m_functionSet  </para></listitem>
<varlistentry><term><anchor id="todo_1_todo000157"/>Member <ref refid="classorg_1_1jgap_1_1gp_1_1impl_1_1_program_chromosome_1a1ca14815335297629dc3bd4812445405" kindref="member">org.jgap.gp.impl.ProgramChromosome.growOrFullNode</ref>  (int a_num, int a_depth, Class a_returnType, int a_subReturnType, CommandGene[] a_functionSet, CommandGene a_rootNode, int a_recurseLevel, boolean a_grow, int a_childNum, boolean a_validateNode)</term></varlistentry>
<listitem><para>we could optionally use the clone handler  </para></listitem>
<varlistentry><term><anchor id="todo_1_todo000159"/>Member <ref refid="classorg_1_1jgap_1_1gui_1_1_config_frame_1a0a1cbfde1ac15b4f66808b90de97e071" kindref="member">org.jgap.gui.ConfigFrame.setup</ref>  ()</term></varlistentry>
<listitem><para>find a better way to get the classname than getNS()  </para></listitem>
<varlistentry><term><anchor id="todo_1_todo000192"/>Member <ref refid="classorg_1_1jgap_1_1gui_1_1_config_writer_test_1a689d2d62adc54d0523e5c94ded843546" kindref="member">org.jgap.gui.ConfigWriterTest.testConfigData_0</ref>  ()</term></varlistentry>
<listitem><para>write to stream </para><para>read from stream  </para></listitem>
<varlistentry><term><anchor id="todo_1_todo000160"/>Member <ref refid="classorg_1_1jgap_1_1impl_1_1_bulk_fitness_offset_remover_1a6741e29abe529b43b2e61d3301a1ce3c" kindref="member">org.jgap.impl.BulkFitnessOffsetRemover.m_previousOffset</ref>  </term></varlistentry>
<listitem><para>This constructor is planned but not possible yet, as the Configuration permits bulk fitness function and simple fitness function both existing in it at the same time.  </para></listitem>
<varlistentry><term><anchor id="todo_1_todo000194"/>Member <ref refid="classorg_1_1jgap_1_1impl_1_1_cauchy_random_generator_test_1a157a2f8e2d9d45bfd8dc63fc63cc4867" kindref="member">org.jgap.impl.CauchyRandomGeneratorTest.testSerialize_0</ref>  ()</term></varlistentry>
<listitem><para>fix test as Java 5 uses java.util.concurrent.AtomicLong instead of sun.misc.AtomicLong  </para></listitem>
<varlistentry><term><anchor id="todo_1_todo000195"/>Member <ref refid="classorg_1_1jgap_1_1impl_1_1_chain_of_selectors_test_1a2a61fade1cbf2211a2339a2155191839" kindref="member">org.jgap.impl.ChainOfSelectorsTest.testEquals_0</ref>  ()</term></varlistentry>
<listitem><para>improve: 2 unsame selectors of same class with same params should make the chain equal!  </para></listitem>
<varlistentry><term><anchor id="todo_1_todo000161"/>Member <ref refid="classorg_1_1jgap_1_1impl_1_1_crossover_operator_1a13ba59ced7b3bfd8b7f9433756664726" kindref="member">org.jgap.impl.CrossoverOperator.compareTo</ref>  (final Object a_other)</term></varlistentry>
<listitem><para>consider Configuration  </para></listitem>
<varlistentry><term><anchor id="todo_1_todo000162"/>Member <ref refid="classorg_1_1jgap_1_1impl_1_1_double_gene_1a9b71158d4e12d38732f9b60bf2ba1949" kindref="member">org.jgap.impl.DoubleGene.setValueFromPersistentRepresentation</ref>  (String a_representation)</term></varlistentry>
<listitem><para>unify first part of method with IntegerGene  </para></listitem>
<varlistentry><term><anchor id="todo_1_todo000196"/>Member <ref refid="classorg_1_1jgap_1_1impl_1_1_double_gene_test_1a6e78c6ca74eb86d0d457a7c10c05c999" kindref="member">org.jgap.impl.DoubleGeneTest.testSetToRandomValue_2</ref>  ()</term></varlistentry>
<listitem><para>test needed any longer?  </para></listitem>
<varlistentry><term><anchor id="todo_1_todo000163"/>Member <ref refid="classorg_1_1jgap_1_1impl_1_1fitness_1_1_truth_table_fitness_function_1acd41df30587d5553bf61293c0e025051" kindref="member">org.jgap.impl.fitness.TruthTableFitnessFunction.calcFitness</ref>  (final Map a_actualInputOutput)</term></varlistentry>
<listitem><para>consider length of formula (i.e. number of terms, e.g.) for fitness calculation  </para></listitem>
<varlistentry><term><anchor id="todo_1_todo000164"/>Member <ref refid="classorg_1_1jgap_1_1impl_1_1_fittest_population_merger_1ae0bd6e67df9b565c419733478078e384" kindref="member">org.jgap.impl.FittestPopulationMerger.mergePopulations</ref>  (final Population a_population1, final Population a_population2, final int a_new_population_size)</term></varlistentry>
<listitem><para>check if configurations of both pops are equal resp. their fitness evaluators!  </para></listitem>
<varlistentry><term><anchor id="todo_1_todo000197"/>Member <ref refid="classorg_1_1jgap_1_1impl_1_1_fixed_binary_gene_test_1a7664b9a8cb84c4a3cc420ef9aef5b81b" kindref="member">org.jgap.impl.FixedBinaryGeneTest.testHashCode_0</ref>  ()</term></varlistentry>
<listitem><para>implement checks for uniqueness  </para></listitem>
<varlistentry><term><anchor id="todo_1_todo000167"/>Member <ref refid="classorg_1_1jgap_1_1impl_1_1_g_a_breeder_1ae2fbd377bce110b40fd5f1190f172b7e" kindref="member">org.jgap.impl.GABreeder.bulkFunctionEvaluation</ref>  (Configuration a_conf, BulkFitnessFunction a_bulkFunction, Population a_pop, boolean a_monitorActive)</term></varlistentry>
<listitem><para>utilize jobs: bulk fitness function is not so important for a prototype!  </para></listitem>
<varlistentry><term><anchor id="todo_1_todo000165"/>Member <ref refid="classorg_1_1jgap_1_1impl_1_1_g_a_breeder_1a2714ceb0e7ce43593588c15dd0c7463e" kindref="member">org.jgap.impl.GABreeder.evolve</ref>  (Population a_pop, Configuration a_conf)</term></varlistentry>
<listitem><para>utilize jobs. In pop do also utilize jobs, especially for fitness computation  </para></listitem>
<varlistentry><term><anchor id="todo_1_todo000166"/>Member <ref refid="classorg_1_1jgap_1_1impl_1_1_g_a_breeder_1a636378341fa111d7301b473f973b5fe0" kindref="member">org.jgap.impl.GABreeder.fillPopulationRandomlyToOriginalSize</ref>  (Configuration a_conf, Population pop)</term></varlistentry>
<listitem><para>utilize jobs as initialization may be time-consuming as invalid combinations may have to be filtered out  </para></listitem>
<varlistentry><term><anchor id="todo_1_todo000199"/>Member <ref refid="classorg_1_1jgap_1_1impl_1_1_gaussian_random_generator_test_1ace1d14a1c8b90112d955db90b5e22eb8" kindref="member">org.jgap.impl.GaussianRandomGeneratorTest.testGetGaussianStdDeviation_0</ref>  ()</term></varlistentry>
<listitem><para>finish  </para></listitem>
<varlistentry><term><anchor id="todo_1_todo000200"/>Member <ref refid="classorg_1_1jgap_1_1impl_1_1_gaussian_random_generator_test_1a340a0b166f5094800a2e10b63e258bec" kindref="member">org.jgap.impl.GaussianRandomGeneratorTest.testSerialize_0</ref>  ()</term></varlistentry>
<listitem><para>fix test as Java 5 uses java.util.concurrent.AtomicLong instead of sun.misc.AtomicLong  </para></listitem>
<varlistentry><term><anchor id="todo_1_todo000201"/>Member <ref refid="classorg_1_1jgap_1_1impl_1_1_gaussian_random_generator_test_1a9710b02b268a1019979c45a065789341" kindref="member">org.jgap.impl.GaussianRandomGeneratorTest.testSerialize_1</ref>  ()</term></varlistentry>
<listitem><para>fix test as Java 5 uses java.util.concurrent.AtomicLong instead of sun.misc.AtomicLong  </para></listitem>
<varlistentry><term><anchor id="todo_1_todo000168"/>Member <ref refid="classorg_1_1jgap_1_1impl_1_1_j_g_a_p_factory_1a131e58c62f763615b3e47555a30a5fea" kindref="member">org.jgap.impl.JGAPFactory.clone</ref>  ()</term></varlistentry>
<listitem><para>check if it works this way  </para></listitem>
<varlistentry><term><anchor id="todo_1_todo000171"/>Member <ref refid="classorg_1_1jgap_1_1impl_1_1job_1_1_evolve_job_1a39f8a447fa201c74de218cd06ca0c5bb" kindref="member">org.jgap.impl.job.EvolveJob.applyGeneticOperators</ref>  (Configuration a_config, Population a_pop)</term></varlistentry>
<listitem><para>utilize jobs: integrate job into GeneticOperator  </para></listitem>
<varlistentry><term><anchor id="todo_1_todo000169"/>Member <ref refid="classorg_1_1jgap_1_1impl_1_1job_1_1_evolve_job_1a128b696a7adc919ae743ad7980b59927" kindref="member">org.jgap.impl.job.EvolveJob.applyNaturalSelectors</ref>  (Configuration a_config, Population a_pop, boolean a_processBeforeGeneticOperators)</term></varlistentry>
<listitem><para>optionally use working pool </para><para>utilize jobs: integrate job into NaturalSelector!  </para></listitem>
<varlistentry><term><anchor id="todo_1_todo000172"/>Member <ref refid="classorg_1_1jgap_1_1impl_1_1job_1_1_job_base_1a4395288c6b1143da26fc7edb5d2bc792" kindref="member">org.jgap.impl.job.JobBase.run</ref>  ()</term></varlistentry>
<listitem><para>what to do here?  </para></listitem>
<varlistentry><term><anchor id="todo_1_todo000202"/>Member <ref refid="classorg_1_1jgap_1_1impl_1_1_map_gene_test_1a7c02a53a8930dc6240785629c6c340d7" kindref="member">org.jgap.impl.MapGeneTest.testSetToRandomValue_0</ref>  ()</term></varlistentry>
<listitem><para>add test for applyMutation  </para></listitem>
<varlistentry><term><anchor id="todo_1_todo000173"/>Member <ref refid="classorg_1_1jgap_1_1impl_1_1_mutation_operator_1a4a1c852770559bba4ffa3e9718f4a0d8" kindref="member">org.jgap.impl.MutationOperator.operate</ref>  (final Population a_population, final List a_candidateChromosomes)</term></varlistentry>
<listitem><para>move to base class, refactor  </para></listitem>
<varlistentry><term><anchor id="todo_1_todo000203"/>Member <ref refid="classorg_1_1jgap_1_1impl_1_1_set_gene_test_1a41e2d57a098dcfc8358e50f7117efbcf" kindref="member">org.jgap.impl.SetGeneTest.testApplyMutation_3</ref>  ()</term></varlistentry>
<listitem><para>from here on: adapt tests to SetGene  </para></listitem>
<varlistentry><term><anchor id="todo_1_todo000204"/>Member <ref refid="classorg_1_1jgap_1_1impl_1_1_swapping_mutation_operator_test_1a92fbca72f89b7df34a3bb3d2047f10ee" kindref="member">org.jgap.impl.SwappingMutationOperatorTest.testOperate_1</ref>  ()</term></varlistentry>
<listitem><para>assert result is correct  </para></listitem>
<varlistentry><term><anchor id="todo_1_todo000174"/>Member <ref refid="classorg_1_1jgap_1_1impl_1_1_threshold_selector_1a0503b950969a0c79b42963391ca131f5" kindref="member">org.jgap.impl.ThresholdSelector.selectChromosomes</ref>  (final int a_howManyToSelect, Population a_to_pop)</term></varlistentry>
<listitem><para>replace this step by adding newly to create chromosomes  </para></listitem>
<varlistentry><term><anchor id="todo_1_todo000175"/>Member <ref refid="classorg_1_1jgap_1_1impl_1_1_two_way_mutation_operator_1a53ac73cd4e6b197e6756d4efe02bd01e" kindref="member">org.jgap.impl.TwoWayMutationOperator.operate</ref>  (final Population a_population, final List a_candidateChromosomes)</term></varlistentry>
<listitem><para>make this configurable, it is a first test, see example DynamicMutationExample </para><para>move to base class, refactor  </para></listitem>
<varlistentry><term><anchor id="todo_1_todo000206"/>Member <ref refid="classorg_1_1jgap_1_1_j_g_a_p_test_case_1a3ccc244fd7637efacc27641a3b4bac99" kindref="member">org.jgap.JGAPTestCase.assertEqualsMap</ref>  (Map a_map1, Map a_map2)</term></varlistentry>
<listitem><para>implement  </para></listitem>
<varlistentry><term><anchor id="todo_1_todo000177"/>Member <ref refid="classorg_1_1jgap_1_1_population_1a7dd9dbd2fecb4e2c4841787fd78ea64c" kindref="member">org.jgap.Population.keepPopSizeConstant</ref>  ()</term></varlistentry>
<listitem><para>use dedicated selector for that  </para></listitem>
<varlistentry><term><anchor id="todo_1_todo000178"/>Member <ref refid="classorg_1_1jgap_1_1supergenes_1_1_abstract_supergene_1a9f06a4d966c9e615b2ea5bff4583a183" kindref="member">org.jgap.supergenes.AbstractSupergene.markImmutable</ref>  (final int a_index)</term></varlistentry>
<listitem><para>: Implement protection against overgrowing of this data block.  </para></listitem>
<varlistentry><term><anchor id="todo_1_todo000207"/>Member <ref refid="classorg_1_1jgap_1_1supergenes_1_1_supergene_persistent_representation_test_1a6cae74832bb9a8131bed212047974f89" kindref="member">org.jgap.supergenes.SupergenePersistentRepresentationTest.testReset_0</ref>  ()</term></varlistentry>
<listitem><para>care that m_immutable is filled  </para></listitem>
<varlistentry><term><anchor id="todo_1_todo000179"/>Member <ref refid="classorg_1_1jgap_1_1util_1_1_class_kit_1a2eb98cd025d7bb9755a162b9392fa5d6" kindref="member">org.jgap.util.ClassKit.find</ref>  (final String a_tosubclassname)</term></varlistentry>
<listitem><para>take care of abstract classes <ndash/>&gt; introduce parameter for that  </para></listitem>
<varlistentry><term><anchor id="todo_1_todo000180"/>Member <ref refid="classorg_1_1jgap_1_1util_1_1_class_kit_1ab3cdf47ea2ab88910b62eb16425585b2" kindref="member">org.jgap.util.ClassKit.getPlugins</ref>  (final String a_directory)</term></varlistentry>
<listitem><para>add input param: type (or list of types) to look for </para><para>check if class assignable from given type  </para></listitem>
<varlistentry><term><anchor id="todo_1_todo000183"/>Member <ref refid="classorg_1_1jgap_1_1util_1_1_file_kit_1af68540ad9faa606310ee8952ca57d894" kindref="member">org.jgap.util.FileKit.getFilename</ref>  (String name_and_path, String fileseparator)</term></varlistentry>
<listitem><para>possibly use File.getName() instead?  </para></listitem>
<varlistentry><term><anchor id="todo_1_todo000209"/>Member <ref refid="classorg_1_1jgap_1_1util_1_1_number_kit_test_1a1b68aa7e58cef0016f48dc2208b4db38" kindref="member">org.jgap.util.NumberKitTest.testNiceDecimalNumber_0</ref>  ()</term></varlistentry>
<listitem><para>this is not an optimal result  </para></listitem>
<varlistentry><term><anchor id="todo_1_todo000210"/>Member <ref refid="classorg_1_1jgap_1_1util_1_1_plugin_discoverer_test_1a7c18c34fa61eea040b9d90bb21d8ada5" kindref="member">org.jgap.util.PluginDiscovererTest.testConstruct_0</ref>  ()</term></varlistentry>
<listitem><para>implement </para></listitem>
</variablelist>
</para>    </detaileddescription>
  </compounddef>
</doxygen>
