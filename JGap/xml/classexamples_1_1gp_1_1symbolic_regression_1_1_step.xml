<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.5">
  <compounddef id="classexamples_1_1gp_1_1symbolic_regression_1_1_step" kind="class" prot="public">
    <compoundname>examples::gp::symbolicRegression::Step</compoundname>
    <basecompoundref prot="public" virt="non-virtual">MathCommand</basecompoundref>
    <basecompoundref prot="public" virt="non-virtual">ICloneable</basecompoundref>
    <innerclass refid="interfaceexamples_1_1gp_1_1symbolic_regression_1_1_step_1_1_compatible" prot="protected">examples::gp::symbolicRegression::Step::Compatible</innerclass>
      <sectiondef kind="private-static-attrib">
      <memberdef kind="variable" id="classexamples_1_1gp_1_1symbolic_regression_1_1_step_1ad7ba20d56408811914c460566b21ed76" prot="private" static="yes" mutable="no">
        <type>final String</type>
        <definition>final String examples.gp.symbolicRegression.Step.CVS_REVISION</definition>
        <argsstring></argsstring>
        <name>CVS_REVISION</name>
        <initializer>= &quot;$Revision: 1.1 $&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>String containing the CVS revision. Read out via reflection! </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/JulyaMaria/git/PruebaGit/JGap/LDH_Git/examples/src/examples/gp/symbolicRegression/Step.java" line="34" column="1" bodyfile="C:/Users/JulyaMaria/git/PruebaGit/JGap/LDH_Git/examples/src/examples/gp/symbolicRegression/Step.java" bodystart="34" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classexamples_1_1gp_1_1symbolic_regression_1_1_step_1a30f9d4632901b7a5aa952dad7a94150f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>examples.gp.symbolicRegression.Step.Step</definition>
        <argsstring>(final GPConfiguration a_conf, Class a_returnType)</argsstring>
        <name>Step</name>
        <param>
          <type>final <ref refid="classorg_1_1jgap_1_1gp_1_1impl_1_1_g_p_configuration" kindref="compound">GPConfiguration</ref></type>
          <declname>a_conf</declname>
        </param>
        <param>
          <type>Class</type>
          <declname>a_returnType</declname>
        </param>
        <exceptions> throws <ref refid="classorg_1_1jgap_1_1_invalid_configuration_exception" kindref="compound">InvalidConfigurationException</ref> </exceptions>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/JulyaMaria/git/PruebaGit/JGap/LDH_Git/examples/src/examples/gp/symbolicRegression/Step.java" line="36" column="1" bodyfile="C:/Users/JulyaMaria/git/PruebaGit/JGap/LDH_Git/examples/src/examples/gp/symbolicRegression/Step.java" bodystart="36" bodyend="39"/>
        <referencedby refid="classexamples_1_1gp_1_1symbolic_regression_1_1_step_1a850ca6bdda82a08d712fb21f288009e7" compoundref="_step_8java" startline="88" endline="95">examples.gp.symbolicRegression.Step.clone</referencedby>
      </memberdef>
      <memberdef kind="function" id="classexamples_1_1gp_1_1symbolic_regression_1_1_step_1a364eb64b3f23fb1984883d8ed02395c8" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>String</type>
        <definition>String examples.gp.symbolicRegression.Step.toString</definition>
        <argsstring>()</argsstring>
        <name>toString</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/JulyaMaria/git/PruebaGit/JGap/LDH_Git/examples/src/examples/gp/symbolicRegression/Step.java" line="41" column="1" bodyfile="C:/Users/JulyaMaria/git/PruebaGit/JGap/LDH_Git/examples/src/examples/gp/symbolicRegression/Step.java" bodystart="41" bodyend="43"/>
      </memberdef>
      <memberdef kind="function" id="classexamples_1_1gp_1_1symbolic_regression_1_1_step_1a05beb929058339dee7021386bae7dd47" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>String</type>
        <definition>String examples.gp.symbolicRegression.Step.getName</definition>
        <argsstring>()</argsstring>
        <name>getName</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>textual name of this command</para></simplesect>
<simplesect kind="author"><para>Hakan Kjellerstrand (based on Klaus Meffert&apos;s Log file) </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/JulyaMaria/git/PruebaGit/JGap/LDH_Git/examples/src/examples/gp/symbolicRegression/Step.java" line="50" column="1" bodyfile="C:/Users/JulyaMaria/git/PruebaGit/JGap/LDH_Git/examples/src/examples/gp/symbolicRegression/Step.java" bodystart="50" bodyend="52"/>
      </memberdef>
      <memberdef kind="function" id="classexamples_1_1gp_1_1symbolic_regression_1_1_step_1a9d9ef71f5f3c8b2708065a15e95eb7af" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>float</type>
        <definition>float examples.gp.symbolicRegression.Step.execute_float</definition>
        <argsstring>(ProgramChromosome c, int n, Object[] args)</argsstring>
        <name>execute_float</name>
        <param>
          <type>ProgramChromosome</type>
          <declname>c</declname>
        </param>
        <param>
          <type>int</type>
          <declname>n</declname>
        </param>
        <param>
          <type>Object[]</type>
          <declname>args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/JulyaMaria/git/PruebaGit/JGap/LDH_Git/examples/src/examples/gp/symbolicRegression/Step.java" line="54" column="1" bodyfile="C:/Users/JulyaMaria/git/PruebaGit/JGap/LDH_Git/examples/src/examples/gp/symbolicRegression/Step.java" bodystart="54" bodyend="62"/>
      </memberdef>
      <memberdef kind="function" id="classexamples_1_1gp_1_1symbolic_regression_1_1_step_1a3c0dcb147d1581787421e999cd2cc08d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>double</type>
        <definition>double examples.gp.symbolicRegression.Step.execute_double</definition>
        <argsstring>(ProgramChromosome c, int n, Object[] args)</argsstring>
        <name>execute_double</name>
        <param>
          <type>ProgramChromosome</type>
          <declname>c</declname>
        </param>
        <param>
          <type>int</type>
          <declname>n</declname>
        </param>
        <param>
          <type>Object[]</type>
          <declname>args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/JulyaMaria/git/PruebaGit/JGap/LDH_Git/examples/src/examples/gp/symbolicRegression/Step.java" line="64" column="1" bodyfile="C:/Users/JulyaMaria/git/PruebaGit/JGap/LDH_Git/examples/src/examples/gp/symbolicRegression/Step.java" bodystart="64" bodyend="72"/>
      </memberdef>
      <memberdef kind="function" id="classexamples_1_1gp_1_1symbolic_regression_1_1_step_1a5769d51754b777c7eacce09e5ab2b9d4" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>Object</type>
        <definition>Object examples.gp.symbolicRegression.Step.execute_object</definition>
        <argsstring>(ProgramChromosome c, int n, Object[] args)</argsstring>
        <name>execute_object</name>
        <param>
          <type>ProgramChromosome</type>
          <declname>c</declname>
        </param>
        <param>
          <type>int</type>
          <declname>n</declname>
        </param>
        <param>
          <type>Object[]</type>
          <declname>args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/JulyaMaria/git/PruebaGit/JGap/LDH_Git/examples/src/examples/gp/symbolicRegression/Step.java" line="74" column="1" bodyfile="C:/Users/JulyaMaria/git/PruebaGit/JGap/LDH_Git/examples/src/examples/gp/symbolicRegression/Step.java" bodystart="74" bodyend="76"/>
      </memberdef>
      <memberdef kind="function" id="classexamples_1_1gp_1_1symbolic_regression_1_1_step_1a850ca6bdda82a08d712fb21f288009e7" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>Object</type>
        <definition>Object examples.gp.symbolicRegression.Step.clone</definition>
        <argsstring>()</argsstring>
        <name>clone</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Clones the object. Simple and straight forward implementation here.</para><para><simplesect kind="return"><para>cloned instance of this object</para></simplesect>
<simplesect kind="author"><para>Hakan Kjellerstrand (based on Klaus Meffert&apos;s Log file) </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/JulyaMaria/git/PruebaGit/JGap/LDH_Git/examples/src/examples/gp/symbolicRegression/Step.java" line="88" column="1" bodyfile="C:/Users/JulyaMaria/git/PruebaGit/JGap/LDH_Git/examples/src/examples/gp/symbolicRegression/Step.java" bodystart="88" bodyend="95"/>
        <references refid="classexamples_1_1gp_1_1symbolic_regression_1_1_step_1a30f9d4632901b7a5aa952dad7a94150f" compoundref="_step_8java" startline="36" endline="39">examples.gp.symbolicRegression.Step.Step</references>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>Returns the natural logarithm (base e) of a double value.</para><para><simplesect kind="author"><para>Klaus Meffert </para></simplesect>
<simplesect kind="since"><para>3.5 </para></simplesect>
</para>    </detaileddescription>
    <inheritancegraph>
      <node id="17881">
        <label>MathCommand</label>
      </node>
      <node id="17882">
        <label>ICloneable</label>
      </node>
      <node id="17880">
        <label>examples.gp.symbolicRegression.Step</label>
        <link refid="classexamples_1_1gp_1_1symbolic_regression_1_1_step"/>
        <childnode refid="17881" relation="public-inheritance">
        </childnode>
        <childnode refid="17882" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="17884">
        <label>MathCommand</label>
      </node>
      <node id="17885">
        <label>ICloneable</label>
      </node>
      <node id="17883">
        <label>examples.gp.symbolicRegression.Step</label>
        <link refid="classexamples_1_1gp_1_1symbolic_regression_1_1_step"/>
        <childnode refid="17884" relation="public-inheritance">
        </childnode>
        <childnode refid="17885" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="C:/Users/JulyaMaria/git/PruebaGit/JGap/LDH_Git/examples/src/examples/gp/symbolicRegression/Step.java" line="32" column="1" bodyfile="C:/Users/JulyaMaria/git/PruebaGit/JGap/LDH_Git/examples/src/examples/gp/symbolicRegression/Step.java" bodystart="31" bodyend="96"/>
    <listofallmembers>
      <member refid="classexamples_1_1gp_1_1symbolic_regression_1_1_step_1a850ca6bdda82a08d712fb21f288009e7" prot="public" virt="non-virtual"><scope>examples::gp::symbolicRegression::Step</scope><name>clone</name></member>
      <member refid="classexamples_1_1gp_1_1symbolic_regression_1_1_step_1ad7ba20d56408811914c460566b21ed76" prot="private" virt="non-virtual"><scope>examples::gp::symbolicRegression::Step</scope><name>CVS_REVISION</name></member>
      <member refid="classexamples_1_1gp_1_1symbolic_regression_1_1_step_1a3c0dcb147d1581787421e999cd2cc08d" prot="public" virt="non-virtual"><scope>examples::gp::symbolicRegression::Step</scope><name>execute_double</name></member>
      <member refid="classexamples_1_1gp_1_1symbolic_regression_1_1_step_1a9d9ef71f5f3c8b2708065a15e95eb7af" prot="public" virt="non-virtual"><scope>examples::gp::symbolicRegression::Step</scope><name>execute_float</name></member>
      <member refid="classexamples_1_1gp_1_1symbolic_regression_1_1_step_1a5769d51754b777c7eacce09e5ab2b9d4" prot="public" virt="non-virtual"><scope>examples::gp::symbolicRegression::Step</scope><name>execute_object</name></member>
      <member refid="classexamples_1_1gp_1_1symbolic_regression_1_1_step_1a05beb929058339dee7021386bae7dd47" prot="public" virt="non-virtual"><scope>examples::gp::symbolicRegression::Step</scope><name>getName</name></member>
      <member refid="classexamples_1_1gp_1_1symbolic_regression_1_1_step_1a30f9d4632901b7a5aa952dad7a94150f" prot="public" virt="non-virtual"><scope>examples::gp::symbolicRegression::Step</scope><name>Step</name></member>
      <member refid="classexamples_1_1gp_1_1symbolic_regression_1_1_step_1a364eb64b3f23fb1984883d8ed02395c8" prot="public" virt="non-virtual"><scope>examples::gp::symbolicRegression::Step</scope><name>toString</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
