<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.5">
  <compounddef id="_symbolic_regression_8java" kind="file">
    <compoundname>SymbolicRegression.java</compoundname>
    <innerclass refid="classexamples_1_1gp_1_1symbolic_regression_1_1_symbolic_regression" prot="public">examples::gp::symbolicRegression::SymbolicRegression</innerclass>
    <innerclass refid="classexamples_1_1gp_1_1symbolic_regression_1_1_symbolic_regression_1_1_formula_fitness_function" prot="public">examples::gp::symbolicRegression::SymbolicRegression::FormulaFitnessFunction</innerclass>
    <innernamespace refid="namespaceexamples_1_1gp_1_1symbolic_regression">examples::gp::symbolicRegression</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/>This<sp/>file<sp/>is<sp/>part<sp/>of<sp/>JGAP.</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*<sp/>JGAP<sp/>offers<sp/>a<sp/>dual<sp/>license<sp/>model<sp/>containing<sp/>the<sp/>LGPL<sp/>as<sp/>well<sp/>as<sp/>the<sp/>MPL.</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*<sp/>For<sp/>licensing<sp/>information<sp/>please<sp/>see<sp/>the<sp/>file<sp/>license.txt<sp/>included<sp/>with<sp/>JGAP</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>*<sp/>or<sp/>have<sp/>a<sp/>look<sp/>at<sp/>the<sp/>top<sp/>of<sp/>class<sp/>org.jgap.Chromosome<sp/>which<sp/>representatively</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>*<sp/>includes<sp/>the<sp/>JGAP<sp/>license<sp/>policy<sp/>applicable<sp/>for<sp/>any<sp/>file<sp/>delivered<sp/>with<sp/>JGAP.</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="keyword">package<sp/></highlight><highlight class="normal">examples.gp.symbolicRegression;</highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>java.io.*;</highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>java.util.*;</highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>org.apache.log4j.*;</highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>org.jgap.*;</highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>org.jgap.gp.*;</highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>org.jgap.gp.function.*;</highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>org.jgap.gp.impl.*;</highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>org.jgap.gp.terminal.*;</highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>org.jgap.util.*;</highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="24"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="25"><highlight class="comment"><sp/>*<sp/>Symbolic<sp/>Regression<sp/>in<sp/>JGAP.</highlight></codeline>
<codeline lineno="26"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="27"><highlight class="comment"><sp/>*<sp/>This<sp/>program<sp/>is<sp/>based<sp/>on<sp/>the<sp/>JGAP<sp/>example<sp/>MathProblem.java<sp/>with</highlight></codeline>
<codeline lineno="28"><highlight class="comment"><sp/>*<sp/>some<sp/>generality.</highlight></codeline>
<codeline lineno="29"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="30"><highlight class="comment"><sp/>*<sp/>TODO:</highlight></codeline>
<codeline lineno="31"><highlight class="comment"><sp/>*<sp/><sp/>-<sp/>option<sp/>for<sp/>ignoring<sp/>specific<sp/>variables</highlight></codeline>
<codeline lineno="32"><highlight class="comment"><sp/>*<sp/><sp/>-<sp/>option<sp/>for<sp/>stopping:</highlight></codeline>
<codeline lineno="33"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/>-<sp/>running<sp/>forever</highlight></codeline>
<codeline lineno="34"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/>-<sp/>after<sp/>a<sp/>specific<sp/>time,</highlight></codeline>
<codeline lineno="35"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/>-<sp/>when<sp/>a<sp/>specific<sp/>fitness<sp/>value<sp/>is<sp/>reached</highlight></codeline>
<codeline lineno="36"><highlight class="comment"><sp/>*<sp/><sp/>-<sp/>calculate<sp/>the<sp/>number<sp/>of<sp/>data<sp/>rows<sp/>automatically<sp/>(i.e.<sp/>skip<sp/>num_row)</highlight></codeline>
<codeline lineno="37"><highlight class="comment"><sp/>*<sp/><sp/>-<sp/>show<sp/>similiar<sp/>solutions<sp/>(with<sp/>the<sp/>same<sp/>fitness<sp/>as<sp/>the<sp/>best)</highlight></codeline>
<codeline lineno="38"><highlight class="comment"><sp/>*<sp/><sp/>-<sp/>check<sp/>if<sp/>there<sp/>are<sp/>any<sp/>more<sp/>parameters<sp/>in<sp/>GPConfiguration<sp/>to<sp/>handle.</highlight></codeline>
<codeline lineno="39"><highlight class="comment"><sp/>*<sp/><sp/>-<sp/>accept<sp/>nominal<sp/>values<sp/>in<sp/>the<sp/>data<sp/>section;<sp/>then<sp/>converted<sp/>to</highlight></codeline>
<codeline lineno="40"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>numeric<sp/>values.</highlight></codeline>
<codeline lineno="41"><highlight class="comment"><sp/>*<sp/><sp/>-<sp/>add<sp/>fitness<sp/>metrics.</highlight></codeline>
<codeline lineno="42"><highlight class="comment"><sp/>*<sp/><sp/>-<sp/>punish<sp/>longer<sp/>solutions</highlight></codeline>
<codeline lineno="43"><highlight class="comment"><sp/>*<sp/><sp/>-<sp/>support<sp/>for<sp/>different<sp/>&quot;main&quot;<sp/>return<sp/>classes,<sp/>i.e.<sp/>not<sp/>just<sp/>DoubleClass</highlight></codeline>
<codeline lineno="44"><highlight class="comment"><sp/>*<sp/><sp/>-<sp/>correlation<sp/>coefficient,<sp/>and<sp/>other<sp/>statistical<sp/>measures,<sp/>e.g.</highlight></codeline>
<codeline lineno="45"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>R-squared,<sp/>mean<sp/>squared<sp/>error,<sp/>mean<sp/>absolut<sp/>error,<sp/>minimum<sp/>error,</highlight></codeline>
<codeline lineno="46"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>maximum<sp/>error</highlight></codeline>
<codeline lineno="47"><highlight class="comment"><sp/>*<sp/><sp/>-<sp/>more/better<sp/>error<sp/>checks</highlight></codeline>
<codeline lineno="48"><highlight class="comment"><sp/>*<sp/><sp/>-<sp/>more<sp/>building<sp/>blocks,<sp/>a<sp/>la<sp/>Eureqa<sp/>http://ccsl.mae.cornell.edu/eureqa_ops</highlight></codeline>
<codeline lineno="49"><highlight class="comment"><sp/>*<sp/><sp/>-<sp/>support<sp/>for<sp/>derivata<sp/>(a<sp/>la<sp/>Eureqa)?<sp/>This<sp/>may<sp/>be<sp/>hard...</highlight></codeline>
<codeline lineno="50"><highlight class="comment"><sp/>*<sp/><sp/>-<sp/>integrate<sp/>with<sp/>Weka?</highlight></codeline>
<codeline lineno="51"><highlight class="comment"><sp/>*<sp/><sp/>-<sp/>simplify<sp/>the<sp/>best<sp/>solution<sp/>with<sp/>a<sp/>CAS?</highlight></codeline>
<codeline lineno="52"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="53"><highlight class="comment"><sp/>*<sp/>This<sp/>program<sp/>was<sp/>written<sp/>by<sp/>Hakan<sp/>Kjellerstrand<sp/>(hakank@bonetmail.com)</highlight></codeline>
<codeline lineno="54"><highlight class="comment"><sp/>*<sp/>Also,<sp/>see<sp/>my<sp/>JGAP<sp/>page<sp/>http://www.hakank.org/jgap/</highlight></codeline>
<codeline lineno="55"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="56"><highlight class="comment"><sp/>*<sp/>@since<sp/>3.5</highlight></codeline>
<codeline lineno="57"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="58" refid="classexamples_1_1gp_1_1symbolic_regression_1_1_symbolic_regression" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classexamples_1_1gp_1_1symbolic_regression_1_1_symbolic_regression" kindref="compound">SymbolicRegression</ref></highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">extends</highlight><highlight class="normal"><sp/><ref refid="classorg_1_1jgap_1_1gp_1_1_g_p_problem" kindref="compound">GPProblem</ref><sp/>{</highlight></codeline>
<codeline lineno="60" refid="classexamples_1_1gp_1_1symbolic_regression_1_1_symbolic_regression_1ab88310d97fc6498dd4e71bf3508f73fd" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">transient</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>Logger<sp/><ref refid="classexamples_1_1gp_1_1symbolic_regression_1_1_symbolic_regression_1ab88310d97fc6498dd4e71bf3508f73fd" kindref="member">LOGGER</ref><sp/>=<sp/>Logger.getLogger(SymbolicRegression.class);</highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="63"><highlight class="comment"><sp/><sp/><sp/>*<sp/>public<sp/>variables<sp/>which<sp/>may<sp/>be<sp/>changed<sp/>by<sp/>configuration<sp/>file</highlight></codeline>
<codeline lineno="64"><highlight class="comment"><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="65"><highlight class="comment"><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>number<sp/>of<sp/>variables<sp/>to<sp/>use<sp/>(output<sp/>variable<sp/>is<sp/>excluded)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="68" refid="classexamples_1_1gp_1_1symbolic_regression_1_1_symbolic_regression_1ab647e4a7ac66ce0c543f7906d302f3e3" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="classexamples_1_1gp_1_1symbolic_regression_1_1_symbolic_regression_1ab647e4a7ac66ce0c543f7906d302f3e3" kindref="member">numInputVariables</ref>;</highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>variables<sp/>to<sp/>use<sp/>(of<sp/>size<sp/>numInputVariables)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="71" refid="classexamples_1_1gp_1_1symbolic_regression_1_1_symbolic_regression_1abaa9073c106411b861ea296c98bd3009" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="classorg_1_1jgap_1_1gp_1_1terminal_1_1_variable" kindref="compound">Variable</ref>[]<sp/><ref refid="classexamples_1_1gp_1_1symbolic_regression_1_1_symbolic_regression_1abaa9073c106411b861ea296c98bd3009" kindref="member">variables</ref>;</highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>variable<sp/>name</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="74" refid="classexamples_1_1gp_1_1symbolic_regression_1_1_symbolic_regression_1ac87f5f1e780bb2332e52011fe9d7539d" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>String[]<sp/><ref refid="classexamples_1_1gp_1_1symbolic_regression_1_1_symbolic_regression_1ac87f5f1e780bb2332e52011fe9d7539d" kindref="member">variableNames</ref>;</highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>index<sp/>of<sp/>the<sp/>output<sp/>variable</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="77" refid="classexamples_1_1gp_1_1symbolic_regression_1_1_symbolic_regression_1a41a52e03f6aaf7e0317f9f2fb14525b7" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>Integer<sp/><ref refid="classexamples_1_1gp_1_1symbolic_regression_1_1_symbolic_regression_1a41a52e03f6aaf7e0317f9f2fb14525b7" kindref="member">outputVariable</ref>;<sp/></highlight><highlight class="comment">//<sp/>default<sp/>last</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight></codeline>
<codeline lineno="79" refid="classexamples_1_1gp_1_1symbolic_regression_1_1_symbolic_regression_1a24561bfc8adbe85f6e6ce74fcd008602" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">[]<sp/><ref refid="classexamples_1_1gp_1_1symbolic_regression_1_1_symbolic_regression_1a24561bfc8adbe85f6e6ce74fcd008602" kindref="member">ignoreVariables</ref>;<sp/></highlight><highlight class="comment">//<sp/>TODO</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>constants</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="82" refid="classexamples_1_1gp_1_1symbolic_regression_1_1_symbolic_regression_1acb3e678854ed359a070db483c5b22cbf" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>ArrayList&lt;Double&gt;<sp/><ref refid="classexamples_1_1gp_1_1symbolic_regression_1_1_symbolic_regression_1acb3e678854ed359a070db483c5b22cbf" kindref="member">constants</ref><sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>ArrayList&lt;Double&gt;<sp/>();</highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>size<sp/>of<sp/>data</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="85" refid="classexamples_1_1gp_1_1symbolic_regression_1_1_symbolic_regression_1ad5f6a203c254715be21128b6f82ab673" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="classexamples_1_1gp_1_1symbolic_regression_1_1_symbolic_regression_1ad5f6a203c254715be21128b6f82ab673" kindref="member">numRows</ref>;</highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>data<sp/>(as<sp/>Double)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Note:<sp/>the<sp/>last<sp/>row<sp/>is<sp/>the<sp/>output<sp/>variable<sp/>per<sp/>default</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="89" refid="classexamples_1_1gp_1_1symbolic_regression_1_1_symbolic_regression_1aa588c62a94fe721a95da78977de37d62" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">protected</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>Double[][]<sp/><ref refid="classexamples_1_1gp_1_1symbolic_regression_1_1_symbolic_regression_1aa588c62a94fe721a95da78977de37d62" kindref="member">data</ref>;</highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>we<sp/>have<sp/>found<sp/>a<sp/>perfect<sp/>solution.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="92" refid="classexamples_1_1gp_1_1symbolic_regression_1_1_symbolic_regression_1a81b11950997f88aa0fdda2e938e67772" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">boolean</highlight><highlight class="normal"><sp/><ref refid="classexamples_1_1gp_1_1symbolic_regression_1_1_symbolic_regression_1a81b11950997f88aa0fdda2e938e67772" kindref="member">foundPerfect</ref><sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>standard<sp/>GP<sp/>parameters</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="95" refid="classexamples_1_1gp_1_1symbolic_regression_1_1_symbolic_regression_1ab349b6e3c7f332656dd27d97984bc7cc" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="classexamples_1_1gp_1_1symbolic_regression_1_1_symbolic_regression_1ab349b6e3c7f332656dd27d97984bc7cc" kindref="member">minInitDepth</ref><sp/>=<sp/>2;</highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight></codeline>
<codeline lineno="97" refid="classexamples_1_1gp_1_1symbolic_regression_1_1_symbolic_regression_1a41ce468f8d781e1b1105aa420f736f61" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="classexamples_1_1gp_1_1symbolic_regression_1_1_symbolic_regression_1a41ce468f8d781e1b1105aa420f736f61" kindref="member">maxInitDepth</ref><sp/>=<sp/>4;</highlight></codeline>
<codeline lineno="98"><highlight class="normal"></highlight></codeline>
<codeline lineno="99" refid="classexamples_1_1gp_1_1symbolic_regression_1_1_symbolic_regression_1af835d7ddd8022c27dd9ad767bf2e4acd" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="classexamples_1_1gp_1_1symbolic_regression_1_1_symbolic_regression_1af835d7ddd8022c27dd9ad767bf2e4acd" kindref="member">populationSize</ref><sp/>=<sp/>100;</highlight></codeline>
<codeline lineno="100"><highlight class="normal"></highlight></codeline>
<codeline lineno="101" refid="classexamples_1_1gp_1_1symbolic_regression_1_1_symbolic_regression_1a85924723eaa8ede23c6a48d5d3e950a6" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="classexamples_1_1gp_1_1symbolic_regression_1_1_symbolic_regression_1a85924723eaa8ede23c6a48d5d3e950a6" kindref="member">maxCrossoverDepth</ref><sp/>=<sp/>8;</highlight></codeline>
<codeline lineno="102"><highlight class="normal"></highlight></codeline>
<codeline lineno="103" refid="classexamples_1_1gp_1_1symbolic_regression_1_1_symbolic_regression_1a4f2c58d2d2a88ad848d4c8b8e673a990" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="classexamples_1_1gp_1_1symbolic_regression_1_1_symbolic_regression_1a4f2c58d2d2a88ad848d4c8b8e673a990" kindref="member">programCreationMaxTries</ref><sp/>=<sp/>5;</highlight></codeline>
<codeline lineno="104"><highlight class="normal"></highlight></codeline>
<codeline lineno="105" refid="classexamples_1_1gp_1_1symbolic_regression_1_1_symbolic_regression_1a24d9df44a21940898dc355631dbc2777" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="classexamples_1_1gp_1_1symbolic_regression_1_1_symbolic_regression_1a24d9df44a21940898dc355631dbc2777" kindref="member">numEvolutions</ref><sp/>=<sp/>1800;</highlight></codeline>
<codeline lineno="106"><highlight class="normal"></highlight></codeline>
<codeline lineno="107" refid="classexamples_1_1gp_1_1symbolic_regression_1_1_symbolic_regression_1a4c0556abaae9f920b5eb23f0963697e7" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">boolean</highlight><highlight class="normal"><sp/><ref refid="classexamples_1_1gp_1_1symbolic_regression_1_1_symbolic_regression_1a4c0556abaae9f920b5eb23f0963697e7" kindref="member">verboseOutput</ref><sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="108"><highlight class="normal"></highlight></codeline>
<codeline lineno="109" refid="classexamples_1_1gp_1_1symbolic_regression_1_1_symbolic_regression_1adc03c7a1f5cc422df01229c112571017" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="classexamples_1_1gp_1_1symbolic_regression_1_1_symbolic_regression_1adc03c7a1f5cc422df01229c112571017" kindref="member">maxNodes</ref><sp/>=<sp/>21;</highlight></codeline>
<codeline lineno="110"><highlight class="normal"></highlight></codeline>
<codeline lineno="111" refid="classexamples_1_1gp_1_1symbolic_regression_1_1_symbolic_regression_1a66d160306b4d02a0b5b48bade063980f" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="classexamples_1_1gp_1_1symbolic_regression_1_1_symbolic_regression_1a66d160306b4d02a0b5b48bade063980f" kindref="member">functionProb</ref><sp/>=<sp/>0.9d;</highlight></codeline>
<codeline lineno="112"><highlight class="normal"></highlight></codeline>
<codeline lineno="113" refid="classexamples_1_1gp_1_1symbolic_regression_1_1_symbolic_regression_1ab389bebc082ad688c17471ff85d2426d" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><ref refid="classexamples_1_1gp_1_1symbolic_regression_1_1_symbolic_regression_1ab389bebc082ad688c17471ff85d2426d" kindref="member">reproductionProb</ref><sp/>=<sp/>0.1f;<sp/></highlight><highlight class="comment">//<sp/>float</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="114"><highlight class="normal"></highlight></codeline>
<codeline lineno="115" refid="classexamples_1_1gp_1_1symbolic_regression_1_1_symbolic_regression_1a42b4986cf46bee051208305bd6d73267" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><ref refid="classexamples_1_1gp_1_1symbolic_regression_1_1_symbolic_regression_1a42b4986cf46bee051208305bd6d73267" kindref="member">mutationProb</ref><sp/>=<sp/>0.1f;<sp/></highlight><highlight class="comment">//<sp/>float</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="116"><highlight class="normal"></highlight></codeline>
<codeline lineno="117" refid="classexamples_1_1gp_1_1symbolic_regression_1_1_symbolic_regression_1ab361726a240d44fec8def17768d460b4" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="classexamples_1_1gp_1_1symbolic_regression_1_1_symbolic_regression_1ab361726a240d44fec8def17768d460b4" kindref="member">crossoverProb</ref><sp/>=<sp/>0.9d;</highlight></codeline>
<codeline lineno="118"><highlight class="normal"></highlight></codeline>
<codeline lineno="119" refid="classexamples_1_1gp_1_1symbolic_regression_1_1_symbolic_regression_1a4a47b26758c7a15c13051f3baa3afdc5" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><ref refid="classexamples_1_1gp_1_1symbolic_regression_1_1_symbolic_regression_1a4a47b26758c7a15c13051f3baa3afdc5" kindref="member">dynamizeArityProb</ref><sp/>=<sp/>0.08f;<sp/></highlight><highlight class="comment">//<sp/>float</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="120"><highlight class="normal"></highlight></codeline>
<codeline lineno="121" refid="classexamples_1_1gp_1_1symbolic_regression_1_1_symbolic_regression_1a0acb20632ed97be899eb5766a2fd7f51" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="classexamples_1_1gp_1_1symbolic_regression_1_1_symbolic_regression_1a0acb20632ed97be899eb5766a2fd7f51" kindref="member">newChromsPercent</ref><sp/>=<sp/>0.3d;</highlight></codeline>
<codeline lineno="122"><highlight class="normal"></highlight></codeline>
<codeline lineno="123" refid="classexamples_1_1gp_1_1symbolic_regression_1_1_symbolic_regression_1a916ced9e82e1dc1b31d3485d42cdf894" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="classexamples_1_1gp_1_1symbolic_regression_1_1_symbolic_regression_1a916ced9e82e1dc1b31d3485d42cdf894" kindref="member">tournamentSelectorSize</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="124"><highlight class="normal"></highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>lower/upper<sp/>ranges<sp/>for<sp/>the<sp/>Terminal</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="126" refid="classexamples_1_1gp_1_1symbolic_regression_1_1_symbolic_regression_1a879b8d1c8895ce4cd9bffa224c7005c3" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="classexamples_1_1gp_1_1symbolic_regression_1_1_symbolic_regression_1a879b8d1c8895ce4cd9bffa224c7005c3" kindref="member">lowerRange</ref><sp/>=<sp/>-10.0d;</highlight></codeline>
<codeline lineno="127"><highlight class="normal"></highlight></codeline>
<codeline lineno="128" refid="classexamples_1_1gp_1_1symbolic_regression_1_1_symbolic_regression_1ab2b461c410629ea6a5309d6f59ccf7b3" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="classexamples_1_1gp_1_1symbolic_regression_1_1_symbolic_regression_1ab2b461c410629ea6a5309d6f59ccf7b3" kindref="member">upperRange</ref><sp/>=<sp/>-10.0d;</highlight></codeline>
<codeline lineno="129"><highlight class="normal"></highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Should<sp/>the<sp/>terminal<sp/>be<sp/>a<sp/>wholenumber<sp/>or<sp/>not?</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="131" refid="classexamples_1_1gp_1_1symbolic_regression_1_1_symbolic_regression_1afae4503335c172014bb58d7adfd35d3f" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">boolean</highlight><highlight class="normal"><sp/><ref refid="classexamples_1_1gp_1_1symbolic_regression_1_1_symbolic_regression_1afae4503335c172014bb58d7adfd35d3f" kindref="member">terminalWholeNumbers</ref><sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="132"><highlight class="normal"></highlight></codeline>
<codeline lineno="133" refid="classexamples_1_1gp_1_1symbolic_regression_1_1_symbolic_regression_1a77c395337e561c5dc584da9a3e200fc0" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>String<sp/><ref refid="classexamples_1_1gp_1_1symbolic_regression_1_1_symbolic_regression_1a77c395337e561c5dc584da9a3e200fc0" kindref="member">returnType</ref><sp/>=<sp/></highlight><highlight class="stringliteral">&quot;DoubleClass&quot;</highlight><highlight class="normal">;<sp/></highlight><highlight class="comment">//<sp/>not<sp/>used<sp/>yet</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="134"><highlight class="normal"></highlight></codeline>
<codeline lineno="135" refid="classexamples_1_1gp_1_1symbolic_regression_1_1_symbolic_regression_1ad6b0a1e41c631b55e3a6ed93dd871ea6" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>String<sp/><ref refid="classexamples_1_1gp_1_1symbolic_regression_1_1_symbolic_regression_1ad6b0a1e41c631b55e3a6ed93dd871ea6" kindref="member">presentation</ref><sp/>=<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="136"><highlight class="normal"></highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Using<sp/>ADF</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="138" refid="classexamples_1_1gp_1_1symbolic_regression_1_1_symbolic_regression_1a6306199eec50bb60282902256b811e0c" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="classexamples_1_1gp_1_1symbolic_regression_1_1_symbolic_regression_1a6306199eec50bb60282902256b811e0c" kindref="member">adfArity</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="139"><highlight class="normal"></highlight></codeline>
<codeline lineno="140" refid="classexamples_1_1gp_1_1symbolic_regression_1_1_symbolic_regression_1a66848d80715e58f5287c6a1278c1debf" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>String<sp/><ref refid="classexamples_1_1gp_1_1symbolic_regression_1_1_symbolic_regression_1a66848d80715e58f5287c6a1278c1debf" kindref="member">adfType</ref><sp/>=<sp/></highlight><highlight class="stringliteral">&quot;double&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="141"><highlight class="normal"></highlight></codeline>
<codeline lineno="142" refid="classexamples_1_1gp_1_1symbolic_regression_1_1_symbolic_regression_1a445e765c5dbed4c15269f00f5c891f01" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">boolean</highlight><highlight class="normal"><sp/><ref refid="classexamples_1_1gp_1_1symbolic_regression_1_1_symbolic_regression_1a445e765c5dbed4c15269f00f5c891f01" kindref="member">useADF</ref><sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="143"><highlight class="normal"></highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>list<sp/>of<sp/>functions<sp/>(as<sp/>strings)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="145" refid="classexamples_1_1gp_1_1symbolic_regression_1_1_symbolic_regression_1a0b927896439021fdfefc038f4da13134" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>String[]<sp/><ref refid="classexamples_1_1gp_1_1symbolic_regression_1_1_symbolic_regression_1a0b927896439021fdfefc038f4da13134" kindref="member">functions</ref><sp/>=<sp/>{</highlight><highlight class="stringliteral">&quot;Multiply&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Divide&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Add&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Subtract&quot;</highlight><highlight class="normal">};</highlight></codeline>
<codeline lineno="146"><highlight class="normal"></highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>list<sp/>of<sp/>functions<sp/>for<sp/>ADF</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="148" refid="classexamples_1_1gp_1_1symbolic_regression_1_1_symbolic_regression_1a89be9b677272448c7fe4cc4d53e4570f" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>String[]<sp/><ref refid="classexamples_1_1gp_1_1symbolic_regression_1_1_symbolic_regression_1a89be9b677272448c7fe4cc4d53e4570f" kindref="member">adfFunctions</ref><sp/>=<sp/>{</highlight><highlight class="stringliteral">&quot;Multiply3&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Divide&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Add3&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Subtract&quot;</highlight><highlight class="normal">};</highlight></codeline>
<codeline lineno="150"><highlight class="normal"></highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Should<sp/>we<sp/>punish<sp/>length<sp/>of<sp/>solutions?</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Note:<sp/>Very<sp/>simplistic<sp/>version.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>public<sp/>static<sp/>boolean<sp/>punishLength<sp/>=<sp/>false;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="154"><highlight class="normal"></highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>the<sp/>values<sp/>are<sp/>too<sp/>small<sp/>we<sp/>may<sp/>want<sp/>to<sp/>scale</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>error</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="157" refid="classexamples_1_1gp_1_1symbolic_regression_1_1_symbolic_regression_1a2211f414599fe21341db16918a44edb6" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="classexamples_1_1gp_1_1symbolic_regression_1_1_symbolic_regression_1a2211f414599fe21341db16918a44edb6" kindref="member">scaleError</ref><sp/>=<sp/>-1.0d;</highlight></codeline>
<codeline lineno="158"><highlight class="normal"></highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>&quot;bumping&quot;<sp/>is<sp/>when<sp/>we<sp/>found<sp/>a<sp/>&quot;perfect<sp/>solution&quot;<sp/>and</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>want<sp/>to<sp/>see<sp/>more<sp/>&quot;perfect<sp/>solutions&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="161" refid="classexamples_1_1gp_1_1symbolic_regression_1_1_symbolic_regression_1aed2c9425ba0dee6ce09506ec67377b80" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">boolean</highlight><highlight class="normal"><sp/><ref refid="classexamples_1_1gp_1_1symbolic_regression_1_1_symbolic_regression_1aed2c9425ba0dee6ce09506ec67377b80" kindref="member">bumpPerfect</ref><sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="162"><highlight class="normal"></highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>limit<sp/>for<sp/>which<sp/>we<sp/>should<sp/>show<sp/>all<sp/>(different)<sp/>solutions</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="164" refid="classexamples_1_1gp_1_1symbolic_regression_1_1_symbolic_regression_1adaa96c1e44db3faf9afaf2f689bd3269" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>Double<sp/><ref refid="classexamples_1_1gp_1_1symbolic_regression_1_1_symbolic_regression_1adaa96c1e44db3faf9afaf2f689bd3269" kindref="member">bumpValue</ref><sp/>=<sp/>0.0000;</highlight></codeline>
<codeline lineno="165"><highlight class="normal"></highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>checks<sp/>for<sp/>already<sp/>shown<sp/>solution<sp/>when<sp/>bumping</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="167" refid="classexamples_1_1gp_1_1symbolic_regression_1_1_symbolic_regression_1ae642324f14a8d80a8856af126d3dbc91" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>HashMap&lt;String,<sp/>Integer&gt;<sp/><ref refid="classexamples_1_1gp_1_1symbolic_regression_1_1_symbolic_regression_1ae642324f14a8d80a8856af126d3dbc91" kindref="member">foundSolutions</ref><sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>HashMap&lt;String,</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Integer&gt;<sp/>();</highlight></codeline>
<codeline lineno="169"><highlight class="normal"></highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>timing</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="171" refid="classexamples_1_1gp_1_1symbolic_regression_1_1_symbolic_regression_1aaa3d1f6f6f8ef58b3ac3df7d9689246b" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><ref refid="classexamples_1_1gp_1_1symbolic_regression_1_1_symbolic_regression_1aaa3d1f6f6f8ef58b3ac3df7d9689246b" kindref="member">startTime</ref>;</highlight></codeline>
<codeline lineno="172"><highlight class="normal"></highlight></codeline>
<codeline lineno="173" refid="classexamples_1_1gp_1_1symbolic_regression_1_1_symbolic_regression_1a55a0a74996362e5641e0c0a2a237aa44" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><ref refid="classexamples_1_1gp_1_1symbolic_regression_1_1_symbolic_regression_1a55a0a74996362e5641e0c0a2a237aa44" kindref="member">endTime</ref>;</highlight></codeline>
<codeline lineno="174"><highlight class="normal"></highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>&gt;<sp/>0.0d<sp/>-&gt;<sp/>stop<sp/>if<sp/>the<sp/>fitness<sp/>is<sp/>below<sp/>or<sp/>equal</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>this<sp/>value.<sp/>TODO!</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="177" refid="classexamples_1_1gp_1_1symbolic_regression_1_1_symbolic_regression_1a88585957d820cb0d8606b8975d3da984" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="classexamples_1_1gp_1_1symbolic_regression_1_1_symbolic_regression_1a88585957d820cb0d8606b8975d3da984" kindref="member">stopCriteria</ref><sp/>=<sp/>-1.0d;</highlight></codeline>
<codeline lineno="178"><highlight class="normal"></highlight></codeline>
<codeline lineno="179" refid="classexamples_1_1gp_1_1symbolic_regression_1_1_symbolic_regression_1a3fe3b5aec221fd8f8e8a45d5d525367b" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">boolean</highlight><highlight class="normal"><sp/><ref refid="classexamples_1_1gp_1_1symbolic_regression_1_1_symbolic_regression_1a3fe3b5aec221fd8f8e8a45d5d525367b" kindref="member">showPopulation</ref><sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="180"><highlight class="normal"></highlight></codeline>
<codeline lineno="181" refid="classexamples_1_1gp_1_1symbolic_regression_1_1_symbolic_regression_1aff693574d91b44b50fcfbacbb8f6714a" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">boolean</highlight><highlight class="normal"><sp/><ref refid="classexamples_1_1gp_1_1symbolic_regression_1_1_symbolic_regression_1aff693574d91b44b50fcfbacbb8f6714a" kindref="member">showSimiliar</ref><sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="182"><highlight class="normal"></highlight></codeline>
<codeline lineno="183" refid="classexamples_1_1gp_1_1symbolic_regression_1_1_symbolic_regression_1a4d4973f5179f75803bbccd8728e5279d" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classexamples_1_1gp_1_1symbolic_regression_1_1_symbolic_regression_1a4d4973f5179f75803bbccd8728e5279d" kindref="member">SymbolicRegression</ref>(<ref refid="classorg_1_1jgap_1_1gp_1_1impl_1_1_g_p_configuration" kindref="compound">GPConfiguration</ref><sp/>a_conf)</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throws</highlight><highlight class="normal"><sp/><ref refid="classorg_1_1jgap_1_1_invalid_configuration_exception" kindref="compound">InvalidConfigurationException</ref><sp/>{</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/>super(a_conf);</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="187"><highlight class="normal"></highlight></codeline>
<codeline lineno="195" refid="classexamples_1_1gp_1_1symbolic_regression_1_1_symbolic_regression_1adcf4fa3ad36bc35add7988d718e98311" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classorg_1_1jgap_1_1gp_1_1impl_1_1_g_p_genotype" kindref="compound">GPGenotype</ref><sp/><ref refid="classexamples_1_1gp_1_1symbolic_regression_1_1_symbolic_regression_1adcf4fa3ad36bc35add7988d718e98311" kindref="member">create</ref>()</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>throws<sp/><ref refid="classorg_1_1jgap_1_1_invalid_configuration_exception" kindref="compound">InvalidConfigurationException</ref><sp/>{</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classorg_1_1jgap_1_1gp_1_1impl_1_1_g_p_configuration" kindref="compound">GPConfiguration</ref><sp/>conf<sp/>=<sp/><ref refid="classorg_1_1jgap_1_1gp_1_1_g_p_problem_1ab8fe980a790816ca78e05f3f01392b79" kindref="member">getGPConfiguration</ref>();</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>At<sp/>first,<sp/>we<sp/>define<sp/>the<sp/>return<sp/>type<sp/>of<sp/>the<sp/>GP<sp/>program.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Then,<sp/>we<sp/>define<sp/>the<sp/>arguments<sp/>of<sp/>the<sp/>GP<sp/>parts.<sp/>Normally,<sp/>only<sp/>for<sp/>ADF&apos;s</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>there<sp/>is<sp/>a<sp/>specification<sp/>here,<sp/>otherwise<sp/>it<sp/>is<sp/>empty<sp/>as<sp/>in<sp/>first<sp/>case.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>-----------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/>Class[]<sp/>types;</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/>Class[][]<sp/>argTypes;</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classexamples_1_1gp_1_1symbolic_regression_1_1_symbolic_regression_1a445e765c5dbed4c15269f00f5c891f01" kindref="member">useADF</ref>)<sp/>{</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&quot;boolean&quot;</highlight><highlight class="normal">.equals(<ref refid="classexamples_1_1gp_1_1symbolic_regression_1_1_symbolic_regression_1a66848d80715e58f5287c6a1278c1debf" kindref="member">adfType</ref>))<sp/>{</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>types<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>Class[]<sp/>{<ref refid="classorg_1_1jgap_1_1gp_1_1_command_gene_1a085d36818c24978468c002c57d982363" kindref="member">CommandGene.DoubleClass</ref>,<sp/>CommandGene.BooleanClass};</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&quot;integer&quot;</highlight><highlight class="normal">.equals(<ref refid="classexamples_1_1gp_1_1symbolic_regression_1_1_symbolic_regression_1a66848d80715e58f5287c6a1278c1debf" kindref="member">adfType</ref>))<sp/>{</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>types<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>Class[]<sp/>{<ref refid="classorg_1_1jgap_1_1gp_1_1_command_gene_1a085d36818c24978468c002c57d982363" kindref="member">CommandGene.DoubleClass</ref>,<sp/>CommandGene.IntegerClass};</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>types<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>Class[]<sp/>{<ref refid="classorg_1_1jgap_1_1gp_1_1_command_gene_1a085d36818c24978468c002c57d982363" kindref="member">CommandGene.DoubleClass</ref>,<sp/>CommandGene.DoubleClass};</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Class[]<sp/>adfs<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>Class[<ref refid="classexamples_1_1gp_1_1symbolic_regression_1_1_symbolic_regression_1a6306199eec50bb60282902256b811e0c" kindref="member">adfArity</ref>];</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/><ref refid="classexamples_1_1gp_1_1symbolic_regression_1_1_symbolic_regression_1a6306199eec50bb60282902256b811e0c" kindref="member">adfArity</ref>;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&quot;boolean&quot;</highlight><highlight class="normal">.equals(<ref refid="classexamples_1_1gp_1_1symbolic_regression_1_1_symbolic_regression_1a66848d80715e58f5287c6a1278c1debf" kindref="member">adfType</ref>))<sp/>{</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>adfs[i]<sp/>=<sp/><ref refid="classorg_1_1jgap_1_1gp_1_1_command_gene_1a5a4fe8e5d732bbd32363b683332808a7" kindref="member">CommandGene.BooleanClass</ref>;</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&quot;integer&quot;</highlight><highlight class="normal">.equals(<ref refid="classexamples_1_1gp_1_1symbolic_regression_1_1_symbolic_regression_1a66848d80715e58f5287c6a1278c1debf" kindref="member">adfType</ref>))<sp/>{</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>adfs[i]<sp/>=<sp/><ref refid="classorg_1_1jgap_1_1gp_1_1_command_gene_1a8e354d57c541097dab355e145b048b22" kindref="member">CommandGene.IntegerClass</ref>;</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>adfs[i]<sp/>=<sp/><ref refid="classorg_1_1jgap_1_1gp_1_1_command_gene_1a085d36818c24978468c002c57d982363" kindref="member">CommandGene.DoubleClass</ref>;</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>argTypes<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>Class[][]<sp/>{<sp/>{},<sp/>adfs};</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>types<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>Class[]<sp/>{CommandGene.DoubleClass};</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>argTypes<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>Class[][]<sp/>{<sp/>{}</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Configure<sp/>desired<sp/>minimum<sp/>number<sp/>of<sp/>nodes<sp/>per<sp/>sub<sp/>program.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Same<sp/>as<sp/>with<sp/>types:<sp/>First<sp/>entry<sp/>here<sp/>corresponds<sp/>with<sp/>first<sp/>entry<sp/>in</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>nodeSets.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Configure<sp/>desired<sp/>maximum<sp/>number<sp/>of<sp/>nodes<sp/>per<sp/>sub<sp/>program.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>First<sp/>entry<sp/>here<sp/>corresponds<sp/>with<sp/>first<sp/>entry<sp/>in<sp/>nodeSets.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>is<sp/>experimental!</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">[]<sp/>minDepths;</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">[]<sp/>maxDepths;</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classexamples_1_1gp_1_1symbolic_regression_1_1_symbolic_regression_1a445e765c5dbed4c15269f00f5c891f01" kindref="member">useADF</ref>)<sp/>{</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>minDepths<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">[]<sp/>{1,<sp/>1};</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>maxDepths<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">[]<sp/>{9,<sp/>9};</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>minDepths<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">[]<sp/>{1};</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>maxDepths<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">[]<sp/>{9};</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Next,<sp/>we<sp/>define<sp/>the<sp/>set<sp/>of<sp/>available<sp/>GP<sp/>commands<sp/>and<sp/>terminals<sp/>to<sp/>use.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Please<sp/>see<sp/>package<sp/>org.jgap.gp.function<sp/>and<sp/>org.jgap.gp.terminal</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>You<sp/>can<sp/>easily<sp/>add<sp/>commands<sp/>and<sp/>terminals<sp/>of<sp/>your<sp/>own.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>----------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classorg_1_1jgap_1_1gp_1_1_command_gene" kindref="compound">CommandGene</ref>[]<sp/>commands<sp/>=<sp/>makeCommands(conf,<sp/><ref refid="classexamples_1_1gp_1_1symbolic_regression_1_1_symbolic_regression_1a0b927896439021fdfefc038f4da13134" kindref="member">functions</ref>,<sp/><ref refid="classexamples_1_1gp_1_1symbolic_regression_1_1_symbolic_regression_1a879b8d1c8895ce4cd9bffa224c7005c3" kindref="member">lowerRange</ref>,</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classexamples_1_1gp_1_1symbolic_regression_1_1_symbolic_regression_1ab2b461c410629ea6a5309d6f59ccf7b3" kindref="member">upperRange</ref>,<sp/></highlight><highlight class="stringliteral">&quot;plain&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Create<sp/>the<sp/>node<sp/>sets</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>command_len<sp/>=<sp/>commands.length;</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classorg_1_1jgap_1_1gp_1_1_command_gene" kindref="compound">CommandGene</ref>[][]<sp/>nodeSets<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="classorg_1_1jgap_1_1gp_1_1_command_gene" kindref="compound">CommandGene</ref>[2][<ref refid="classexamples_1_1gp_1_1symbolic_regression_1_1_symbolic_regression_1ab647e4a7ac66ce0c543f7906d302f3e3" kindref="member">numInputVariables</ref><sp/>+</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>command_len];</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>variables:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>1)<sp/>in<sp/>the<sp/>nodeSets<sp/>matrix</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>2)<sp/>as<sp/>variables<sp/>(to<sp/>be<sp/>used<sp/>for<sp/>fitness<sp/>checking)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classexamples_1_1gp_1_1symbolic_regression_1_1_symbolic_regression_1abaa9073c106411b861ea296c98bd3009" kindref="member">variables</ref><sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="classorg_1_1jgap_1_1gp_1_1terminal_1_1_variable" kindref="compound">Variable</ref>[<ref refid="classexamples_1_1gp_1_1symbolic_regression_1_1_symbolic_regression_1ab647e4a7ac66ce0c543f7906d302f3e3" kindref="member">numInputVariables</ref>];</highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>variableIndex<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/><ref refid="classexamples_1_1gp_1_1symbolic_regression_1_1_symbolic_regression_1ab647e4a7ac66ce0c543f7906d302f3e3" kindref="member">numInputVariables</ref><sp/>+<sp/>1;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>String<sp/>variableName<sp/>=<sp/><ref refid="classexamples_1_1gp_1_1symbolic_regression_1_1_symbolic_regression_1ac87f5f1e780bb2332e52011fe9d7539d" kindref="member">variableNames</ref>[i];</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i<sp/>!=<sp/><ref refid="classexamples_1_1gp_1_1symbolic_regression_1_1_symbolic_regression_1a41a52e03f6aaf7e0317f9f2fb14525b7" kindref="member">outputVariable</ref>)<sp/>{</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classexamples_1_1gp_1_1symbolic_regression_1_1_symbolic_regression_1ac87f5f1e780bb2332e52011fe9d7539d" kindref="member">variableNames</ref><sp/>!=<sp/>null<sp/>&amp;&amp;<sp/><ref refid="classexamples_1_1gp_1_1symbolic_regression_1_1_symbolic_regression_1ac87f5f1e780bb2332e52011fe9d7539d" kindref="member">variableNames</ref>.length<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>variableName<sp/>=<sp/><ref refid="classexamples_1_1gp_1_1symbolic_regression_1_1_symbolic_regression_1ac87f5f1e780bb2332e52011fe9d7539d" kindref="member">variableNames</ref>[i];</highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classexamples_1_1gp_1_1symbolic_regression_1_1_symbolic_regression_1abaa9073c106411b861ea296c98bd3009" kindref="member">variables</ref>[variableIndex]<sp/>=<sp/>Variable.create(conf,<sp/>variableName,</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classorg_1_1jgap_1_1gp_1_1_command_gene_1a085d36818c24978468c002c57d982363" kindref="member">CommandGene.DoubleClass</ref>);</highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nodeSets[0][variableIndex]<sp/>=<sp/><ref refid="classexamples_1_1gp_1_1symbolic_regression_1_1_symbolic_regression_1abaa9073c106411b861ea296c98bd3009" kindref="member">variables</ref>[variableIndex];</highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>System.out.println(</highlight><highlight class="stringliteral">&quot;input<sp/>variable:<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/><ref refid="classexamples_1_1gp_1_1symbolic_regression_1_1_symbolic_regression_1abaa9073c106411b861ea296c98bd3009" kindref="member">variables</ref>[variableIndex]);</highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>variableIndex++;</highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>assign<sp/>the<sp/>functions/terminals</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>command_len;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>System.out.println(</highlight><highlight class="stringliteral">&quot;function1:<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>commands[i]);</highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>nodeSets[0][i<sp/>+<sp/><ref refid="classexamples_1_1gp_1_1symbolic_regression_1_1_symbolic_regression_1ab647e4a7ac66ce0c543f7906d302f3e3" kindref="member">numInputVariables</ref>]<sp/>=<sp/>commands[i];</highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>ADF<sp/>functions<sp/>in<sp/>the<sp/>second<sp/>array<sp/>in<sp/>nodeSets</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classexamples_1_1gp_1_1symbolic_regression_1_1_symbolic_regression_1a445e765c5dbed4c15269f00f5c891f01" kindref="member">useADF</ref>)<sp/>{</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classorg_1_1jgap_1_1gp_1_1_command_gene" kindref="compound">CommandGene</ref>[]<sp/>adfCommands<sp/>=<sp/>makeCommands(conf,<sp/><ref refid="classexamples_1_1gp_1_1symbolic_regression_1_1_symbolic_regression_1a89be9b677272448c7fe4cc4d53e4570f" kindref="member">adfFunctions</ref>,<sp/><ref refid="classexamples_1_1gp_1_1symbolic_regression_1_1_symbolic_regression_1a879b8d1c8895ce4cd9bffa224c7005c3" kindref="member">lowerRange</ref>,</highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classexamples_1_1gp_1_1symbolic_regression_1_1_symbolic_regression_1ab2b461c410629ea6a5309d6f59ccf7b3" kindref="member">upperRange</ref>,<sp/></highlight><highlight class="stringliteral">&quot;ADF&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>adfLength<sp/>=<sp/>adfCommands.length;</highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>nodeSets[1]<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="classorg_1_1jgap_1_1gp_1_1_command_gene" kindref="compound">CommandGene</ref>[adfLength];</highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>adfLength;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>System.out.println(</highlight><highlight class="stringliteral">&quot;function2:<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>adfCommands[i]);</highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nodeSets[1][i]<sp/>=<sp/>adfCommands[i];</highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>this<sp/>is<sp/>experimental.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">boolean</highlight><highlight class="normal">[]<sp/>full;</highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classexamples_1_1gp_1_1symbolic_regression_1_1_symbolic_regression_1a445e765c5dbed4c15269f00f5c891f01" kindref="member">useADF</ref>)<sp/>{</highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>full<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">boolean</highlight><highlight class="normal">[]<sp/>{</highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">};</highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>full<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">boolean</highlight><highlight class="normal">[]<sp/>{</highlight><highlight class="keyword">true</highlight><highlight class="normal">};</highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">boolean</highlight><highlight class="normal">[]<sp/>fullModeAllowed<sp/>=<sp/>full;</highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Create<sp/>genotype<sp/>with<sp/>initial<sp/>population.<sp/>Here,<sp/>we<sp/>use<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>declarations<sp/>made<sp/>above:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>----------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>GPGenotype.randomInitialGenotype(conf,<sp/>types,<sp/>argTypes,<sp/>nodeSets,</highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classexamples_1_1gp_1_1symbolic_regression_1_1_symbolic_regression_1adc03c7a1f5cc422df01229c112571017" kindref="member">maxNodes</ref>,<sp/><ref refid="classexamples_1_1gp_1_1symbolic_regression_1_1_symbolic_regression_1a4c0556abaae9f920b5eb23f0963697e7" kindref="member">verboseOutput</ref>);</highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>this<sp/>is<sp/>experimental</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>return<sp/>GPGenotype.randomInitialGenotype(conf,<sp/>types,<sp/>argTypes,<sp/>nodeSets,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>minDepths,maxDepths,<sp/>maxNodes,<sp/>fullModeAllowed,verboseOutput);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="314"><highlight class="normal"></highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="316"><highlight class="normal"></highlight></codeline>
<codeline lineno="317" refid="classexamples_1_1gp_1_1symbolic_regression_1_1_symbolic_regression_1af25800b8f3bf079af265efaa11b26fc9" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classexamples_1_1gp_1_1symbolic_regression_1_1_symbolic_regression_1af25800b8f3bf079af265efaa11b26fc9" kindref="member">readFile</ref>(String<sp/>file)<sp/>{</highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>BufferedReader<sp/>inr<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>BufferedReader(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>FileReader(file));</highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>String<sp/>str;</highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>lineCount<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">boolean</highlight><highlight class="normal"><sp/>gotData<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ArrayList&lt;Double[]&gt;<sp/>theData<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>ArrayList&lt;Double[]&gt;<sp/>();</highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>read<sp/>the<sp/>lines</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(<sp/>(str<sp/>=<sp/>inr.readLine())<sp/>!=<sp/>null)<sp/>{</highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lineCount++;</highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>str<sp/>=<sp/>str.trim();</highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>ignore<sp/>empty<sp/>lines<sp/>or<sp/>comments,<sp/>i.e.<sp/>lines<sp/>starting<sp/>with<sp/>either<sp/>#<sp/>or<sp/>%</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>----------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(str.startsWith(</highlight><highlight class="stringliteral">&quot;#&quot;</highlight><highlight class="normal">)<sp/>||<sp/>str.startsWith(</highlight><highlight class="stringliteral">&quot;%&quot;</highlight><highlight class="normal">)<sp/>||<sp/>str.length()<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&quot;data&quot;</highlight><highlight class="normal">.equals(str))<sp/>{</highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gotData<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(gotData)<sp/>{</highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Read<sp/>the<sp/>data<sp/>rows</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>String[]<sp/>dataRowStr<sp/>=<sp/>str.split(</highlight><highlight class="stringliteral">&quot;[\\s,]+&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>len<sp/>=<sp/>dataRowStr.length;</highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Double[]<sp/>dataRow<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>Double[len];</highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>len;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dataRow[i]<sp/>=<sp/>Double.parseDouble(dataRowStr[i]);</highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>theData.add(dataRow);</highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Check<sp/>for<sp/>parameters<sp/>on<sp/>the<sp/>form</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>parameter:<sp/>value(s)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(str.contains(</highlight><highlight class="stringliteral">&quot;:&quot;</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>String<sp/>row[]<sp/>=<sp/>str.split(</highlight><highlight class="stringliteral">&quot;:\\s*&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Now<sp/>check<sp/>each<sp/>parameter</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&quot;return_type&quot;</highlight><highlight class="normal">.equals(row[0]))<sp/>{</highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classexamples_1_1gp_1_1symbolic_regression_1_1_symbolic_regression_1a77c395337e561c5dc584da9a3e200fc0" kindref="member">returnType</ref><sp/>=<sp/>row[1];</highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&quot;presentation&quot;</highlight><highlight class="normal">.equals(row[0]))<sp/>{</highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classexamples_1_1gp_1_1symbolic_regression_1_1_symbolic_regression_1ad6b0a1e41c631b55e3a6ed93dd871ea6" kindref="member">presentation</ref><sp/>=<sp/>row[1];</highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&quot;num_input_variables&quot;</highlight><highlight class="normal">.equals(row[0]))<sp/>{</highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classexamples_1_1gp_1_1symbolic_regression_1_1_symbolic_regression_1ab647e4a7ac66ce0c543f7906d302f3e3" kindref="member">numInputVariables</ref><sp/>=<sp/>Integer.parseInt(row[1]);</highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&quot;num_rows&quot;</highlight><highlight class="normal">.equals(row[0]))<sp/>{</highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classexamples_1_1gp_1_1symbolic_regression_1_1_symbolic_regression_1ad5f6a203c254715be21128b6f82ab673" kindref="member">numRows</ref><sp/>=<sp/>Integer.parseInt(row[1]);</highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&quot;terminal_range&quot;</highlight><highlight class="normal">.equals(row[0]))<sp/>{</highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>String[]<sp/>ranges<sp/>=<sp/>row[1].split(</highlight><highlight class="stringliteral">&quot;\\s+&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classexamples_1_1gp_1_1symbolic_regression_1_1_symbolic_regression_1a879b8d1c8895ce4cd9bffa224c7005c3" kindref="member">lowerRange</ref><sp/>=<sp/>Double.parseDouble(ranges[0]);</highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classexamples_1_1gp_1_1symbolic_regression_1_1_symbolic_regression_1ab2b461c410629ea6a5309d6f59ccf7b3" kindref="member">upperRange</ref><sp/>=<sp/>Double.parseDouble(ranges[1]);</highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&quot;terminal_wholenumbers&quot;</highlight><highlight class="normal">.equals(row[0]))<sp/>{</highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classexamples_1_1gp_1_1symbolic_regression_1_1_symbolic_regression_1afae4503335c172014bb58d7adfd35d3f" kindref="member">terminalWholeNumbers</ref><sp/>=<sp/>Boolean.parseBoolean(row[1]);</highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&quot;max_init_depth&quot;</highlight><highlight class="normal">.equals(row[0]))<sp/>{</highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classexamples_1_1gp_1_1symbolic_regression_1_1_symbolic_regression_1a41ce468f8d781e1b1105aa420f736f61" kindref="member">maxInitDepth</ref><sp/>=<sp/>Integer.parseInt(row[1]);</highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&quot;min_init_depth&quot;</highlight><highlight class="normal">.equals(row[0]))<sp/>{</highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classexamples_1_1gp_1_1symbolic_regression_1_1_symbolic_regression_1ab349b6e3c7f332656dd27d97984bc7cc" kindref="member">minInitDepth</ref><sp/>=<sp/>Integer.parseInt(row[1]);</highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&quot;program_creation_max_tries&quot;</highlight><highlight class="normal">.equals(row[0]))<sp/>{</highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classexamples_1_1gp_1_1symbolic_regression_1_1_symbolic_regression_1a4f2c58d2d2a88ad848d4c8b8e673a990" kindref="member">programCreationMaxTries</ref><sp/>=<sp/>Integer.parseInt(row[1]);</highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&quot;population_size&quot;</highlight><highlight class="normal">.equals(row[0]))<sp/>{</highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classexamples_1_1gp_1_1symbolic_regression_1_1_symbolic_regression_1af835d7ddd8022c27dd9ad767bf2e4acd" kindref="member">populationSize</ref><sp/>=<sp/>Integer.parseInt(row[1]);</highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&quot;max_crossover_depth&quot;</highlight><highlight class="normal">.equals(row[0]))<sp/>{</highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classexamples_1_1gp_1_1symbolic_regression_1_1_symbolic_regression_1a85924723eaa8ede23c6a48d5d3e950a6" kindref="member">maxCrossoverDepth</ref><sp/>=<sp/>Integer.parseInt(row[1]);</highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&quot;function_prob&quot;</highlight><highlight class="normal">.equals(row[0]))<sp/>{</highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classexamples_1_1gp_1_1symbolic_regression_1_1_symbolic_regression_1a66d160306b4d02a0b5b48bade063980f" kindref="member">functionProb</ref><sp/>=<sp/>Double.parseDouble(row[1]);</highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&quot;reproduction_prob&quot;</highlight><highlight class="normal">.equals(row[0]))<sp/>{</highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classexamples_1_1gp_1_1symbolic_regression_1_1_symbolic_regression_1ab389bebc082ad688c17471ff85d2426d" kindref="member">reproductionProb</ref><sp/>=<sp/>Float.parseFloat(row[1]);</highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&quot;mutation_prob&quot;</highlight><highlight class="normal">.equals(row[0]))<sp/>{</highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classexamples_1_1gp_1_1symbolic_regression_1_1_symbolic_regression_1a42b4986cf46bee051208305bd6d73267" kindref="member">mutationProb</ref><sp/>=<sp/>Float.parseFloat(row[1]);</highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&quot;crossover_prob&quot;</highlight><highlight class="normal">.equals(row[0]))<sp/>{</highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classexamples_1_1gp_1_1symbolic_regression_1_1_symbolic_regression_1ab361726a240d44fec8def17768d460b4" kindref="member">crossoverProb</ref><sp/>=<sp/>Double.parseDouble(row[1]);</highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&quot;dynamize_arity_prob&quot;</highlight><highlight class="normal">.equals(row[0]))<sp/>{</highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classexamples_1_1gp_1_1symbolic_regression_1_1_symbolic_regression_1a4a47b26758c7a15c13051f3baa3afdc5" kindref="member">dynamizeArityProb</ref><sp/>=<sp/>Float.parseFloat(row[1]);</highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&quot;new_chroms_percent&quot;</highlight><highlight class="normal">.equals(row[0]))<sp/>{</highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classexamples_1_1gp_1_1symbolic_regression_1_1_symbolic_regression_1a0acb20632ed97be899eb5766a2fd7f51" kindref="member">newChromsPercent</ref><sp/>=<sp/>Double.parseDouble(row[1]);</highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&quot;num_evolutions&quot;</highlight><highlight class="normal">.equals(row[0]))<sp/>{</highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classexamples_1_1gp_1_1symbolic_regression_1_1_symbolic_regression_1a24d9df44a21940898dc355631dbc2777" kindref="member">numEvolutions</ref><sp/>=<sp/>Integer.parseInt(row[1]);</highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&quot;max_nodes&quot;</highlight><highlight class="normal">.equals(row[0]))<sp/>{</highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classexamples_1_1gp_1_1symbolic_regression_1_1_symbolic_regression_1adc03c7a1f5cc422df01229c112571017" kindref="member">maxNodes</ref><sp/>=<sp/>Integer.parseInt(row[1]);</highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&quot;bump&quot;</highlight><highlight class="normal">.equals(row[0]))<sp/>{</highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classexamples_1_1gp_1_1symbolic_regression_1_1_symbolic_regression_1aed2c9425ba0dee6ce09506ec67377b80" kindref="member">bumpPerfect</ref><sp/>=<sp/>Boolean.parseBoolean(row[1]);</highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&quot;bump_value&quot;</highlight><highlight class="normal">.equals(row[0]))<sp/>{</highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classexamples_1_1gp_1_1symbolic_regression_1_1_symbolic_regression_1adaa96c1e44db3faf9afaf2f689bd3269" kindref="member">bumpValue</ref><sp/>=<sp/>Double.parseDouble(row[1]);</highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&quot;functions&quot;</highlight><highlight class="normal">.equals(row[0]))<sp/>{</highlight></codeline>
<codeline lineno="423"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classexamples_1_1gp_1_1symbolic_regression_1_1_symbolic_regression_1a0b927896439021fdfefc038f4da13134" kindref="member">functions</ref><sp/>=<sp/>row[1].split(</highlight><highlight class="stringliteral">&quot;[\\s,]+&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&quot;adf_functions&quot;</highlight><highlight class="normal">.equals(row[0]))<sp/>{</highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classexamples_1_1gp_1_1symbolic_regression_1_1_symbolic_regression_1a89be9b677272448c7fe4cc4d53e4570f" kindref="member">adfFunctions</ref><sp/>=<sp/>row[1].split(</highlight><highlight class="stringliteral">&quot;[\\s,]+&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="427"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="428"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&quot;variable_names&quot;</highlight><highlight class="normal">.equals(row[0]))<sp/>{</highlight></codeline>
<codeline lineno="429"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classexamples_1_1gp_1_1symbolic_regression_1_1_symbolic_regression_1ac87f5f1e780bb2332e52011fe9d7539d" kindref="member">variableNames</ref><sp/>=<sp/>row[1].split(</highlight><highlight class="stringliteral">&quot;[\\s,]+&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&quot;output_variable&quot;</highlight><highlight class="normal">.equals(row[0]))<sp/>{</highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classexamples_1_1gp_1_1symbolic_regression_1_1_symbolic_regression_1a41a52e03f6aaf7e0317f9f2fb14525b7" kindref="member">outputVariable</ref><sp/>=<sp/>Integer.parseInt(row[1]);</highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="434"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&quot;ignore_variables&quot;</highlight><highlight class="normal">.equals(row[0]))<sp/>{</highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>String[]<sp/>ignoreVariablesS<sp/>=<sp/>row[1].split(</highlight><highlight class="stringliteral">&quot;[\\s,]+&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="436"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classexamples_1_1gp_1_1symbolic_regression_1_1_symbolic_regression_1a24561bfc8adbe85f6e6ce74fcd008602" kindref="member">ignoreVariables</ref><sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">[ignoreVariablesS.length];</highlight></codeline>
<codeline lineno="437"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>TODO:<sp/>make<sp/>it<sp/>a<sp/>HashMap<sp/>instead!</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="438"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>ignoreVariablesS.length;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="439"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ignoreVariables[i]<sp/>=<sp/>Integer.parseInt(ignoreVariablesS[i]);</highlight></codeline>
<codeline lineno="440"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="441"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="442"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&quot;constant&quot;</highlight><highlight class="normal">.equals(row[0]))<sp/>{</highlight></codeline>
<codeline lineno="443"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Double<sp/>constant<sp/>=<sp/>Double.parseDouble(row[1]);</highlight></codeline>
<codeline lineno="444"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>constants.add(constant);</highlight></codeline>
<codeline lineno="445"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="446"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&quot;adf_arity&quot;</highlight><highlight class="normal">.equals(row[0]))<sp/>{</highlight></codeline>
<codeline lineno="447"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classexamples_1_1gp_1_1symbolic_regression_1_1_symbolic_regression_1a6306199eec50bb60282902256b811e0c" kindref="member">adfArity</ref><sp/>=<sp/>Integer.parseInt(row[1]);</highlight></codeline>
<codeline lineno="448"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>System.out.println(</highlight><highlight class="stringliteral">&quot;ADF<sp/>arity<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/><ref refid="classexamples_1_1gp_1_1symbolic_regression_1_1_symbolic_regression_1a6306199eec50bb60282902256b811e0c" kindref="member">adfArity</ref>);</highlight></codeline>
<codeline lineno="449"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classexamples_1_1gp_1_1symbolic_regression_1_1_symbolic_regression_1a6306199eec50bb60282902256b811e0c" kindref="member">adfArity</ref><sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="450"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classexamples_1_1gp_1_1symbolic_regression_1_1_symbolic_regression_1a445e765c5dbed4c15269f00f5c891f01" kindref="member">useADF</ref><sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="451"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="452"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="453"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&quot;adf_type&quot;</highlight><highlight class="normal">.equals(row[0]))<sp/>{</highlight></codeline>
<codeline lineno="454"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classexamples_1_1gp_1_1symbolic_regression_1_1_symbolic_regression_1a66848d80715e58f5287c6a1278c1debf" kindref="member">adfType</ref><sp/>=<sp/>row[1];</highlight></codeline>
<codeline lineno="455"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>}<sp/>else<sp/>if<sp/>(&quot;punish_length&quot;.equals(row[0]))<sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="456"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>punishLength<sp/>=<sp/>Boolean.parseBoolean(row[1]);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="457"><highlight class="normal"></highlight></codeline>
<codeline lineno="458"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="459"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&quot;tournament_selector_size&quot;</highlight><highlight class="normal">.equals(row[0]))<sp/>{</highlight></codeline>
<codeline lineno="460"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classexamples_1_1gp_1_1symbolic_regression_1_1_symbolic_regression_1a916ced9e82e1dc1b31d3485d42cdf894" kindref="member">tournamentSelectorSize</ref><sp/>=<sp/>Integer.parseInt(row[1]);</highlight></codeline>
<codeline lineno="461"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="462"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&quot;scale_error&quot;</highlight><highlight class="normal">.equals(row[0]))<sp/>{</highlight></codeline>
<codeline lineno="463"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classexamples_1_1gp_1_1symbolic_regression_1_1_symbolic_regression_1a2211f414599fe21341db16918a44edb6" kindref="member">scaleError</ref><sp/>=<sp/>Double.parseDouble(row[1]);</highlight></codeline>
<codeline lineno="464"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="465"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&quot;stop_criteria&quot;</highlight><highlight class="normal">.equals(row[0]))<sp/>{</highlight></codeline>
<codeline lineno="466"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classexamples_1_1gp_1_1symbolic_regression_1_1_symbolic_regression_1a88585957d820cb0d8606b8975d3da984" kindref="member">stopCriteria</ref><sp/>=<sp/>Double.parseDouble(row[1]);</highlight></codeline>
<codeline lineno="467"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="468"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&quot;show_population&quot;</highlight><highlight class="normal">.equals(row[0]))<sp/>{</highlight></codeline>
<codeline lineno="469"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classexamples_1_1gp_1_1symbolic_regression_1_1_symbolic_regression_1a3fe3b5aec221fd8f8e8a45d5d525367b" kindref="member">showPopulation</ref><sp/>=<sp/>Boolean.parseBoolean(row[1]);</highlight></codeline>
<codeline lineno="470"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="471"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&quot;show_similiar&quot;</highlight><highlight class="normal">.equals(row[0]))<sp/>{</highlight></codeline>
<codeline lineno="472"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classexamples_1_1gp_1_1symbolic_regression_1_1_symbolic_regression_1aff693574d91b44b50fcfbacbb8f6714a" kindref="member">showSimiliar</ref><sp/>=<sp/>Boolean.parseBoolean(row[1]);</highlight></codeline>
<codeline lineno="473"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="474"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="475"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>System.out.println(</highlight><highlight class="stringliteral">&quot;Unknown<sp/>keyword:<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>row[0]<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;<sp/>on<sp/>line<sp/>&quot;</highlight><highlight class="normal"><sp/>+</highlight></codeline>
<codeline lineno="476"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lineCount);</highlight></codeline>
<codeline lineno="477"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>System.exit(1);</highlight></codeline>
<codeline lineno="478"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="479"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="480"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="comment">//<sp/>end<sp/>if(gotData)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="481"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="comment">//<sp/>end<sp/>while</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="482"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>inr.close();</highlight></codeline>
<codeline lineno="483"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="484"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Now<sp/>we<sp/>know<sp/>everything<sp/>to<sp/>be<sp/>known.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="485"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Construct<sp/>the<sp/>matrix<sp/>from<sp/>the<sp/>file.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="486"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>-----------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="487"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>r<sp/>=<sp/>theData.size();</highlight></codeline>
<codeline lineno="488"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>c<sp/>=<sp/>theData.get(0).length;</highlight></codeline>
<codeline lineno="489"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>numIgnore<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="490"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classexamples_1_1gp_1_1symbolic_regression_1_1_symbolic_regression_1a24561bfc8adbe85f6e6ce74fcd008602" kindref="member">ignoreVariables</ref><sp/>!=<sp/>null)<sp/>{</highlight></codeline>
<codeline lineno="491"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>TODO:<sp/>ignoreVariables<sp/>should<sp/>be<sp/>a<sp/>HashMap</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="492"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>numIgnore<sp/>=<sp/>ignoreVariables.length;</highlight></codeline>
<codeline lineno="493"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>c<sp/>=<sp/>c<sp/>-<sp/>numIgnore;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="494"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="495"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Double[][]<sp/>dataTmp<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>Double[r][c];</highlight></codeline>
<codeline lineno="496"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>TODO:<sp/>ignore<sp/>the<sp/>variables<sp/>in<sp/>ignoreVariables</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="497"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>r;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="498"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Double[]<sp/>this_row<sp/>=<sp/>theData.get(i);</highlight></codeline>
<codeline lineno="499"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>c;<sp/>j++)<sp/>{</highlight></codeline>
<codeline lineno="500"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dataTmp[i][j]<sp/>=<sp/>this_row[j];</highlight></codeline>
<codeline lineno="501"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="502"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="503"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Since<sp/>we<sp/>calculate<sp/>the<sp/>error<sp/>on<sp/>the<sp/>variable<sp/>we</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="504"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>must<sp/>transpose<sp/>the<sp/>data<sp/>matrix</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="505"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>-----------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="506"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classexamples_1_1gp_1_1symbolic_regression_1_1_symbolic_regression_1aa588c62a94fe721a95da78977de37d62" kindref="member">data</ref><sp/>=<sp/><ref refid="classexamples_1_1gp_1_1symbolic_regression_1_1_symbolic_regression_1ad032436a7db934626b4b369a66728cfb" kindref="member">transposeMatrix</ref>(dataTmp);</highlight></codeline>
<codeline lineno="507"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">catch</highlight><highlight class="normal"><sp/>(IOException<sp/>e)<sp/>{</highlight></codeline>
<codeline lineno="508"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>System.out.println(e);</highlight></codeline>
<codeline lineno="509"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>System.exit(1);</highlight></codeline>
<codeline lineno="510"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="511"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="comment">//<sp/>end<sp/>readFile</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="512"><highlight class="normal"></highlight></codeline>
<codeline lineno="513"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="514"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Transpose<sp/>matrix</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="515"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>----------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="516" refid="classexamples_1_1gp_1_1symbolic_regression_1_1_symbolic_regression_1ad032436a7db934626b4b369a66728cfb" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>Double[][]<sp/><ref refid="classexamples_1_1gp_1_1symbolic_regression_1_1_symbolic_regression_1ad032436a7db934626b4b369a66728cfb" kindref="member">transposeMatrix</ref>(Double[][]<sp/>m)<sp/>{</highlight></codeline>
<codeline lineno="517"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>r<sp/>=<sp/>m.length;</highlight></codeline>
<codeline lineno="518"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>c<sp/>=<sp/>m[0].length;</highlight></codeline>
<codeline lineno="519"><highlight class="normal"><sp/><sp/><sp/><sp/>Double[][]<sp/>t<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>Double[c][r];</highlight></codeline>
<codeline lineno="520"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>r;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="521"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>c;<sp/>++j)<sp/>{</highlight></codeline>
<codeline lineno="522"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>t[j][i]<sp/>=<sp/>m[i][j];</highlight></codeline>
<codeline lineno="523"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="524"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="525"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>t;</highlight></codeline>
<codeline lineno="526"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="comment">//<sp/>end<sp/>transposeMatrix</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="527"><highlight class="normal"></highlight></codeline>
<codeline lineno="528"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="529"><highlight class="comment"><sp/><sp/><sp/>*<sp/><sp/>makeCommands:</highlight></codeline>
<codeline lineno="530"><highlight class="comment"><sp/><sp/><sp/>*<sp/><sp/>makes<sp/>the<sp/>CommandGene<sp/>array<sp/>given<sp/>the<sp/>function<sp/>listed<sp/>in<sp/>the</highlight></codeline>
<codeline lineno="531"><highlight class="comment"><sp/><sp/><sp/>*<sp/><sp/>configurations<sp/>file</highlight></codeline>
<codeline lineno="532"><highlight class="comment"><sp/><sp/><sp/>*<sp/><sp/>------------------------------------------------------------</highlight></codeline>
<codeline lineno="533"><highlight class="comment"><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="534"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="classorg_1_1jgap_1_1gp_1_1_command_gene" kindref="compound">CommandGene</ref>[]<sp/>makeCommands(<ref refid="classorg_1_1jgap_1_1gp_1_1impl_1_1_g_p_configuration" kindref="compound">GPConfiguration</ref><sp/>conf,<sp/>String[]<sp/><ref refid="classexamples_1_1gp_1_1symbolic_regression_1_1_symbolic_regression_1a0b927896439021fdfefc038f4da13134" kindref="member">functions</ref>,</highlight></codeline>
<codeline lineno="535"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Double<sp/><ref refid="classexamples_1_1gp_1_1symbolic_regression_1_1_symbolic_regression_1a879b8d1c8895ce4cd9bffa224c7005c3" kindref="member">lowerRange</ref>,<sp/>Double<sp/><ref refid="classexamples_1_1gp_1_1symbolic_regression_1_1_symbolic_regression_1ab2b461c410629ea6a5309d6f59ccf7b3" kindref="member">upperRange</ref>,</highlight></codeline>
<codeline lineno="536"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>String<sp/>type)<sp/>{</highlight></codeline>
<codeline lineno="537"><highlight class="normal"><sp/><sp/><sp/><sp/>ArrayList&lt;CommandGene&gt;<sp/>commandsList<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>ArrayList&lt;CommandGene&gt;<sp/>();</highlight></codeline>
<codeline lineno="538"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>len<sp/>=<sp/>functions.length;</highlight></codeline>
<codeline lineno="539"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="540"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>len;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="541"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="542"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Note:<sp/>Not<sp/>all<sp/>functions<sp/>are<sp/>applicable<sp/>here...</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="543"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="544"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&quot;Multiply&quot;</highlight><highlight class="normal">.equals(functions[i]))<sp/>{</highlight></codeline>
<codeline lineno="545"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>commandsList.add(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>Multiply(conf,<sp/><ref refid="classorg_1_1jgap_1_1gp_1_1_command_gene" kindref="compound">CommandGene</ref>.<ref refid="classorg_1_1jgap_1_1gp_1_1_command_gene_1a085d36818c24978468c002c57d982363" kindref="member">DoubleClass</ref>));</highlight></codeline>
<codeline lineno="546"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classexamples_1_1gp_1_1symbolic_regression_1_1_symbolic_regression_1a445e765c5dbed4c15269f00f5c891f01" kindref="member">useADF</ref><sp/>&amp;&amp;<sp/></highlight><highlight class="stringliteral">&quot;boolean&quot;</highlight><highlight class="normal">.equals(<ref refid="classexamples_1_1gp_1_1symbolic_regression_1_1_symbolic_regression_1a66848d80715e58f5287c6a1278c1debf" kindref="member">adfType</ref>))<sp/>{</highlight></codeline>
<codeline lineno="547"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>commandsList.add(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>Multiply(conf,<sp/><ref refid="classorg_1_1jgap_1_1gp_1_1_command_gene" kindref="compound">CommandGene</ref>.<ref refid="classorg_1_1jgap_1_1gp_1_1_command_gene_1a5a4fe8e5d732bbd32363b683332808a7" kindref="member">BooleanClass</ref>));</highlight></codeline>
<codeline lineno="548"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="549"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="550"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&quot;Multiply3&quot;</highlight><highlight class="normal">.equals(functions[i]))<sp/>{</highlight></codeline>
<codeline lineno="551"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>commandsList.add(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>Multiply3(conf,<sp/>CommandGene.DoubleClass));</highlight></codeline>
<codeline lineno="552"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classexamples_1_1gp_1_1symbolic_regression_1_1_symbolic_regression_1a445e765c5dbed4c15269f00f5c891f01" kindref="member">useADF</ref><sp/>&amp;&amp;<sp/></highlight><highlight class="stringliteral">&quot;boolean&quot;</highlight><highlight class="normal">.equals(<ref refid="classexamples_1_1gp_1_1symbolic_regression_1_1_symbolic_regression_1a66848d80715e58f5287c6a1278c1debf" kindref="member">adfType</ref>))<sp/>{</highlight></codeline>
<codeline lineno="553"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>commandsList.add(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>Multiply3(conf,<sp/>CommandGene.BooleanClass));</highlight></codeline>
<codeline lineno="554"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="555"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="556"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&quot;Add&quot;</highlight><highlight class="normal">.equals(functions[i]))<sp/>{</highlight></codeline>
<codeline lineno="557"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>commandsList.add(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>Add(conf,<sp/>CommandGene.DoubleClass));</highlight></codeline>
<codeline lineno="558"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classexamples_1_1gp_1_1symbolic_regression_1_1_symbolic_regression_1a445e765c5dbed4c15269f00f5c891f01" kindref="member">useADF</ref><sp/>&amp;&amp;<sp/></highlight><highlight class="stringliteral">&quot;boolean&quot;</highlight><highlight class="normal">.equals(<ref refid="classexamples_1_1gp_1_1symbolic_regression_1_1_symbolic_regression_1a66848d80715e58f5287c6a1278c1debf" kindref="member">adfType</ref>))<sp/>{</highlight></codeline>
<codeline lineno="559"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>commandsList.add(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>Add(conf,<sp/>CommandGene.BooleanClass));</highlight></codeline>
<codeline lineno="560"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="561"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="562"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&quot;Divide&quot;</highlight><highlight class="normal">.equals(functions[i]))<sp/>{</highlight></codeline>
<codeline lineno="563"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>commandsList.add(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>Divide(conf,<sp/>CommandGene.DoubleClass));</highlight></codeline>
<codeline lineno="564"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classexamples_1_1gp_1_1symbolic_regression_1_1_symbolic_regression_1a445e765c5dbed4c15269f00f5c891f01" kindref="member">useADF</ref><sp/>&amp;&amp;<sp/></highlight><highlight class="stringliteral">&quot;boolean&quot;</highlight><highlight class="normal">.equals(<ref refid="classexamples_1_1gp_1_1symbolic_regression_1_1_symbolic_regression_1a66848d80715e58f5287c6a1278c1debf" kindref="member">adfType</ref>))<sp/>{</highlight></codeline>
<codeline lineno="565"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>commandsList.add(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>Divide(conf,<sp/>CommandGene.BooleanClass));</highlight></codeline>
<codeline lineno="566"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="567"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="568"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&quot;Add3&quot;</highlight><highlight class="normal">.equals(functions[i]))<sp/>{</highlight></codeline>
<codeline lineno="569"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>commandsList.add(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>Add3(conf,<sp/>CommandGene.DoubleClass));</highlight></codeline>
<codeline lineno="570"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classexamples_1_1gp_1_1symbolic_regression_1_1_symbolic_regression_1a445e765c5dbed4c15269f00f5c891f01" kindref="member">useADF</ref><sp/>&amp;&amp;<sp/></highlight><highlight class="stringliteral">&quot;boolean&quot;</highlight><highlight class="normal">.equals(<ref refid="classexamples_1_1gp_1_1symbolic_regression_1_1_symbolic_regression_1a66848d80715e58f5287c6a1278c1debf" kindref="member">adfType</ref>))<sp/>{</highlight></codeline>
<codeline lineno="571"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>commandsList.add(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>Add3(conf,<sp/>CommandGene.BooleanClass));</highlight></codeline>
<codeline lineno="572"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="573"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="574"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&quot;Add4&quot;</highlight><highlight class="normal">.equals(functions[i]))<sp/>{</highlight></codeline>
<codeline lineno="575"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>commandsList.add(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>Add4(conf,<sp/>CommandGene.DoubleClass));</highlight></codeline>
<codeline lineno="576"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classexamples_1_1gp_1_1symbolic_regression_1_1_symbolic_regression_1a445e765c5dbed4c15269f00f5c891f01" kindref="member">useADF</ref><sp/>&amp;&amp;<sp/></highlight><highlight class="stringliteral">&quot;boolean&quot;</highlight><highlight class="normal">.equals(<ref refid="classexamples_1_1gp_1_1symbolic_regression_1_1_symbolic_regression_1a66848d80715e58f5287c6a1278c1debf" kindref="member">adfType</ref>))<sp/>{</highlight></codeline>
<codeline lineno="577"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>commandsList.add(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>Add4(conf,<sp/>CommandGene.BooleanClass));</highlight></codeline>
<codeline lineno="578"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="579"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="580"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&quot;Subtract&quot;</highlight><highlight class="normal">.equals(functions[i]))<sp/>{</highlight></codeline>
<codeline lineno="581"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>commandsList.add(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>Subtract(conf,<sp/>CommandGene.DoubleClass));</highlight></codeline>
<codeline lineno="582"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classexamples_1_1gp_1_1symbolic_regression_1_1_symbolic_regression_1a445e765c5dbed4c15269f00f5c891f01" kindref="member">useADF</ref><sp/>&amp;&amp;<sp/></highlight><highlight class="stringliteral">&quot;boolean&quot;</highlight><highlight class="normal">.equals(<ref refid="classexamples_1_1gp_1_1symbolic_regression_1_1_symbolic_regression_1a66848d80715e58f5287c6a1278c1debf" kindref="member">adfType</ref>))<sp/>{</highlight></codeline>
<codeline lineno="583"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>commandsList.add(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>Subtract(conf,<sp/>CommandGene.BooleanClass));</highlight></codeline>
<codeline lineno="584"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="585"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="586"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&quot;Sine&quot;</highlight><highlight class="normal">.equals(functions[i]))<sp/>{</highlight></codeline>
<codeline lineno="587"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>commandsList.add(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>Sine(conf,<sp/>CommandGene.DoubleClass));</highlight></codeline>
<codeline lineno="588"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="589"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&quot;ArcSine&quot;</highlight><highlight class="normal">.equals(functions[i]))<sp/>{</highlight></codeline>
<codeline lineno="590"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>commandsList.add(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>ArcSine(conf,<sp/>CommandGene.DoubleClass));</highlight></codeline>
<codeline lineno="591"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="592"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&quot;Tangent&quot;</highlight><highlight class="normal">.equals(functions[i]))<sp/>{</highlight></codeline>
<codeline lineno="593"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>commandsList.add(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>Tangent(conf,<sp/>CommandGene.DoubleClass));</highlight></codeline>
<codeline lineno="594"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="595"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&quot;ArcTangent&quot;</highlight><highlight class="normal">.equals(functions[i]))<sp/>{</highlight></codeline>
<codeline lineno="596"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>commandsList.add(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>ArcTangent(conf,<sp/>CommandGene.DoubleClass));</highlight></codeline>
<codeline lineno="597"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="598"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&quot;Cosine&quot;</highlight><highlight class="normal">.equals(functions[i]))<sp/>{</highlight></codeline>
<codeline lineno="599"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>commandsList.add(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>Cosine(conf,<sp/>CommandGene.DoubleClass));</highlight></codeline>
<codeline lineno="600"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="601"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&quot;ArcCosine&quot;</highlight><highlight class="normal">.equals(functions[i]))<sp/>{</highlight></codeline>
<codeline lineno="602"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>commandsList.add(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>ArcCosine(conf,<sp/>CommandGene.DoubleClass));</highlight></codeline>
<codeline lineno="603"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="604"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&quot;Exp&quot;</highlight><highlight class="normal">.equals(functions[i]))<sp/>{</highlight></codeline>
<codeline lineno="605"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>commandsList.add(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>Exp(conf,<sp/>CommandGene.DoubleClass));</highlight></codeline>
<codeline lineno="606"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="607"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&quot;Log&quot;</highlight><highlight class="normal">.equals(functions[i]))<sp/>{</highlight></codeline>
<codeline lineno="608"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>commandsList.add(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>Log(conf,<sp/>CommandGene.DoubleClass));</highlight></codeline>
<codeline lineno="609"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="610"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&quot;Abs&quot;</highlight><highlight class="normal">.equals(functions[i]))<sp/>{</highlight></codeline>
<codeline lineno="611"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>commandsList.add(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>Abs(conf,<sp/>CommandGene.DoubleClass));</highlight></codeline>
<codeline lineno="612"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="613"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&quot;Pow&quot;</highlight><highlight class="normal">.equals(functions[i]))<sp/>{</highlight></codeline>
<codeline lineno="614"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>commandsList.add(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>Pow(conf,<sp/>CommandGene.DoubleClass));</highlight></codeline>
<codeline lineno="615"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="616"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&quot;Round&quot;</highlight><highlight class="normal">.equals(functions[i]))<sp/>{</highlight></codeline>
<codeline lineno="617"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>commandsList.add(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>Round(conf,<sp/>CommandGene.DoubleClass));</highlight></codeline>
<codeline lineno="618"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="619"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&quot;Ceil&quot;</highlight><highlight class="normal">.equals(functions[i]))<sp/>{</highlight></codeline>
<codeline lineno="620"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>commandsList.add(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>Ceil(conf,<sp/>CommandGene.DoubleClass));</highlight></codeline>
<codeline lineno="621"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="622"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&quot;Floor&quot;</highlight><highlight class="normal">.equals(functions[i]))<sp/>{</highlight></codeline>
<codeline lineno="623"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>commandsList.add(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>Floor(conf,<sp/>CommandGene.DoubleClass));</highlight></codeline>
<codeline lineno="624"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="625"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&quot;Modulo&quot;</highlight><highlight class="normal">.equals(functions[i]))<sp/>{</highlight></codeline>
<codeline lineno="626"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>commandsList.add(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>Modulo(conf,<sp/>CommandGene.DoubleClass));</highlight></codeline>
<codeline lineno="627"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classexamples_1_1gp_1_1symbolic_regression_1_1_symbolic_regression_1a445e765c5dbed4c15269f00f5c891f01" kindref="member">useADF</ref><sp/>&amp;&amp;<sp/></highlight><highlight class="stringliteral">&quot;boolean&quot;</highlight><highlight class="normal">.equals(<ref refid="classexamples_1_1gp_1_1symbolic_regression_1_1_symbolic_regression_1a66848d80715e58f5287c6a1278c1debf" kindref="member">adfType</ref>))<sp/>{</highlight></codeline>
<codeline lineno="628"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>commandsList.add(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>Modulo(conf,<sp/>CommandGene.BooleanClass));</highlight></codeline>
<codeline lineno="629"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="630"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="631"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&quot;ModuloD&quot;</highlight><highlight class="normal">.equals(functions[i]))<sp/>{</highlight></codeline>
<codeline lineno="632"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>commandsList.add(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>ModuloD(conf,<sp/>CommandGene.DoubleClass));</highlight></codeline>
<codeline lineno="633"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classexamples_1_1gp_1_1symbolic_regression_1_1_symbolic_regression_1a445e765c5dbed4c15269f00f5c891f01" kindref="member">useADF</ref><sp/>&amp;&amp;<sp/></highlight><highlight class="stringliteral">&quot;boolean&quot;</highlight><highlight class="normal">.equals(<ref refid="classexamples_1_1gp_1_1symbolic_regression_1_1_symbolic_regression_1a66848d80715e58f5287c6a1278c1debf" kindref="member">adfType</ref>))<sp/>{</highlight></codeline>
<codeline lineno="634"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>commandsList.add(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>ModuloD(conf,<sp/>CommandGene.BooleanClass));</highlight></codeline>
<codeline lineno="635"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="636"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="637"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&quot;Max&quot;</highlight><highlight class="normal">.equals(functions[i]))<sp/>{</highlight></codeline>
<codeline lineno="638"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>commandsList.add(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>Max(conf,<sp/>CommandGene.DoubleClass));</highlight></codeline>
<codeline lineno="639"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classexamples_1_1gp_1_1symbolic_regression_1_1_symbolic_regression_1a445e765c5dbed4c15269f00f5c891f01" kindref="member">useADF</ref><sp/>&amp;&amp;<sp/></highlight><highlight class="stringliteral">&quot;boolean&quot;</highlight><highlight class="normal">.equals(<ref refid="classexamples_1_1gp_1_1symbolic_regression_1_1_symbolic_regression_1a66848d80715e58f5287c6a1278c1debf" kindref="member">adfType</ref>))<sp/>{</highlight></codeline>
<codeline lineno="640"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>commandsList.add(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>Max(conf,<sp/>CommandGene.BooleanClass));</highlight></codeline>
<codeline lineno="641"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="642"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="643"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&quot;Min&quot;</highlight><highlight class="normal">.equals(functions[i]))<sp/>{</highlight></codeline>
<codeline lineno="644"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>commandsList.add(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>Min(conf,<sp/>CommandGene.DoubleClass));</highlight></codeline>
<codeline lineno="645"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classexamples_1_1gp_1_1symbolic_regression_1_1_symbolic_regression_1a445e765c5dbed4c15269f00f5c891f01" kindref="member">useADF</ref><sp/>&amp;&amp;<sp/></highlight><highlight class="stringliteral">&quot;boolean&quot;</highlight><highlight class="normal">.equals(<ref refid="classexamples_1_1gp_1_1symbolic_regression_1_1_symbolic_regression_1a66848d80715e58f5287c6a1278c1debf" kindref="member">adfType</ref>))<sp/>{</highlight></codeline>
<codeline lineno="646"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>commandsList.add(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>Min(conf,<sp/>CommandGene.BooleanClass));</highlight></codeline>
<codeline lineno="647"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="648"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="649"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&quot;Sqrt&quot;</highlight><highlight class="normal">.equals(functions[i]))<sp/>{</highlight></codeline>
<codeline lineno="650"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Note:<sp/>This<sp/>uses<sp/>my<sp/>Sqrt.java<sp/>file</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="651"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>commandsList.add(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>Sqrt(conf,<sp/>CommandGene.DoubleClass));</highlight></codeline>
<codeline lineno="652"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="653"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&quot;Logistic&quot;</highlight><highlight class="normal">.equals(functions[i]))<sp/>{</highlight></codeline>
<codeline lineno="654"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Note:<sp/>This<sp/>uses<sp/>my<sp/>Logistic.java<sp/>file</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="655"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>commandsList.add(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>Logistic(conf,<sp/>CommandGene.DoubleClass));</highlight></codeline>
<codeline lineno="656"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="657"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&quot;Gaussian&quot;</highlight><highlight class="normal">.equals(functions[i]))<sp/>{</highlight></codeline>
<codeline lineno="658"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Note:<sp/>This<sp/>uses<sp/>my<sp/>Gaussian.java<sp/>file</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="659"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>commandsList.add(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>Gaussian(conf,<sp/>CommandGene.DoubleClass));</highlight></codeline>
<codeline lineno="660"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="661"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&quot;Sigmoid&quot;</highlight><highlight class="normal">.equals(functions[i]))<sp/>{</highlight></codeline>
<codeline lineno="662"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Note:<sp/>This<sp/>uses<sp/>my<sp/>Sigmoid.java<sp/>file</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="663"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>commandsList.add(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>Sigmoid(conf,<sp/>CommandGene.DoubleClass));</highlight></codeline>
<codeline lineno="664"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="665"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&quot;Gamma&quot;</highlight><highlight class="normal">.equals(functions[i]))<sp/>{</highlight></codeline>
<codeline lineno="666"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Note:<sp/>This<sp/>uses<sp/>my<sp/>Gamma.java<sp/>file</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="667"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>commandsList.add(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>Gamma(conf,<sp/>CommandGene.DoubleClass));</highlight></codeline>
<codeline lineno="668"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="669"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&quot;Step&quot;</highlight><highlight class="normal">.equals(functions[i]))<sp/>{</highlight></codeline>
<codeline lineno="670"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Note:<sp/>This<sp/>uses<sp/>my<sp/>Step.java<sp/>file</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="671"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>commandsList.add(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>Step(conf,<sp/>CommandGene.DoubleClass));</highlight></codeline>
<codeline lineno="672"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="673"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&quot;Sign&quot;</highlight><highlight class="normal">.equals(functions[i]))<sp/>{</highlight></codeline>
<codeline lineno="674"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Note:<sp/>This<sp/>uses<sp/>my<sp/>Sign.java<sp/>file</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="675"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>commandsList.add(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>Sign(conf,<sp/>CommandGene.DoubleClass));</highlight></codeline>
<codeline lineno="676"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="677"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&quot;Hill&quot;</highlight><highlight class="normal">.equals(functions[i]))<sp/>{</highlight></codeline>
<codeline lineno="678"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Note:<sp/>This<sp/>uses<sp/>my<sp/>Hill.java<sp/>file</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="679"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>commandsList.add(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>Hill(conf,<sp/>CommandGene.DoubleClass));</highlight></codeline>
<codeline lineno="680"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="681"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&quot;LesserThan&quot;</highlight><highlight class="normal">.equals(functions[i]))<sp/>{</highlight></codeline>
<codeline lineno="682"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>experimental</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="683"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>commandsList.add(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>LesserThan(conf,<sp/>CommandGene.BooleanClass));</highlight></codeline>
<codeline lineno="684"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="685"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&quot;GreaterThan&quot;</highlight><highlight class="normal">.equals(functions[i]))<sp/>{</highlight></codeline>
<codeline lineno="686"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>experimental</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="687"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>commandsList.add(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>GreaterThan(conf,<sp/>CommandGene.BooleanClass));</highlight></codeline>
<codeline lineno="688"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="689"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&quot;If&quot;</highlight><highlight class="normal">.equals(functions[i]))<sp/>{</highlight></codeline>
<codeline lineno="690"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Note:<sp/>This<sp/>is<sp/>just<sp/>If<sp/>on<sp/>DoubleClass,<sp/>not<sp/>a<sp/>proper<sp/>Boolean</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="691"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>commandsList.add(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>If(conf,<sp/>CommandGene.DoubleClass));</highlight></codeline>
<codeline lineno="692"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classexamples_1_1gp_1_1symbolic_regression_1_1_symbolic_regression_1a445e765c5dbed4c15269f00f5c891f01" kindref="member">useADF</ref><sp/>&amp;&amp;<sp/></highlight><highlight class="stringliteral">&quot;boolean&quot;</highlight><highlight class="normal">.equals(<ref refid="classexamples_1_1gp_1_1symbolic_regression_1_1_symbolic_regression_1a66848d80715e58f5287c6a1278c1debf" kindref="member">adfType</ref>))<sp/>{</highlight></codeline>
<codeline lineno="693"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>commandsList.add(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>If(conf,<sp/>CommandGene.BooleanClass));</highlight></codeline>
<codeline lineno="694"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="695"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="696"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&quot;IfElse&quot;</highlight><highlight class="normal">.equals(functions[i]))<sp/>{</highlight></codeline>
<codeline lineno="697"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>commandsList.add(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>IfElse(conf,<sp/>CommandGene.DoubleClass));</highlight></codeline>
<codeline lineno="698"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classexamples_1_1gp_1_1symbolic_regression_1_1_symbolic_regression_1a445e765c5dbed4c15269f00f5c891f01" kindref="member">useADF</ref><sp/>&amp;&amp;<sp/></highlight><highlight class="stringliteral">&quot;boolean&quot;</highlight><highlight class="normal">.equals(<ref refid="classexamples_1_1gp_1_1symbolic_regression_1_1_symbolic_regression_1a66848d80715e58f5287c6a1278c1debf" kindref="member">adfType</ref>))<sp/>{</highlight></codeline>
<codeline lineno="699"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>commandsList.add(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>IfElse(conf,<sp/>CommandGene.BooleanClass));</highlight></codeline>
<codeline lineno="700"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="701"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="702"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&quot;IfDyn&quot;</highlight><highlight class="normal">.equals(functions[i]))<sp/>{</highlight></codeline>
<codeline lineno="703"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Well,<sp/>this<sp/>don&apos;t<sp/>work<sp/>as<sp/>expected...</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="704"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>System.out.println(&quot;IfDyn<sp/>is<sp/>not<sp/>supported<sp/>yet&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="705"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>commandsList.add(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>IfDyn(conf,<sp/>CommandGene.BooleanClass,<sp/>1,<sp/>1,<sp/>5));</highlight></codeline>
<codeline lineno="706"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classexamples_1_1gp_1_1symbolic_regression_1_1_symbolic_regression_1a445e765c5dbed4c15269f00f5c891f01" kindref="member">useADF</ref><sp/>&amp;&amp;<sp/></highlight><highlight class="stringliteral">&quot;boolean&quot;</highlight><highlight class="normal">.equals(<ref refid="classexamples_1_1gp_1_1symbolic_regression_1_1_symbolic_regression_1a66848d80715e58f5287c6a1278c1debf" kindref="member">adfType</ref>))<sp/>{</highlight></codeline>
<codeline lineno="707"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>commandsList.add(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>IfDyn(conf,<sp/>CommandGene.DoubleClass,<sp/>1,<sp/>1,<sp/>5));</highlight></codeline>
<codeline lineno="708"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="709"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="710"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&quot;Loop&quot;</highlight><highlight class="normal">.equals(functions[i]))<sp/>{<sp/></highlight><highlight class="comment">//<sp/>experimental</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="711"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>commandsList.add(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>Loop(conf,<sp/>CommandGene.DoubleClass,<sp/>3));</highlight></codeline>
<codeline lineno="712"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classexamples_1_1gp_1_1symbolic_regression_1_1_symbolic_regression_1a445e765c5dbed4c15269f00f5c891f01" kindref="member">useADF</ref><sp/>&amp;&amp;<sp/></highlight><highlight class="stringliteral">&quot;boolean&quot;</highlight><highlight class="normal">.equals(<ref refid="classexamples_1_1gp_1_1symbolic_regression_1_1_symbolic_regression_1a66848d80715e58f5287c6a1278c1debf" kindref="member">adfType</ref>))<sp/>{</highlight></codeline>
<codeline lineno="713"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>commandsList.add(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>Loop(conf,<sp/>CommandGene.BooleanClass,<sp/>3));</highlight></codeline>
<codeline lineno="714"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="715"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="716"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&quot;Equals&quot;</highlight><highlight class="normal">.equals(functions[i]))<sp/>{</highlight></codeline>
<codeline lineno="717"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>experimental</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="718"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>commandsList.add(new<sp/>Equals(conf,<sp/>CommandGene.DoubleClass));</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="719"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classexamples_1_1gp_1_1symbolic_regression_1_1_symbolic_regression_1a445e765c5dbed4c15269f00f5c891f01" kindref="member">useADF</ref><sp/>&amp;&amp;<sp/></highlight><highlight class="stringliteral">&quot;boolean&quot;</highlight><highlight class="normal">.equals(<ref refid="classexamples_1_1gp_1_1symbolic_regression_1_1_symbolic_regression_1a66848d80715e58f5287c6a1278c1debf" kindref="member">adfType</ref>))<sp/>{</highlight></codeline>
<codeline lineno="720"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>commandsList.add(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>Equals(conf,<sp/>CommandGene.BooleanClass));</highlight></codeline>
<codeline lineno="721"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="722"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="723"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&quot;ForXLoop&quot;</highlight><highlight class="normal">.equals(functions[i]))<sp/>{</highlight></codeline>
<codeline lineno="724"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>experimental</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="725"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>commandsList.add(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>ForXLoop(conf,<sp/>CommandGene.IntegerClass));</highlight></codeline>
<codeline lineno="726"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classexamples_1_1gp_1_1symbolic_regression_1_1_symbolic_regression_1a445e765c5dbed4c15269f00f5c891f01" kindref="member">useADF</ref><sp/>&amp;&amp;<sp/></highlight><highlight class="stringliteral">&quot;boolean&quot;</highlight><highlight class="normal">.equals(<ref refid="classexamples_1_1gp_1_1symbolic_regression_1_1_symbolic_regression_1a66848d80715e58f5287c6a1278c1debf" kindref="member">adfType</ref>))<sp/>{</highlight></codeline>
<codeline lineno="727"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>commandsList.add(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>ForXLoop(conf,<sp/>CommandGene.BooleanClass));</highlight></codeline>
<codeline lineno="728"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="729"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classexamples_1_1gp_1_1symbolic_regression_1_1_symbolic_regression_1a445e765c5dbed4c15269f00f5c891f01" kindref="member">useADF</ref><sp/>&amp;&amp;<sp/></highlight><highlight class="stringliteral">&quot;integer&quot;</highlight><highlight class="normal">.equals(<ref refid="classexamples_1_1gp_1_1symbolic_regression_1_1_symbolic_regression_1a66848d80715e58f5287c6a1278c1debf" kindref="member">adfType</ref>))<sp/>{</highlight></codeline>
<codeline lineno="730"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>commandsList.add(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>ForXLoop(conf,<sp/>CommandGene.IntegerClass));</highlight></codeline>
<codeline lineno="731"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="732"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="733"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&quot;ForLoop&quot;</highlight><highlight class="normal">.equals(functions[i]))<sp/>{</highlight></codeline>
<codeline lineno="734"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>experimental</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="735"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>commandsList.add(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>ForLoop(conf,<sp/>CommandGene.IntegerClass,<sp/>10));</highlight></codeline>
<codeline lineno="736"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classexamples_1_1gp_1_1symbolic_regression_1_1_symbolic_regression_1a445e765c5dbed4c15269f00f5c891f01" kindref="member">useADF</ref><sp/>&amp;&amp;<sp/></highlight><highlight class="stringliteral">&quot;boolean&quot;</highlight><highlight class="normal">.equals(<ref refid="classexamples_1_1gp_1_1symbolic_regression_1_1_symbolic_regression_1a66848d80715e58f5287c6a1278c1debf" kindref="member">adfType</ref>))<sp/>{</highlight></codeline>
<codeline lineno="737"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>commandsList.add(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>ForLoop(conf,<sp/>CommandGene.BooleanClass,<sp/>10));</highlight></codeline>
<codeline lineno="738"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="739"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classexamples_1_1gp_1_1symbolic_regression_1_1_symbolic_regression_1a445e765c5dbed4c15269f00f5c891f01" kindref="member">useADF</ref><sp/>&amp;&amp;<sp/></highlight><highlight class="stringliteral">&quot;integer&quot;</highlight><highlight class="normal">.equals(<ref refid="classexamples_1_1gp_1_1symbolic_regression_1_1_symbolic_regression_1a66848d80715e58f5287c6a1278c1debf" kindref="member">adfType</ref>))<sp/>{</highlight></codeline>
<codeline lineno="740"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>commandsList.add(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>ForLoop(conf,<sp/>CommandGene.IntegerClass,<sp/>10));</highlight></codeline>
<codeline lineno="741"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="742"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="743"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&quot;Increment&quot;</highlight><highlight class="normal">.equals(functions[i]))<sp/>{</highlight></codeline>
<codeline lineno="744"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>commandsList.add(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>Increment(conf,<sp/>CommandGene.DoubleClass));</highlight></codeline>
<codeline lineno="745"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classexamples_1_1gp_1_1symbolic_regression_1_1_symbolic_regression_1a445e765c5dbed4c15269f00f5c891f01" kindref="member">useADF</ref><sp/>&amp;&amp;<sp/></highlight><highlight class="stringliteral">&quot;boolean&quot;</highlight><highlight class="normal">.equals(<ref refid="classexamples_1_1gp_1_1symbolic_regression_1_1_symbolic_regression_1a66848d80715e58f5287c6a1278c1debf" kindref="member">adfType</ref>))<sp/>{</highlight></codeline>
<codeline lineno="746"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>commandsList.add(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>Increment(conf,<sp/>CommandGene.BooleanClass));</highlight></codeline>
<codeline lineno="747"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="748"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="749"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&quot;Argument&quot;</highlight><highlight class="normal">.equals(functions[i]))<sp/>{</highlight></codeline>
<codeline lineno="750"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>experimental</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="751"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="752"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>commandsList.add(new<sp/>Argument(conf,<sp/>1,<sp/>CommandGene.DoubleClass));</highlight></codeline>
<codeline lineno="753"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(&quot;boolean&quot;.equals(adfType))<sp/>{</highlight></codeline>
<codeline lineno="754"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>commandsList.add(new<sp/>Argument(conf,<sp/>1,<sp/>CommandGene.BooleanClass));</highlight></codeline>
<codeline lineno="755"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="756"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="757"><highlight class="normal"></highlight></codeline>
<codeline lineno="758"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="759"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&quot;StoreTerminal&quot;</highlight><highlight class="normal">.equals(functions[i]))<sp/>{</highlight></codeline>
<codeline lineno="760"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>experimental</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="761"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>commandsList.add(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>StoreTerminal(conf,<sp/></highlight><highlight class="stringliteral">&quot;dmem0&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="762"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CommandGene.DoubleClass));</highlight></codeline>
<codeline lineno="763"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>commandsList.add(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>StoreTerminal(conf,<sp/></highlight><highlight class="stringliteral">&quot;dmem1&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="764"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CommandGene.DoubleClass));</highlight></codeline>
<codeline lineno="765"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classexamples_1_1gp_1_1symbolic_regression_1_1_symbolic_regression_1a445e765c5dbed4c15269f00f5c891f01" kindref="member">useADF</ref><sp/>&amp;&amp;<sp/></highlight><highlight class="stringliteral">&quot;boolean&quot;</highlight><highlight class="normal">.equals(<ref refid="classexamples_1_1gp_1_1symbolic_regression_1_1_symbolic_regression_1a66848d80715e58f5287c6a1278c1debf" kindref="member">adfType</ref>))<sp/>{</highlight></codeline>
<codeline lineno="766"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>commandsList.add(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>StoreTerminal(conf,<sp/></highlight><highlight class="stringliteral">&quot;bmem0&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="767"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CommandGene.DoubleClass));</highlight></codeline>
<codeline lineno="768"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>commandsList.add(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>StoreTerminal(conf,<sp/></highlight><highlight class="stringliteral">&quot;bmem1&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="769"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CommandGene.DoubleClass));</highlight></codeline>
<codeline lineno="770"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="771"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="772"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&quot;Pop&quot;</highlight><highlight class="normal">.equals(functions[i]))<sp/>{</highlight></codeline>
<codeline lineno="773"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>experimental</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="774"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>commandsList.add(new<sp/>Pop(conf,<sp/>CommandGene.DoubleClass));</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="775"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classexamples_1_1gp_1_1symbolic_regression_1_1_symbolic_regression_1a445e765c5dbed4c15269f00f5c891f01" kindref="member">useADF</ref><sp/>&amp;&amp;<sp/></highlight><highlight class="stringliteral">&quot;boolean&quot;</highlight><highlight class="normal">.equals(<ref refid="classexamples_1_1gp_1_1symbolic_regression_1_1_symbolic_regression_1a66848d80715e58f5287c6a1278c1debf" kindref="member">adfType</ref>))<sp/>{</highlight></codeline>
<codeline lineno="776"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>commandsList.add(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>Pop(conf,<sp/>CommandGene.BooleanClass));</highlight></codeline>
<codeline lineno="777"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="778"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="779"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&quot;Push&quot;</highlight><highlight class="normal">.equals(functions[i]))<sp/>{</highlight></codeline>
<codeline lineno="780"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>experimental</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="781"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>commandsList.add(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>Push(conf,<sp/>CommandGene.DoubleClass));</highlight></codeline>
<codeline lineno="782"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="783"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&quot;And&quot;</highlight><highlight class="normal">.equals(functions[i]))<sp/>{</highlight></codeline>
<codeline lineno="784"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>experimental</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="785"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>commandsList.add(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>And(conf));</highlight></codeline>
<codeline lineno="786"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="787"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&quot;Or&quot;</highlight><highlight class="normal">.equals(functions[i]))<sp/>{</highlight></codeline>
<codeline lineno="788"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>experimental</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="789"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>commandsList.add(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>Or(conf));</highlight></codeline>
<codeline lineno="790"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="791"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&quot;Xor&quot;</highlight><highlight class="normal">.equals(functions[i]))<sp/>{</highlight></codeline>
<codeline lineno="792"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>experimental</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="793"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>commandsList.add(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>Xor(conf));</highlight></codeline>
<codeline lineno="794"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="795"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&quot;Not&quot;</highlight><highlight class="normal">.equals(functions[i]))<sp/>{</highlight></codeline>
<codeline lineno="796"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>experimental</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="797"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>commandsList.add(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>Not(conf));</highlight></codeline>
<codeline lineno="798"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="799"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&quot;AndD&quot;</highlight><highlight class="normal">.equals(functions[i]))<sp/>{</highlight></codeline>
<codeline lineno="800"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>experimental</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="801"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>commandsList.add(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>AndD(conf));</highlight></codeline>
<codeline lineno="802"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="803"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&quot;OrD&quot;</highlight><highlight class="normal">.equals(functions[i]))<sp/>{</highlight></codeline>
<codeline lineno="804"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>experimental</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="805"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>commandsList.add(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>OrD(conf));</highlight></codeline>
<codeline lineno="806"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="807"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&quot;XorD&quot;</highlight><highlight class="normal">.equals(functions[i]))<sp/>{</highlight></codeline>
<codeline lineno="808"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>experimental</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="809"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>commandsList.add(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>XorD(conf));</highlight></codeline>
<codeline lineno="810"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="811"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&quot;NotD&quot;</highlight><highlight class="normal">.equals(functions[i]))<sp/>{</highlight></codeline>
<codeline lineno="812"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>experimental</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="813"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>commandsList.add(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>NotD(conf));</highlight></codeline>
<codeline lineno="814"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="815"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&quot;SubProgram&quot;</highlight><highlight class="normal">.equals(functions[i]))<sp/>{</highlight></codeline>
<codeline lineno="816"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>experimental</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="817"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classexamples_1_1gp_1_1symbolic_regression_1_1_symbolic_regression_1a445e765c5dbed4c15269f00f5c891f01" kindref="member">useADF</ref><sp/>&amp;&amp;<sp/></highlight><highlight class="stringliteral">&quot;boolean&quot;</highlight><highlight class="normal">.equals(<ref refid="classexamples_1_1gp_1_1symbolic_regression_1_1_symbolic_regression_1a66848d80715e58f5287c6a1278c1debf" kindref="member">adfType</ref>))<sp/>{</highlight></codeline>
<codeline lineno="818"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>commandsList.add(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>SubProgram(conf,</highlight></codeline>
<codeline lineno="819"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>Class[]<sp/>{<ref refid="classorg_1_1jgap_1_1gp_1_1_command_gene_1a5a4fe8e5d732bbd32363b683332808a7" kindref="member">CommandGene.BooleanClass</ref>,<sp/>CommandGene.BooleanClass}));</highlight></codeline>
<codeline lineno="820"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>commandsList.add(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>SubProgram(conf,</highlight></codeline>
<codeline lineno="821"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>Class[]<sp/>{<ref refid="classorg_1_1jgap_1_1gp_1_1_command_gene_1a5a4fe8e5d732bbd32363b683332808a7" kindref="member">CommandGene.BooleanClass</ref>,<sp/><ref refid="classorg_1_1jgap_1_1gp_1_1_command_gene_1a5a4fe8e5d732bbd32363b683332808a7" kindref="member">CommandGene.BooleanClass</ref>,</highlight></codeline>
<codeline lineno="822"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CommandGene.BooleanClass}));</highlight></codeline>
<codeline lineno="823"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="824"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>commandsList.add(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>SubProgram(conf,</highlight></codeline>
<codeline lineno="825"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>Class[]<sp/>{<ref refid="classorg_1_1jgap_1_1gp_1_1_command_gene_1a085d36818c24978468c002c57d982363" kindref="member">CommandGene.DoubleClass</ref>,<sp/>CommandGene.DoubleClass}));</highlight></codeline>
<codeline lineno="826"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>commandsList.add(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>SubProgram(conf,</highlight></codeline>
<codeline lineno="827"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>Class[]<sp/>{<ref refid="classorg_1_1jgap_1_1gp_1_1_command_gene_1a085d36818c24978468c002c57d982363" kindref="member">CommandGene.DoubleClass</ref>,<sp/><ref refid="classorg_1_1jgap_1_1gp_1_1_command_gene_1a085d36818c24978468c002c57d982363" kindref="member">CommandGene.DoubleClass</ref>,</highlight></codeline>
<codeline lineno="828"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CommandGene.DoubleClass}));</highlight></codeline>
<codeline lineno="829"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="830"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&quot;Tupel&quot;</highlight><highlight class="normal">.equals(functions[i]))<sp/>{</highlight></codeline>
<codeline lineno="831"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>experimental</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="832"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classexamples_1_1gp_1_1symbolic_regression_1_1_symbolic_regression_1a445e765c5dbed4c15269f00f5c891f01" kindref="member">useADF</ref><sp/>&amp;&amp;<sp/></highlight><highlight class="stringliteral">&quot;boolean&quot;</highlight><highlight class="normal">.equals(<ref refid="classexamples_1_1gp_1_1symbolic_regression_1_1_symbolic_regression_1a66848d80715e58f5287c6a1278c1debf" kindref="member">adfType</ref>))<sp/>{</highlight></codeline>
<codeline lineno="833"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>commandsList.add(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>Tupel(conf,</highlight></codeline>
<codeline lineno="834"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>Class[]<sp/>{<ref refid="classorg_1_1jgap_1_1gp_1_1_command_gene_1a5a4fe8e5d732bbd32363b683332808a7" kindref="member">CommandGene.BooleanClass</ref>,</highlight></codeline>
<codeline lineno="835"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CommandGene.BooleanClass}));</highlight></codeline>
<codeline lineno="836"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="837"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="838"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="839"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>System.out.println(</highlight><highlight class="stringliteral">&quot;Unkown<sp/>function:<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>functions[i]);</highlight></codeline>
<codeline lineno="840"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>System.exit(1);</highlight></codeline>
<codeline lineno="841"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="842"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="843"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>commandsList.add(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>Terminal(conf,<sp/>CommandGene.DoubleClass,<sp/>lowerRange,</highlight></codeline>
<codeline lineno="844"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>upperRange,<sp/><ref refid="classexamples_1_1gp_1_1symbolic_regression_1_1_symbolic_regression_1afae4503335c172014bb58d7adfd35d3f" kindref="member">terminalWholeNumbers</ref>));</highlight></codeline>
<codeline lineno="845"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>commandsList.add(new<sp/>Terminal(conf,<sp/>CommandGene.BooleanClass,<sp/>lowerRange,<sp/>upperRange,<sp/>terminalWholeNumbers));</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="846"><highlight class="normal"></highlight></codeline>
<codeline lineno="847"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>ADF</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="848"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Just<sp/>add<sp/>the<sp/>ADF<sp/>to<sp/>the<sp/>&quot;normal&quot;<sp/>command<sp/>list<sp/>(i.e.<sp/>not<sp/>to<sp/>the<sp/>ADF<sp/>list)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="849"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classexamples_1_1gp_1_1symbolic_regression_1_1_symbolic_regression_1a445e765c5dbed4c15269f00f5c891f01" kindref="member">useADF</ref><sp/>&amp;&amp;<sp/>!</highlight><highlight class="stringliteral">&quot;ADF&quot;</highlight><highlight class="normal">.equals(type))<sp/>{</highlight></codeline>
<codeline lineno="850"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>commandsList.add(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>ADF(conf,<sp/>1,<sp/><ref refid="classexamples_1_1gp_1_1symbolic_regression_1_1_symbolic_regression_1a6306199eec50bb60282902256b811e0c" kindref="member">adfArity</ref>));</highlight></codeline>
<codeline lineno="851"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="852"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classexamples_1_1gp_1_1symbolic_regression_1_1_symbolic_regression_1acb3e678854ed359a070db483c5b22cbf" kindref="member">constants</ref><sp/>!=<sp/>null)<sp/>{</highlight></codeline>
<codeline lineno="853"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>constants.size();<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="854"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Double<sp/>constant<sp/>=<sp/>constants.get(i);</highlight></codeline>
<codeline lineno="855"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>commandsList.add(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>Constant(conf,<sp/>CommandGene.DoubleClass,<sp/>constant));</highlight></codeline>
<codeline lineno="856"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="857"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="858"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">catch</highlight><highlight class="normal"><sp/>(Exception<sp/>e)<sp/>{</highlight></codeline>
<codeline lineno="859"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>System.out.println(e);</highlight></codeline>
<codeline lineno="860"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="861"><highlight class="normal"><sp/><sp/><sp/><sp/>CommandGene[]<sp/>commands<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>CommandGene[commandsList.size()];</highlight></codeline>
<codeline lineno="862"><highlight class="normal"><sp/><sp/><sp/><sp/>commandsList.toArray(commands);</highlight></codeline>
<codeline lineno="863"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>commands;</highlight></codeline>
<codeline lineno="864"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="865"><highlight class="normal"></highlight></codeline>
<codeline lineno="871" refid="classexamples_1_1gp_1_1symbolic_regression_1_1_symbolic_regression_1a88f5444b9429755a7859721f2eb2999d" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classexamples_1_1gp_1_1symbolic_regression_1_1_symbolic_regression_1a88f5444b9429755a7859721f2eb2999d" kindref="member">main</ref>(String[]<sp/>args)</highlight></codeline>
<codeline lineno="872"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throws</highlight><highlight class="normal"><sp/>Exception<sp/>{</highlight></codeline>
<codeline lineno="873"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Use<sp/>the<sp/>log4j<sp/>configuration</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="874"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Log<sp/>to<sp/>stdout<sp/>instead<sp/>of<sp/>file</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="875"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>-----------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="876"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>org.apache.log4j.PropertyConfigurator.configure(&quot;log4j.properties&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="877"><highlight class="normal"><sp/><sp/><sp/><sp/>LOGGER.addAppender(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>ConsoleAppender(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>SimpleLayout(),<sp/></highlight><highlight class="stringliteral">&quot;System.out&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="878"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="879"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Read<sp/>a<sp/>configuration<sp/>file,<sp/>or<sp/>not...</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="880"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="881"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(args.length<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="882"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>String<sp/>filename<sp/>=<sp/>args[0];</highlight><highlight class="comment">//e.g.<sp/>&quot;fahrenheit_celsius.conf&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="883"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classexamples_1_1gp_1_1symbolic_regression_1_1_symbolic_regression_1af25800b8f3bf079af265efaa11b26fc9" kindref="member">readFile</ref>(filename);</highlight></codeline>
<codeline lineno="884"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="885"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="886"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Default<sp/>problem</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="887"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Fibonacci<sp/>series,<sp/>with<sp/>three<sp/>input<sp/>variables<sp/>to<sp/>make<sp/>it</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="888"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>somewhat<sp/>harder.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="889"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>-------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="890"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classexamples_1_1gp_1_1symbolic_regression_1_1_symbolic_regression_1ad5f6a203c254715be21128b6f82ab673" kindref="member">numRows</ref><sp/>=<sp/>21;</highlight></codeline>
<codeline lineno="891"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classexamples_1_1gp_1_1symbolic_regression_1_1_symbolic_regression_1ab647e4a7ac66ce0c543f7906d302f3e3" kindref="member">numInputVariables</ref><sp/>=<sp/>3;</highlight></codeline>
<codeline lineno="892"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Note:<sp/>The<sp/>last<sp/>array<sp/>is<sp/>the<sp/>output<sp/>array</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="893"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">[][]<sp/>indata<sp/>=<sp/>{<sp/>{1,<sp/>1,<sp/>2,<sp/>3,<sp/>5,<sp/>8,<sp/>13,<sp/>21,<sp/>34,<sp/>55,<sp/>89,<sp/>144,<sp/>233,<sp/>377,</highlight></codeline>
<codeline lineno="894"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>610,<sp/>987,<sp/>1597,<sp/>2584,<sp/>4181,<sp/>6765,<sp/>10946},<sp/>{1,<sp/>2,<sp/>3,<sp/>5,<sp/>8,<sp/>13,<sp/>21,<sp/>34,</highlight></codeline>
<codeline lineno="895"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>55,<sp/>89,<sp/>144,<sp/>233,<sp/>377,<sp/>610,<sp/>987,<sp/>1597,<sp/>2584,<sp/>4181,<sp/>6765,<sp/>10946,<sp/>17711},</highlight></codeline>
<codeline lineno="896"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{2,<sp/>3,<sp/>5,<sp/>8,<sp/>13,<sp/>21,<sp/>34,<sp/>55,<sp/>89,<sp/>144,<sp/>233,<sp/>377,<sp/>610,<sp/>987,<sp/>1597,<sp/>2584,</highlight></codeline>
<codeline lineno="897"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>4181,<sp/>6765,<sp/>10946,<sp/>17711,<sp/>28657},<sp/>{3,<sp/>5,<sp/>8,<sp/>13,<sp/>21,<sp/>34,<sp/>55,<sp/>89,<sp/>144,</highlight></codeline>
<codeline lineno="898"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>233,<sp/>377,<sp/>610,<sp/>987,<sp/>1597,<sp/>2584,<sp/>4181,<sp/>6765,<sp/>10946,<sp/>17711,<sp/>28657,</highlight></codeline>
<codeline lineno="899"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>46368}</highlight></codeline>
<codeline lineno="900"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="901"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classexamples_1_1gp_1_1symbolic_regression_1_1_symbolic_regression_1aa588c62a94fe721a95da78977de37d62" kindref="member">data</ref><sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>Double[<ref refid="classexamples_1_1gp_1_1symbolic_regression_1_1_symbolic_regression_1ab647e4a7ac66ce0c543f7906d302f3e3" kindref="member">numInputVariables</ref><sp/>+<sp/>1][<ref refid="classexamples_1_1gp_1_1symbolic_regression_1_1_symbolic_regression_1ad5f6a203c254715be21128b6f82ab673" kindref="member">numRows</ref>];</highlight></codeline>
<codeline lineno="902"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/><ref refid="classexamples_1_1gp_1_1symbolic_regression_1_1_symbolic_regression_1ab647e4a7ac66ce0c543f7906d302f3e3" kindref="member">numInputVariables</ref><sp/>+<sp/>1;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="903"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/><ref refid="classexamples_1_1gp_1_1symbolic_regression_1_1_symbolic_regression_1ad5f6a203c254715be21128b6f82ab673" kindref="member">numRows</ref>;<sp/>j++)<sp/>{</highlight></codeline>
<codeline lineno="904"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classexamples_1_1gp_1_1symbolic_regression_1_1_symbolic_regression_1aa588c62a94fe721a95da78977de37d62" kindref="member">data</ref>[i][j]<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>Double(indata[i][j]);</highlight></codeline>
<codeline lineno="905"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="906"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="907"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>functions<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;Multiply,Divide,Add,Subtract&quot;</highlight><highlight class="normal">.split(</highlight><highlight class="stringliteral">&quot;,&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="908"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classexamples_1_1gp_1_1symbolic_regression_1_1_symbolic_regression_1ac87f5f1e780bb2332e52011fe9d7539d" kindref="member">variableNames</ref><sp/>=<sp/></highlight><highlight class="stringliteral">&quot;F1,F2,F3,F4&quot;</highlight><highlight class="normal">.split(</highlight><highlight class="stringliteral">&quot;,&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="909"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classexamples_1_1gp_1_1symbolic_regression_1_1_symbolic_regression_1ad6b0a1e41c631b55e3a6ed93dd871ea6" kindref="member">presentation</ref><sp/>=<sp/></highlight><highlight class="stringliteral">&quot;Fibonacci<sp/>series&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="910"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="911"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Present<sp/>the<sp/>problem</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="912"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>-------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="913"><highlight class="normal"><sp/><sp/><sp/><sp/>System.out.println(</highlight><highlight class="stringliteral">&quot;Presentation:<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/><ref refid="classexamples_1_1gp_1_1symbolic_regression_1_1_symbolic_regression_1ad6b0a1e41c631b55e3a6ed93dd871ea6" kindref="member">presentation</ref>);</highlight></codeline>
<codeline lineno="914"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classexamples_1_1gp_1_1symbolic_regression_1_1_symbolic_regression_1a41a52e03f6aaf7e0317f9f2fb14525b7" kindref="member">outputVariable</ref><sp/>==<sp/>null)<sp/>{</highlight></codeline>
<codeline lineno="915"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classexamples_1_1gp_1_1symbolic_regression_1_1_symbolic_regression_1a41a52e03f6aaf7e0317f9f2fb14525b7" kindref="member">outputVariable</ref><sp/>=<sp/><ref refid="classexamples_1_1gp_1_1symbolic_regression_1_1_symbolic_regression_1ab647e4a7ac66ce0c543f7906d302f3e3" kindref="member">numInputVariables</ref>;</highlight></codeline>
<codeline lineno="916"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="917"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classexamples_1_1gp_1_1symbolic_regression_1_1_symbolic_regression_1ac87f5f1e780bb2332e52011fe9d7539d" kindref="member">variableNames</ref><sp/>==<sp/>null)<sp/>{</highlight></codeline>
<codeline lineno="918"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classexamples_1_1gp_1_1symbolic_regression_1_1_symbolic_regression_1ac87f5f1e780bb2332e52011fe9d7539d" kindref="member">variableNames</ref><sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>String[<ref refid="classexamples_1_1gp_1_1symbolic_regression_1_1_symbolic_regression_1ab647e4a7ac66ce0c543f7906d302f3e3" kindref="member">numInputVariables</ref><sp/>+<sp/>1];</highlight></codeline>
<codeline lineno="919"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/><ref refid="classexamples_1_1gp_1_1symbolic_regression_1_1_symbolic_regression_1ab647e4a7ac66ce0c543f7906d302f3e3" kindref="member">numInputVariables</ref><sp/>+<sp/>1;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="920"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classexamples_1_1gp_1_1symbolic_regression_1_1_symbolic_regression_1ac87f5f1e780bb2332e52011fe9d7539d" kindref="member">variableNames</ref>[i]<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;V&quot;</highlight><highlight class="normal"><sp/>+<sp/>i;</highlight></codeline>
<codeline lineno="921"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="922"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="923"><highlight class="normal"><sp/><sp/><sp/><sp/>System.out.println(</highlight><highlight class="stringliteral">&quot;output_variable:<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/><ref refid="classexamples_1_1gp_1_1symbolic_regression_1_1_symbolic_regression_1ac87f5f1e780bb2332e52011fe9d7539d" kindref="member">variableNames</ref>[<ref refid="classexamples_1_1gp_1_1symbolic_regression_1_1_symbolic_regression_1a41a52e03f6aaf7e0317f9f2fb14525b7" kindref="member">outputVariable</ref>]<sp/>+</highlight></codeline>
<codeline lineno="924"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/>(index:<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/><ref refid="classexamples_1_1gp_1_1symbolic_regression_1_1_symbolic_regression_1a41a52e03f6aaf7e0317f9f2fb14525b7" kindref="member">outputVariable</ref><sp/>+<sp/></highlight><highlight class="stringliteral">&quot;)&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="925"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Setup<sp/>the<sp/>algorithm&apos;s<sp/>parameters.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="926"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>---------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="927"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classorg_1_1jgap_1_1gp_1_1impl_1_1_g_p_configuration" kindref="compound">GPConfiguration</ref><sp/>config<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="classorg_1_1jgap_1_1gp_1_1impl_1_1_g_p_configuration" kindref="compound">GPConfiguration</ref>();</highlight></codeline>
<codeline lineno="928"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>We<sp/>use<sp/>a<sp/>delta<sp/>fitness<sp/>evaluator<sp/>because<sp/>we<sp/>compute<sp/>a<sp/>defect<sp/>rate,<sp/>not</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="929"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>a<sp/>point<sp/>score!</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="930"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>----------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="931"><highlight class="normal"><sp/><sp/><sp/><sp/>config.setGPFitnessEvaluator(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="classorg_1_1jgap_1_1gp_1_1impl_1_1_delta_g_p_fitness_evaluator" kindref="compound">DeltaGPFitnessEvaluator</ref>());</highlight></codeline>
<codeline lineno="932"><highlight class="normal"><sp/><sp/><sp/><sp/>config.setMaxInitDepth(<ref refid="classexamples_1_1gp_1_1symbolic_regression_1_1_symbolic_regression_1a41ce468f8d781e1b1105aa420f736f61" kindref="member">maxInitDepth</ref>);</highlight></codeline>
<codeline lineno="933"><highlight class="normal"><sp/><sp/><sp/><sp/>config.setPopulationSize(<ref refid="classexamples_1_1gp_1_1symbolic_regression_1_1_symbolic_regression_1af835d7ddd8022c27dd9ad767bf2e4acd" kindref="member">populationSize</ref>);</highlight></codeline>
<codeline lineno="934"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Default<sp/>selectionMethod<sp/>is<sp/>is<sp/>TournamentSelector(3)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="935"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classexamples_1_1gp_1_1symbolic_regression_1_1_symbolic_regression_1a916ced9e82e1dc1b31d3485d42cdf894" kindref="member">tournamentSelectorSize</ref><sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="936"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>config.setSelectionMethod(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>TournamentSelector(<ref refid="classexamples_1_1gp_1_1symbolic_regression_1_1_symbolic_regression_1a916ced9e82e1dc1b31d3485d42cdf894" kindref="member">tournamentSelectorSize</ref>));</highlight></codeline>
<codeline lineno="937"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="941"><highlight class="normal"><sp/><sp/><sp/><sp/>config.setMaxCrossoverDepth(<ref refid="classexamples_1_1gp_1_1symbolic_regression_1_1_symbolic_regression_1a85924723eaa8ede23c6a48d5d3e950a6" kindref="member">maxCrossoverDepth</ref>);</highlight></codeline>
<codeline lineno="942"><highlight class="normal"><sp/><sp/><sp/><sp/>config.setFitnessFunction(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>SymbolicRegression.FormulaFitnessFunction());</highlight></codeline>
<codeline lineno="949"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>config.setStrictProgramCreation(true);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="950"><highlight class="normal"><sp/><sp/><sp/><sp/>config.setStrictProgramCreation(</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="951"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Default<sp/>from<sp/>GPConfiguration.java</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="952"><highlight class="normal"></highlight></codeline>
<codeline lineno="957"><highlight class="normal"><sp/><sp/><sp/><sp/>config.setFunctionProb(<ref refid="classexamples_1_1gp_1_1symbolic_regression_1_1_symbolic_regression_1a66d160306b4d02a0b5b48bade063980f" kindref="member">functionProb</ref>);</highlight></codeline>
<codeline lineno="963"><highlight class="normal"><sp/><sp/><sp/><sp/>config.setReproductionProb(<ref refid="classexamples_1_1gp_1_1symbolic_regression_1_1_symbolic_regression_1ab389bebc082ad688c17471ff85d2426d" kindref="member">reproductionProb</ref>);</highlight></codeline>
<codeline lineno="967"><highlight class="normal"><sp/><sp/><sp/><sp/>config.setMutationProb(<ref refid="classexamples_1_1gp_1_1symbolic_regression_1_1_symbolic_regression_1a42b4986cf46bee051208305bd6d73267" kindref="member">mutationProb</ref>);</highlight></codeline>
<codeline lineno="972"><highlight class="normal"><sp/><sp/><sp/><sp/>config.setDynamizeArityProb(<ref refid="classexamples_1_1gp_1_1symbolic_regression_1_1_symbolic_regression_1a4a47b26758c7a15c13051f3baa3afdc5" kindref="member">dynamizeArityProb</ref>);</highlight></codeline>
<codeline lineno="977"><highlight class="normal"><sp/><sp/><sp/><sp/>config.setNewChromsPercent(<ref refid="classexamples_1_1gp_1_1symbolic_regression_1_1_symbolic_regression_1a0acb20632ed97be899eb5766a2fd7f51" kindref="member">newChromsPercent</ref>);</highlight></codeline>
<codeline lineno="981"><highlight class="normal"><sp/><sp/><sp/><sp/>config.setMinInitDepth(<ref refid="classexamples_1_1gp_1_1symbolic_regression_1_1_symbolic_regression_1ab349b6e3c7f332656dd27d97984bc7cc" kindref="member">minInitDepth</ref>);</highlight></codeline>
<codeline lineno="986"><highlight class="normal"><sp/><sp/><sp/><sp/>config.setProgramCreationMaxTries(<ref refid="classexamples_1_1gp_1_1symbolic_regression_1_1_symbolic_regression_1a4f2c58d2d2a88ad848d4c8b8e673a990" kindref="member">programCreationMaxTries</ref>);</highlight></codeline>
<codeline lineno="987"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classorg_1_1jgap_1_1gp_1_1_g_p_problem" kindref="compound">GPProblem</ref><sp/>problem<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="classexamples_1_1gp_1_1symbolic_regression_1_1_symbolic_regression_1a4d4973f5179f75803bbccd8728e5279d" kindref="member">SymbolicRegression</ref>(config);</highlight></codeline>
<codeline lineno="988"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Create<sp/>the<sp/>genotype<sp/>of<sp/>the<sp/>problem,<sp/>i.e.,<sp/>define<sp/>the<sp/>GP<sp/>commands<sp/>and</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="989"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>terminals<sp/>that<sp/>can<sp/>be<sp/>used,<sp/>and<sp/>constrain<sp/>the<sp/>structure<sp/>of<sp/>the<sp/>GP</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="990"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>program.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="991"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="992"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classorg_1_1jgap_1_1gp_1_1impl_1_1_g_p_genotype" kindref="compound">GPGenotype</ref><sp/>gp<sp/>=<sp/>problem.create();</highlight></codeline>
<codeline lineno="993"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>gp.setVerboseOutput(true);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="994"><highlight class="normal"><sp/><sp/><sp/><sp/>gp.setVerboseOutput(</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="995"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classexamples_1_1gp_1_1symbolic_regression_1_1_symbolic_regression_1aaa3d1f6f6f8ef58b3ac3df7d9689246b" kindref="member">startTime</ref><sp/>=<sp/>System.currentTimeMillis();</highlight></codeline>
<codeline lineno="996"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Start<sp/>the<sp/>computation<sp/>with<sp/>maximum<sp/>800<sp/>evolutions.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="997"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>a<sp/>satisfying<sp/>result<sp/>is<sp/>found<sp/>(fitness<sp/>value<sp/>almost<sp/>0),<sp/>JGAP<sp/>stops</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="998"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>earlier<sp/>automatically.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="999"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1000"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>gp.evolve(numEvolutions);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1001"><highlight class="normal"></highlight></codeline>
<codeline lineno="1002"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1003"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>I&apos;m<sp/>rolling<sp/>my<sp/>own<sp/>to<sp/>to<sp/>be<sp/>able<sp/>to<sp/>control<sp/>output<sp/>better<sp/>etc.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1004"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1005"><highlight class="normal"><sp/><sp/><sp/><sp/>System.out.println(</highlight><highlight class="stringliteral">&quot;Creating<sp/>initial<sp/>population&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1006"><highlight class="normal"><sp/><sp/><sp/><sp/>System.out.println(</highlight><highlight class="stringliteral">&quot;Mem<sp/>free:<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1007"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>+<sp/>SystemKit.niceMemory(SystemKit.getTotalMemoryMB())<sp/>+</highlight></codeline>
<codeline lineno="1008"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/>MB&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1009"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="interfaceorg_1_1jgap_1_1gp_1_1_i_g_p_program" kindref="compound">IGPProgram</ref><sp/>fittest<sp/>=<sp/>null;</highlight></codeline>
<codeline lineno="1010"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>bestFit<sp/>=<sp/>-1.0d;</highlight></codeline>
<codeline lineno="1011"><highlight class="normal"><sp/><sp/><sp/><sp/>String<sp/>bestProgram<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1012"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>bestGen<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1013"><highlight class="normal"><sp/><sp/><sp/><sp/>HashMap&lt;String,<sp/>Integer&gt;<sp/>similiar<sp/>=<sp/>null;</highlight></codeline>
<codeline lineno="1014"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classexamples_1_1gp_1_1symbolic_regression_1_1_symbolic_regression_1aff693574d91b44b50fcfbacbb8f6714a" kindref="member">showSimiliar</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1015"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>similiar<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>HashMap&lt;String,<sp/>Integer&gt;<sp/>();</highlight></codeline>
<codeline lineno="1016"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1017"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>gen<sp/>=<sp/>1;<sp/>gen<sp/>&lt;=<sp/><ref refid="classexamples_1_1gp_1_1symbolic_regression_1_1_symbolic_regression_1a24d9df44a21940898dc355631dbc2777" kindref="member">numEvolutions</ref>;<sp/>gen++)<sp/>{</highlight></codeline>
<codeline lineno="1018"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>gp.evolve();<sp/></highlight><highlight class="comment">//<sp/>evolve<sp/>one<sp/>generation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1019"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>gp.calcFitness();</highlight></codeline>
<codeline lineno="1020"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>GPPopulation<sp/>pop<sp/>=<sp/>gp.getGPPopulation();</highlight></codeline>
<codeline lineno="1021"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="interfaceorg_1_1jgap_1_1gp_1_1_i_g_p_program" kindref="compound">IGPProgram</ref><sp/>thisFittest<sp/>=<sp/>pop.determineFittestProgram();</highlight></codeline>
<codeline lineno="1022"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>TODO:<sp/>Here<sp/>I<sp/>would<sp/>like<sp/>to<sp/>have<sp/>the<sp/>correlation<sp/>coefficient<sp/>etc</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1023"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>thisFittest.setApplicationData(<sp/>(Object)<sp/>(</highlight><highlight class="stringliteral">&quot;gen&quot;</highlight><highlight class="normal"><sp/>+<sp/>gen));</highlight></codeline>
<codeline lineno="1024"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ProgramChromosome<sp/>chrom<sp/>=<sp/>thisFittest.getChromosome(0);</highlight></codeline>
<codeline lineno="1025"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>String<sp/>program<sp/>=<sp/>chrom.toStringNorm(0);</highlight></codeline>
<codeline lineno="1026"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>fitness<sp/>=<sp/>thisFittest.getFitnessValue();</highlight></codeline>
<codeline lineno="1027"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classexamples_1_1gp_1_1symbolic_regression_1_1_symbolic_regression_1aff693574d91b44b50fcfbacbb8f6714a" kindref="member">showSimiliar</ref><sp/>||<sp/><ref refid="classexamples_1_1gp_1_1symbolic_regression_1_1_symbolic_regression_1a3fe3b5aec221fd8f8e8a45d5d525367b" kindref="member">showPopulation</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1028"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classexamples_1_1gp_1_1symbolic_regression_1_1_symbolic_regression_1a3fe3b5aec221fd8f8e8a45d5d525367b" kindref="member">showPopulation</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1029"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>System.out.println(</highlight><highlight class="stringliteral">&quot;Generation<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>gen<sp/>+</highlight></codeline>
<codeline lineno="1030"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/>(show<sp/>whole<sp/>population,<sp/>sorted)&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1031"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1032"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pop.sortByFitness();</highlight></codeline>
<codeline lineno="1033"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<ref refid="interfaceorg_1_1jgap_1_1gp_1_1_i_g_p_program" kindref="compound">IGPProgram</ref><sp/>p<sp/>:<sp/>pop.getGPPrograms())<sp/>{</highlight></codeline>
<codeline lineno="1034"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>fit<sp/>=<sp/>p.getFitnessValue();</highlight></codeline>
<codeline lineno="1035"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classexamples_1_1gp_1_1symbolic_regression_1_1_symbolic_regression_1aff693574d91b44b50fcfbacbb8f6714a" kindref="member">showSimiliar</ref><sp/>&amp;&amp;<sp/>fit<sp/>&lt;=<sp/>bestFit)<sp/>{</highlight></codeline>
<codeline lineno="1036"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>String<sp/>prog<sp/>=<sp/>p.toStringNorm(0);</highlight></codeline>
<codeline lineno="1037"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!similiar.containsKey(prog))<sp/>{</highlight></codeline>
<codeline lineno="1038"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>similiar.put(prog,<sp/>1);</highlight></codeline>
<codeline lineno="1039"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1040"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1041"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>similiar.put(prog,<sp/>similiar.get(prog)<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="1042"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1043"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1044"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classexamples_1_1gp_1_1symbolic_regression_1_1_symbolic_regression_1a3fe3b5aec221fd8f8e8a45d5d525367b" kindref="member">showPopulation</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1045"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>String<sp/>prg<sp/>=<sp/>p.toStringNorm(0);</highlight></codeline>
<codeline lineno="1046"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>sz<sp/>=<sp/>p.size();</highlight></codeline>
<codeline lineno="1047"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>System.out.println(</highlight><highlight class="stringliteral">&quot;\tprogram:<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>prg<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;<sp/>fitness:<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>fit);</highlight></codeline>
<codeline lineno="1048"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1049"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1050"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1051"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1052"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Yes,<sp/>I<sp/>have<sp/>to<sp/>think<sp/>more<sp/>about<sp/>this....</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1053"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Right<sp/>now<sp/>a<sp/>program<sp/>is<sp/>printed<sp/>if<sp/>it<sp/>has</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1054"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>better<sp/>fitness<sp/>value<sp/>than<sp/>the<sp/>former<sp/>best<sp/>solution.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1055"><highlight class="normal"></highlight></codeline>
<codeline lineno="1056"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>(gen<sp/>%<sp/>25<sp/>==<sp/>0)<sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1057"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>myOutputSolution(fittest,<sp/>gen);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1058"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1059"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(bestFit<sp/>&lt;<sp/>0.0d<sp/>||<sp/>fitness<sp/>&lt;<sp/>bestFit)<sp/>{</highlight></codeline>
<codeline lineno="1060"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bestGen<sp/>=<sp/>gen;</highlight></codeline>
<codeline lineno="1061"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classexamples_1_1gp_1_1symbolic_regression_1_1_symbolic_regression_1ac09b048b9537b5c6315ecba9c1836f1a" kindref="member">myOutputSolution</ref>(thisFittest,<sp/>gen);</highlight></codeline>
<codeline lineno="1062"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bestFit<sp/>=<sp/>fitness;</highlight></codeline>
<codeline lineno="1063"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bestProgram<sp/>=<sp/>program;</highlight></codeline>
<codeline lineno="1064"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fittest<sp/>=<sp/>thisFittest;</highlight></codeline>
<codeline lineno="1065"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classexamples_1_1gp_1_1symbolic_regression_1_1_symbolic_regression_1aff693574d91b44b50fcfbacbb8f6714a" kindref="member">showSimiliar</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1066"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>reset<sp/>the<sp/>hash</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1067"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>similiar.clear();<sp/></highlight><highlight class="comment">//<sp/>=<sp/>new<sp/>HashMap&lt;String,Integer&gt;();</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1068"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1069"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Ensure<sp/>that<sp/>the<sp/>best<sp/>solution<sp/>is<sp/>in<sp/>the<sp/>population.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1070"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>gp.addFittestProgram(thisFittest);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1071"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1072"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1073"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1074"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(gen<sp/>%<sp/>25<sp/>==<sp/>0<sp/>&amp;&amp;<sp/>gen<sp/>!=<sp/>numEvolutions)<sp/>{</highlight></codeline>
<codeline lineno="1075"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>System.out.println(&quot;Generation<sp/>&quot;<sp/>+<sp/>gen<sp/>+<sp/>&quot;<sp/>(This<sp/>is<sp/>a<sp/>keep<sp/>alive<sp/>message.)&quot;);</highlight></codeline>
<codeline lineno="1076"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>myOutputSolution(fittest,<sp/>gen);</highlight></codeline>
<codeline lineno="1077"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1078"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1079"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1080"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1081"><highlight class="normal"></highlight></codeline>
<codeline lineno="1082"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Print<sp/>the<sp/>best<sp/>solution<sp/>so<sp/>far<sp/>to<sp/>the<sp/>console.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1083"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>----------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1084"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>gp.outputSolution(gp.getAllTimeBest());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1085"><highlight class="normal"></highlight></codeline>
<codeline lineno="1086"><highlight class="normal"><sp/><sp/><sp/><sp/>System.out.println(</highlight><highlight class="stringliteral">&quot;\nAll<sp/>time<sp/>best<sp/>(from<sp/>generation<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>bestGen<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;)&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1087"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classexamples_1_1gp_1_1symbolic_regression_1_1_symbolic_regression_1ac09b048b9537b5c6315ecba9c1836f1a" kindref="member">myOutputSolution</ref>(fittest,<sp/><ref refid="classexamples_1_1gp_1_1symbolic_regression_1_1_symbolic_regression_1a24d9df44a21940898dc355631dbc2777" kindref="member">numEvolutions</ref>);</highlight></codeline>
<codeline lineno="1088"><highlight class="normal"><sp/><sp/><sp/><sp/>System.out.println(</highlight><highlight class="stringliteral">&quot;applicationData:<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>fittest.getApplicationData());</highlight></codeline>
<codeline lineno="1089"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Create<sp/>a<sp/>graphical<sp/>tree<sp/>of<sp/>the<sp/>best<sp/>solution&apos;s<sp/>program<sp/>and<sp/>write<sp/>it<sp/>to</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1090"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>a<sp/>PNG<sp/>file.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1091"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>----------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1092"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>problem.showTree(gp.getAllTimeBest(),<sp/>&quot;mathproblem_best.png&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1093"><highlight class="normal"></highlight></codeline>
<codeline lineno="1094"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classexamples_1_1gp_1_1symbolic_regression_1_1_symbolic_regression_1a55a0a74996362e5641e0c0a2a237aa44" kindref="member">endTime</ref><sp/>=<sp/>System.currentTimeMillis();</highlight></codeline>
<codeline lineno="1095"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>elapsedTime<sp/>=<sp/><ref refid="classexamples_1_1gp_1_1symbolic_regression_1_1_symbolic_regression_1a55a0a74996362e5641e0c0a2a237aa44" kindref="member">endTime</ref><sp/>-<sp/><ref refid="classexamples_1_1gp_1_1symbolic_regression_1_1_symbolic_regression_1aaa3d1f6f6f8ef58b3ac3df7d9689246b" kindref="member">startTime</ref>;</highlight></codeline>
<codeline lineno="1096"><highlight class="normal"><sp/><sp/><sp/><sp/>System.out.println(</highlight><highlight class="stringliteral">&quot;\nTotal<sp/>time<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>elapsedTime<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;ms&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1097"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classexamples_1_1gp_1_1symbolic_regression_1_1_symbolic_regression_1aff693574d91b44b50fcfbacbb8f6714a" kindref="member">showSimiliar</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1098"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>System.out.println(</highlight><highlight class="stringliteral">&quot;\nAll<sp/>solutions<sp/>with<sp/>the<sp/>best<sp/>fitness<sp/>(&quot;</highlight><highlight class="normal"><sp/>+<sp/>bestFit<sp/>+</highlight></codeline>
<codeline lineno="1099"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;):&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>TODO:<sp/>These<sp/>should<sp/>be<sp/>sorted<sp/>by<sp/>values.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(String<sp/>p<sp/>:<sp/>similiar.keySet())<sp/>{</highlight></codeline>
<codeline lineno="1102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>System.out.println(p<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;<sp/>(&quot;</highlight><highlight class="normal"><sp/>+<sp/>similiar.get(p)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;)&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1104"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1105"><highlight class="normal"><sp/><sp/><sp/><sp/>System.exit(0);</highlight></codeline>
<codeline lineno="1106"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1107"><highlight class="normal"></highlight></codeline>
<codeline lineno="1115" refid="classexamples_1_1gp_1_1symbolic_regression_1_1_symbolic_regression_1_1_formula_fitness_function" refkind="compound"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classexamples_1_1gp_1_1symbolic_regression_1_1_symbolic_regression_1_1_formula_fitness_function" kindref="compound">FormulaFitnessFunction</ref></highlight></codeline>
<codeline lineno="1116"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">extends</highlight><highlight class="normal"><sp/><ref refid="classorg_1_1jgap_1_1gp_1_1_g_p_fitness_function" kindref="compound">GPFitnessFunction</ref><sp/>{</highlight></codeline>
<codeline lineno="1117" refid="classexamples_1_1gp_1_1symbolic_regression_1_1_symbolic_regression_1_1_formula_fitness_function_1a9a9bd9dc890a0bbcbc3c71f29a9927d8" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">protected</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="classexamples_1_1gp_1_1symbolic_regression_1_1_symbolic_regression_1_1_formula_fitness_function_1a9a9bd9dc890a0bbcbc3c71f29a9927d8" kindref="member">evaluate</ref>(</highlight><highlight class="keyword">final</highlight><highlight class="normal"><sp/><ref refid="interfaceorg_1_1jgap_1_1gp_1_1_i_g_p_program" kindref="compound">IGPProgram</ref><sp/>a_subject)<sp/>{</highlight></codeline>
<codeline lineno="1118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classexamples_1_1gp_1_1symbolic_regression_1_1_symbolic_regression_1_1_formula_fitness_function_1a71a94e8097da3bfb7fefe9e4e6846ad3" kindref="member">computeRawFitness</ref>(a_subject);</highlight></codeline>
<codeline lineno="1119"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1120"><highlight class="normal"></highlight></codeline>
<codeline lineno="1121" refid="classexamples_1_1gp_1_1symbolic_regression_1_1_symbolic_regression_1_1_formula_fitness_function_1a71a94e8097da3bfb7fefe9e4e6846ad3" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="classexamples_1_1gp_1_1symbolic_regression_1_1_symbolic_regression_1_1_formula_fitness_function_1a71a94e8097da3bfb7fefe9e4e6846ad3" kindref="member">computeRawFitness</ref>(</highlight><highlight class="keyword">final</highlight><highlight class="normal"><sp/><ref refid="interfaceorg_1_1jgap_1_1gp_1_1_i_g_p_program" kindref="compound">IGPProgram</ref><sp/>ind)<sp/>{</highlight></codeline>
<codeline lineno="1122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>error<sp/>=<sp/>0.0f;</highlight></codeline>
<codeline lineno="1123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Object[]<sp/>noargs<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>Object[0];</highlight></codeline>
<codeline lineno="1124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Evaluate<sp/>function<sp/>for<sp/>the<sp/>input<sp/>numbers</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1126"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>double[]<sp/>results<sp/><sp/>=<sp/><sp/>new<sp/>double[numRows];</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/><ref refid="classexamples_1_1gp_1_1symbolic_regression_1_1_symbolic_regression_1ad5f6a203c254715be21128b6f82ab673" kindref="member">numRows</ref>;<sp/>j++)<sp/>{</highlight></codeline>
<codeline lineno="1128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Provide<sp/>the<sp/>variable<sp/>X<sp/>with<sp/>the<sp/>input<sp/>number.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>See<sp/>method<sp/>create(),<sp/>declaration<sp/>of<sp/>&quot;nodeSets&quot;<sp/>for<sp/>where<sp/>X<sp/>is</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>defined.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>-------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1132"><highlight class="normal"></highlight></codeline>
<codeline lineno="1133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>set<sp/>all<sp/>the<sp/>input<sp/>variables</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>variableIndex<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/><ref refid="classexamples_1_1gp_1_1symbolic_regression_1_1_symbolic_regression_1ab647e4a7ac66ce0c543f7906d302f3e3" kindref="member">numInputVariables</ref><sp/>+<sp/>1;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="1136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i<sp/>!=<sp/><ref refid="classexamples_1_1gp_1_1symbolic_regression_1_1_symbolic_regression_1a41a52e03f6aaf7e0317f9f2fb14525b7" kindref="member">outputVariable</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1137"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classexamples_1_1gp_1_1symbolic_regression_1_1_symbolic_regression_1abaa9073c106411b861ea296c98bd3009" kindref="member">variables</ref>[variableIndex].set(<ref refid="classexamples_1_1gp_1_1symbolic_regression_1_1_symbolic_regression_1aa588c62a94fe721a95da78977de37d62" kindref="member">data</ref>[i][j]);</highlight></codeline>
<codeline lineno="1138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>variableIndex++;</highlight></codeline>
<codeline lineno="1139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1141"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>result<sp/>=<sp/>ind.execute_double(0,<sp/>noargs);</highlight></codeline>
<codeline lineno="1143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>results[j]<sp/>=<sp/>result;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1144"><highlight class="normal"></highlight></codeline>
<codeline lineno="1145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Sum<sp/>up<sp/>the<sp/>error<sp/>between<sp/>actual<sp/>and<sp/>expected<sp/>result<sp/>to<sp/>get<sp/>a<sp/>defect</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>rate.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1147"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>-------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1148"><highlight class="normal"></highlight></codeline>
<codeline lineno="1149"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>hakank:<sp/>TODO:<sp/>test<sp/>with<sp/>different<sp/>metrics...</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>error<sp/>+=<sp/>Math.abs(result<sp/>-<sp/><ref refid="classexamples_1_1gp_1_1symbolic_regression_1_1_symbolic_regression_1aa588c62a94fe721a95da78977de37d62" kindref="member">data</ref>[<ref refid="classexamples_1_1gp_1_1symbolic_regression_1_1_symbolic_regression_1a41a52e03f6aaf7e0317f9f2fb14525b7" kindref="member">outputVariable</ref>][j]);<sp/></highlight><highlight class="comment">//<sp/>original</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>error<sp/>+=<sp/>Math.pow(Math.abs(result<sp/>-<sp/>data[outputVariable][j]),2);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1152"><highlight class="normal"></highlight></codeline>
<codeline lineno="1153"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>the<sp/>error<sp/>is<sp/>too<sp/>high,<sp/>stop<sp/>evaluation<sp/>and<sp/>return<sp/>worst<sp/>error</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1154"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>possible.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1155"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>----------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1156"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Double.isInfinite(error))<sp/>{</highlight></codeline>
<codeline lineno="1157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Double.MAX_VALUE;</highlight></codeline>
<codeline lineno="1158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1159"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">catch</highlight><highlight class="normal"><sp/>(ArithmeticException<sp/>ex)<sp/>{</highlight></codeline>
<codeline lineno="1160"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>should<sp/>not<sp/>happen,<sp/>some<sp/>illegal<sp/>operation<sp/>was<sp/>executed.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1161"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1162"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>System.out.println(ind);</highlight></codeline>
<codeline lineno="1163"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>ex;</highlight></codeline>
<codeline lineno="1164"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1165"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1166"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1167"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>experimental</highlight></codeline>
<codeline lineno="1168"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ProgramChromosome<sp/>chrom<sp/>=<sp/>ind.getChromosome(0);</highlight></codeline>
<codeline lineno="1169"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>String<sp/>program<sp/>=<sp/>chrom.toStringNorm(0);</highlight></codeline>
<codeline lineno="1170"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>double<sp/>length<sp/>=<sp/>program.length();</highlight></codeline>
<codeline lineno="1171"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1172"><highlight class="normal"></highlight></codeline>
<codeline lineno="1173"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>the<sp/>fitness<sp/>is<sp/>very<sp/>close<sp/>to<sp/>0.0<sp/>then<sp/>we<sp/>maybe<sp/>bump<sp/>it</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1174"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>up<sp/>to<sp/>see<sp/>alternative<sp/>solutions.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1175"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>-------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1176"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(error<sp/>&lt;=<sp/><ref refid="classexamples_1_1gp_1_1symbolic_regression_1_1_symbolic_regression_1adaa96c1e44db3faf9afaf2f689bd3269" kindref="member">bumpValue</ref><sp/>&amp;&amp;<sp/><ref refid="classexamples_1_1gp_1_1symbolic_regression_1_1_symbolic_regression_1aed2c9425ba0dee6ce09506ec67377b80" kindref="member">bumpPerfect</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1177"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="classexamples_1_1gp_1_1symbolic_regression_1_1_symbolic_regression_1a81b11950997f88aa0fdda2e938e67772" kindref="member">foundPerfect</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1178"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>System.out.println(</highlight><highlight class="stringliteral">&quot;Found<sp/>a<sp/>perfect<sp/>solution<sp/>with<sp/>err<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>error<sp/>+</highlight></codeline>
<codeline lineno="1179"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;!.<sp/>Bump<sp/>up<sp/>the<sp/>values!&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1180"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classexamples_1_1gp_1_1symbolic_regression_1_1_symbolic_regression_1a81b11950997f88aa0fdda2e938e67772" kindref="member">foundPerfect</ref><sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1181"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1182"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ProgramChromosome<sp/>chrom<sp/>=<sp/>ind.getChromosome(0);</highlight></codeline>
<codeline lineno="1183"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>String<sp/>program<sp/>=<sp/>chrom.toStringNorm(0);</highlight></codeline>
<codeline lineno="1184"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="classexamples_1_1gp_1_1symbolic_regression_1_1_symbolic_regression_1ae642324f14a8d80a8856af126d3dbc91" kindref="member">foundSolutions</ref>.containsKey(program))<sp/>{</highlight></codeline>
<codeline lineno="1185"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>System.out.println(</highlight><highlight class="stringliteral">&quot;PROGRAM:&quot;</highlight><highlight class="normal"><sp/>+<sp/>program<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;<sp/>error:<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>error);</highlight></codeline>
<codeline lineno="1186"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>foundSolutions.put(program,<sp/>1);</highlight></codeline>
<codeline lineno="1187"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1188"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1189"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>TODO:<sp/>We<sp/>may<sp/>want<sp/>to<sp/>show<sp/>the<sp/>number<sp/>of<sp/>hits</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1190"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>after<sp/>the<sp/>run...</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1191"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>foundSolutions.put(program,<sp/>foundSolutions.get(program)<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="1192"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1193"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>error<sp/>=<sp/>0.1d;</highlight></codeline>
<codeline lineno="1194"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1195"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>a<sp/>simplistc<sp/>version<sp/>of<sp/>length<sp/>punishing</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1196"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1197"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>too<sp/>experimental</highlight></codeline>
<codeline lineno="1198"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(punishLength)<sp/>{</highlight></codeline>
<codeline lineno="1199"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>error<sp/>+<sp/>length;</highlight></codeline>
<codeline lineno="1200"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>else<sp/>{</highlight></codeline>
<codeline lineno="1201"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>error;</highlight></codeline>
<codeline lineno="1202"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1203"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1204"><highlight class="normal"></highlight></codeline>
<codeline lineno="1205"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classexamples_1_1gp_1_1symbolic_regression_1_1_symbolic_regression_1a2211f414599fe21341db16918a44edb6" kindref="member">scaleError</ref><sp/>&gt;<sp/>0.0d)<sp/>{</highlight></codeline>
<codeline lineno="1206"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>error<sp/>*<sp/><ref refid="classexamples_1_1gp_1_1symbolic_regression_1_1_symbolic_regression_1a2211f414599fe21341db16918a44edb6" kindref="member">scaleError</ref>;</highlight></codeline>
<codeline lineno="1207"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1208"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1209"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>error;</highlight></codeline>
<codeline lineno="1210"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1211"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1212"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1223" refid="classexamples_1_1gp_1_1symbolic_regression_1_1_symbolic_regression_1ac09b048b9537b5c6315ecba9c1836f1a" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classexamples_1_1gp_1_1symbolic_regression_1_1_symbolic_regression_1ac09b048b9537b5c6315ecba9c1836f1a" kindref="member">myOutputSolution</ref>(<ref refid="interfaceorg_1_1jgap_1_1gp_1_1_i_g_p_program" kindref="compound">IGPProgram</ref><sp/>a_best,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>gen)<sp/>{</highlight></codeline>
<codeline lineno="1224"><highlight class="normal"><sp/><sp/><sp/><sp/>String<sp/>freeMB<sp/>=<sp/>SystemKit.niceMemory(SystemKit.getFreeMemoryMB());</highlight></codeline>
<codeline lineno="1225"><highlight class="normal"><sp/><sp/><sp/><sp/>System.out.println(</highlight><highlight class="stringliteral">&quot;Evolving<sp/>generation<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1226"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>+<sp/>(gen)</highlight></codeline>
<codeline lineno="1227"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>+<sp/></highlight><highlight class="stringliteral">&quot;/&quot;</highlight><highlight class="normal"><sp/>+<sp/><ref refid="classexamples_1_1gp_1_1symbolic_regression_1_1_symbolic_regression_1a24d9df44a21940898dc355631dbc2777" kindref="member">numEvolutions</ref></highlight></codeline>
<codeline lineno="1228"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>+<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>memory<sp/>free:<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1229"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>+<sp/>freeMB</highlight></codeline>
<codeline lineno="1230"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>+<sp/></highlight><highlight class="stringliteral">&quot;<sp/>MB&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1231"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(a_best<sp/>==<sp/>null)<sp/>{</highlight></codeline>
<codeline lineno="1232"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>System.out.println(</highlight><highlight class="stringliteral">&quot;No<sp/>best<sp/>solution<sp/>(null)&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1233"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1234"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1235"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>bestValue<sp/>=<sp/>a_best.getFitnessValue();</highlight></codeline>
<codeline lineno="1236"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Double.isInfinite(bestValue))<sp/>{</highlight></codeline>
<codeline lineno="1237"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>System.out.println(</highlight><highlight class="stringliteral">&quot;No<sp/>best<sp/>solution<sp/>(infinite)&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1238"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1239"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1240"><highlight class="normal"><sp/><sp/><sp/><sp/>System.out.println(</highlight><highlight class="stringliteral">&quot;Best<sp/>solution<sp/>fitness:<sp/>&quot;</highlight><highlight class="normal"><sp/>+</highlight></codeline>
<codeline lineno="1241"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NumberKit.niceDecimalNumber(bestValue,<sp/>2));</highlight></codeline>
<codeline lineno="1242"><highlight class="normal"><sp/><sp/><sp/><sp/>System.out.println(</highlight><highlight class="stringliteral">&quot;Best<sp/>solution:<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>a_best.toStringNorm(0));</highlight></codeline>
<codeline lineno="1243"><highlight class="normal"><sp/><sp/><sp/><sp/>String<sp/>depths<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1244"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>size<sp/>=<sp/>a_best.size();</highlight></codeline>
<codeline lineno="1245"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>size;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="1246"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1247"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>depths<sp/>+=<sp/></highlight><highlight class="stringliteral">&quot;<sp/>/<sp/>&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1248"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1249"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>depths<sp/>+=<sp/>a_best.getChromosome(i).getDepth(0);</highlight></codeline>
<codeline lineno="1250"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1251"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(size<sp/>==<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="1252"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>System.out.println(</highlight><highlight class="stringliteral">&quot;Depth<sp/>of<sp/>chrom:<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>depths);</highlight></codeline>
<codeline lineno="1253"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1254"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1255"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>System.out.println(</highlight><highlight class="stringliteral">&quot;Depths<sp/>of<sp/>chroms:<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>depths);</highlight></codeline>
<codeline lineno="1256"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1257"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1258"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="C:/Users/JulyaMaria/git/PruebaGit/JGap/LDH_Git/examples/src/examples/gp/symbolicRegression/SymbolicRegression.java"/>
  </compounddef>
</doxygen>
