.TH "examples.knapsack.KnapsackMain" 3 "Sat Nov 23 2013" "Version 1.2" "Práctica_5_LDH" \" -*- nroff -*-
.ad l
.nh
.SH NAME
examples.knapsack.KnapsackMain \- 
.SH SYNOPSIS
.br
.PP
.SS "Static Public Member Functions"

.in +1c
.ti -1c
.RI "static void \fBfindItemsForVolume\fP (double a_knapsackVolume)  throws Exception "
.br
.ti -1c
.RI "static void \fBmain\fP (String[] args)"
.br
.in -1c
.SS "Static Public Attributes"

.in +1c
.ti -1c
.RI "static final double[] \fBitemVolumes\fP"
.br
.ti -1c
.RI "static final String[] \fBitemNames\fP"
.br
.in -1c
.SS "Static Private Attributes"

.in +1c
.ti -1c
.RI "static final String \fBCVS_REVISION\fP = '$Revision: 1\&.10 $'"
.br
.ti -1c
.RI "static final int \fBMAX_ALLOWED_EVOLUTIONS\fP = 140"
.br
.in -1c
.SH "Detailed Description"
.PP 
This class provides an implementation of the classic knapsack problem using a genetic algorithm\&. The goal of the problem is to reach a given volume (of a knapsack) by putting a number of items into the knapsack\&. The closer the sum of the item volumes to the given volume the better\&. 
.PP
For further descriptions, compare the 'coins' example also provided\&.
.PP
\fBAuthor:\fP
.RS 4
Klaus Meffert 
.RE
.PP
\fBSince:\fP
.RS 4
2\&.3 
.RE
.PP

.PP
Definition at line 30 of file KnapsackMain\&.java\&.
.SH "Member Function Documentation"
.PP 
.SS "static void examples\&.knapsack\&.KnapsackMain\&.findItemsForVolume (doublea_knapsackVolume) throws Exception\fC [inline]\fP, \fC [static]\fP"
Executes the genetic algorithm to determine the minimum number of items necessary to make up the given target volume\&. The solution will then be written to the console\&.
.PP
\fBParameters:\fP
.RS 4
\fIa_knapsackVolume\fP the target volume for which this method is attempting to produce the optimal list of items
.RE
.PP
\fBExceptions:\fP
.RS 4
\fIException\fP 
.RE
.PP
\fBAuthor:\fP
.RS 4
Klaus Meffert 
.RE
.PP
\fBSince:\fP
.RS 4
2\&.3 
.RE
.PP

.PP
Definition at line 62 of file KnapsackMain\&.java\&.
.PP
References examples\&.knapsack\&.KnapsackMain\&.itemNames, examples\&.knapsack\&.KnapsackMain\&.itemVolumes, and examples\&.knapsack\&.KnapsackMain\&.MAX_ALLOWED_EVOLUTIONS\&.
.PP
Referenced by examples\&.knapsack\&.KnapsackMain\&.main()\&.
.SS "static void examples\&.knapsack\&.KnapsackMain\&.main (String[]args)\fC [inline]\fP, \fC [static]\fP"
Main method\&. A single command-line argument is expected, which is the volume to create (in other words, 75 would be equal to 75 ccm)\&.
.PP
\fBParameters:\fP
.RS 4
\fIargs\fP first and single element in the array = volume of the knapsack to fill as a double value
.RE
.PP
\fBAuthor:\fP
.RS 4
Klaus Meffert 
.RE
.PP
\fBSince:\fP
.RS 4
2\&.3 
.RE
.PP

.PP
Definition at line 164 of file KnapsackMain\&.java\&.
.PP
References examples\&.knapsack\&.KnapsackMain\&.findItemsForVolume(), and examples\&.knapsack\&.KnapsackFitnessFunction\&.MAX_BOUND\&.
.SH "Member Data Documentation"
.PP 
.SS "final String examples\&.knapsack\&.KnapsackMain\&.CVS_REVISION = '$Revision: 1\&.10 $'\fC [static]\fP, \fC [private]\fP"
String containing the CVS revision\&. Read out via reflection! 
.PP
Definition at line 32 of file KnapsackMain\&.java\&.
.SS "final String [] examples\&.knapsack\&.KnapsackMain\&.itemNames\fC [static]\fP"
\fBInitial value:\fP
.PP
.nf
= {
      "Torch", "Banana", "Miniradio", "TV", "Gameboy", "Small thingie",
      "Medium thingie", "Big thingie", "Huge thingie", "Gigantic thingie"}
.fi
Names of arbitrary items, only for outputting something imaginable 
.PP
Definition at line 45 of file KnapsackMain\&.java\&.
.PP
Referenced by examples\&.knapsack\&.KnapsackMain\&.findItemsForVolume()\&.
.SS "final double [] examples\&.knapsack\&.KnapsackMain\&.itemVolumes\fC [static]\fP"
\fBInitial value:\fP
.PP
.nf
= {
      50\&.2d, 14\&.8d, 27\&.5d, 6800\&.0d, 25\&.0d, 4\&.75d, 95\&.36d, 1500\&.7d, 18365\&.9d,
      83571\&.1d}
.fi
Volumes of arbitrary items in ccm 
.PP
Definition at line 40 of file KnapsackMain\&.java\&.
.PP
Referenced by examples\&.knapsack\&.KnapsackMain\&.findItemsForVolume()\&.
.SS "final int examples\&.knapsack\&.KnapsackMain\&.MAX_ALLOWED_EVOLUTIONS = 140\fC [static]\fP, \fC [private]\fP"
The total number of times we'll let the population evolve\&. 
.PP
Definition at line 37 of file KnapsackMain\&.java\&.
.PP
Referenced by examples\&.knapsack\&.KnapsackMain\&.findItemsForVolume()\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for Práctica_5_LDH from the source code\&.
