.TH "org.jgap.gp.INodeValidator" 3 "Sat Nov 23 2013" "Version 1.2" "Práctica_5_LDH" \" -*- nroff -*-
.ad l
.nh
.SH NAME
org.jgap.gp.INodeValidator \- 
.SH SYNOPSIS
.br
.PP
.PP
Inherits Serializable\&.
.PP
Inherited by \fBorg\&.jgap\&.gp\&.impl\&.NodeValidatorForTesting\fP\&.
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "boolean \fBvalidate\fP (ProgramChromosome a_chrom, \fBCommandGene\fP a_node, \fBCommandGene\fP a_rootNode, int a_tries, int a_num, int a_recurseLevel, Class a_type, \fBCommandGene\fP[] a_functionSet, int a_depth, boolean a_grow, int a_childIndex, boolean a_fullProgram)"
.br
.in -1c
.SS "Static Public Attributes"

.in +1c
.ti -1c
.RI "static final String \fBCVS_REVISION\fP = '$Revision: 1\&.7 $'"
.br
.in -1c
.SH "Detailed Description"
.PP 
A node validator checks whether a certain node is valid for a given evolution\&. See ProgramChromosome\&.growOrFullNode(\&.\&.)\&.
.PP
Purpose of this validator: If you have an idea of how the shape of your evolved program must look like regarding some spots (like the first node in the first chromosome to be evolved) then you can constrain your imaginations with this validator\&. But take care that constraining too much ( e\&.g\&., while not considering your available functions) may lead to an endless loop\&. The endless loop can be avoided by stopping after a number of tries (see method validate, parameter a_tries)\&.
.PP
\fBAuthor:\fP
.RS 4
Klaus Meffert 
.RE
.PP
\fBSince:\fP
.RS 4
3\&.0 
.RE
.PP

.PP
Definition at line 28 of file INodeValidator\&.java\&.
.SH "Member Function Documentation"
.PP 
.SS "boolean org\&.jgap\&.gp\&.INodeValidator\&.validate (ProgramChromosomea_chrom, \fBCommandGene\fPa_node, \fBCommandGene\fPa_rootNode, inta_tries, inta_num, inta_recurseLevel, Classa_type, \fBCommandGene\fP[]a_functionSet, inta_depth, booleana_grow, inta_childIndex, booleana_fullProgram)"
Validates a_node in the context of a_chrom\&. Considers the recursion level (a_recursLevel), the type needed (a_type) for the node, the functions available (a_functionSet) and the depth of the whole chromosome needed (a_depth), and whether grow mode is used (a_grow is true) or not\&.
.PP
\fBParameters:\fP
.RS 4
\fIa_chrom\fP the chromosome that will contain the node, if valid 
.br
\fIa_node\fP the selected node to be validated 
.br
\fIa_rootNode\fP the root node of a_node, may be null for top nodes 
.br
\fIa_tries\fP number of times the validator has been called, useful for stopping by returning true if the number exceeds a limit 
.br
\fIa_num\fP the chromosome's index in the individual of this chromosome 
.br
\fIa_recurseLevel\fP level of recursion 
.br
\fIa_type\fP the return type of the node needed 
.br
\fIa_functionSet\fP the array of available functions 
.br
\fIa_depth\fP the needed depth of the program chromosome 
.br
\fIa_grow\fP true: use grow mode, false: use full mode 
.br
\fIa_childIndex\fP index of the child in the parent node to which it belongs (-1 if node is root node) 
.br
\fIa_fullProgram\fP true: whole program is available in a_chrom 
.RE
.PP
\fBReturns:\fP
.RS 4
true: node is valid; false: node is invalid
.RE
.PP
\fBAuthor:\fP
.RS 4
Klaus Meffert 
.RE
.PP
\fBSince:\fP
.RS 4
3\&.0 
.RE
.PP

.SH "Member Data Documentation"
.PP 
.SS "final String org\&.jgap\&.gp\&.INodeValidator\&.CVS_REVISION = '$Revision: 1\&.7 $'\fC [static]\fP"
String containing the CVS revision\&. Read out via reflection! 
.PP
Definition at line 31 of file INodeValidator\&.java\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for Práctica_5_LDH from the source code\&.
